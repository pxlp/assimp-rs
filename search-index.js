var searchIndex = {};
searchIndex['assimp'] = {"items":[[0,"","assimp","# assimp - Open Asset Import Library",null,null],[3,"Animation","","Animation type (not yet implemented)",null,null],[3,"NodeAnim","","NodeAnim type (not yet implemented)",null,null],[3,"VectorKey","","VectorKey type (not yet implemented)",null,null],[3,"QuatKey","","QuatKey type (not yet implemented)",null,null],[3,"Camera","","Camera type (not yet implemented)",null,null],[3,"Face","","Face type (not yet implemented)",null,null],[3,"Light","","Light type (not yet implemented)",null,null],[3,"Material","","Material type (not yet implemented)",null,null],[3,"Mesh","","Mesh type (incomplete)",null,null],[3,"Node","","The `Node` type represents a node in the imported scene hierarchy.",null,null],[3,"Scene","","The `Scene` type is the root container for all imported scene data.",null,null],[3,"Texture","","Texture type.",null,null],[0,"export","","The `export` module implements functionality for exporting scenes (not yet implemented).",null,null],[0,"import","","The `import` module contains functionality for importing scenes.",null,null],[3,"Importer","assimp::import","The `Importer` type.",null,null],[0,"structs","","Argument structs for `Importer` post-processing configuration.",null,null],[3,"CalcTangentSpace","assimp::import::structs","Arguments for `calc_tangent_space` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",0,null],[12,"max_smoothing_angle","","Maximum angle between two vertex tangents used for smoothing. Default: 45.0",0,null],[12,"texture_channel","","Source UV channel for tangent space computation. Default: 0",0,null],[3,"RemoveComponent","","Arguments for `remove_component` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",1,null],[12,"components","","Specify which components to remove. Default: none",1,null],[3,"GenerateNormals","","Arguments for `generate_normals` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",2,null],[12,"smooth","","Whether the generated normals are smoothed or not. Default: false",2,null],[12,"max_smoothing_angle","","Maximum angle between two vertex normals used for smoothing. Default: 175.0\nOnly applies if `smooth` is `true`.",2,null],[3,"SplitLargeMeshes","","Arguments for `split_large_meshes` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",3,null],[12,"vertex_limit","","Maximum number of vertices per mesh. Default: 1000000",3,null],[12,"triangle_limit","","Maximum number of triangles per mesh. Default: 1000000",3,null],[3,"PreTransformVertices","","Arguments for `pre_transform_vertices` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",4,null],[12,"keep_hierarchy","","Whether to keep the existing scene hierarchy. Default: false",4,null],[12,"normalize","","Whether to normalize all vertices into the [-1, 1] range. Default: false",4,null],[12,"add_root_transformation","","Whether to pre-transform all vertices using the matrix specified in the\n`root_transformation` field. Default: false",4,null],[12,"root_transformation","","Transformation matrix to use.",4,null],[3,"LimitBoneWeights","","Arguments for `limit_bone_weights` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",5,null],[12,"max_weights","","Maximum number of bones that affect a single vertex. Default: 4",5,null],[3,"ImproveCacheLocality","","Arguments for `improve_cache_locality` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",6,null],[12,"cache_size","","Set the size of the post-transform vertex cache. Default: 12",6,null],[3,"RemoveRedundantMaterials","","Arguments for `remove_redundant_materials` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",7,null],[12,"exclude_list","","Space-delimited list of materials to keep. Identifiers containing whitespace must be\nenclosed in single quotes. e.g. `material1 'material 2' material3`.",7,null],[3,"SortByPrimitiveType","","Arguments for `sort_by_primitive_type` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",8,null],[12,"remove","","List of primitive types to remove. Default: none",8,null],[3,"FindDegenerates","","Arguments for `find_degenerates` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",9,null],[12,"remove","","Whether to remove any found degenerates. Default: true",9,null],[3,"FindInvalidData","","Arguments for `find_invalid_data` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",10,null],[12,"accuracy","","Specify the accuracy for considering animation values as invalid. Default: 0",10,null],[3,"TransformUVCoords","","Arguments for `transform_uv_coords` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",11,null],[12,"flags","","Specify which UV transforms to evaluate. Default: all",11,null],[3,"OptimizeGraph","","Arguments for `optimize_graph` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",12,null],[12,"exclude_list","","Space-delimited list of nodes to keep. Identifiers containing whitespace must be\nenclosed in single quotes. e.g. `node1 'node 2' node3`.",12,null],[3,"SplitByBoneCount","","Arguments for `split_by_bone_count` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",13,null],[12,"max_bones","","Maximum number of bones per mesh. Default: 60",13,null],[3,"Debone","","Arguments for `debone` post-process step.",null,null],[12,"enable","","Whether to enable the step. Default: false",14,null],[12,"threshold","","Threshold for considering bone necessary. Default: 1.0",14,null],[12,"all_or_none","","Whether to require all bones to meet the threshold before removing any. Default: false",14,null],[4,"ComponentType","","Enumerates components of the Scene and Mesh data structures that can be excluded from the import\nusing the `remove_component` step.",null,null],[13,"Normals","","",15,null],[13,"TangentsAndBitangents","","",15,null],[13,"Colors","","",15,null],[13,"TexCoords","","",15,null],[13,"BoneWeights","","",15,null],[13,"Animations","","",15,null],[13,"Textures","","",15,null],[13,"Lights","","",15,null],[13,"Cameras","","",15,null],[13,"Meshes","","",15,null],[13,"Materials","","",15,null],[4,"UVTransformFlag","","",null,null],[13,"Scaling","","",16,null],[13,"Rotation","","",16,null],[13,"Translation","","",16,null],[13,"All","","",16,null],[4,"PrimitiveType","","",null,null],[13,"Point","","",17,null],[13,"Line","","",17,null],[13,"Triangle","","",17,null],[13,"Polygon","","",17,null],[11,"eq","","",15,{"inputs":[{"name":"componenttype"},{"name":"componenttype"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"componenttype"},{"name":"componenttype"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"componenttype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"componenttype"}],"output":{"name":"componenttype"}}],[11,"eq","","",16,{"inputs":[{"name":"uvtransformflag"},{"name":"uvtransformflag"}],"output":{"name":"bool"}}],[11,"ne","","",16,{"inputs":[{"name":"uvtransformflag"},{"name":"uvtransformflag"}],"output":{"name":"bool"}}],[11,"fmt","","",16,{"inputs":[{"name":"uvtransformflag"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"uvtransformflag"}],"output":{"name":"uvtransformflag"}}],[11,"eq","","",17,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"primitivetype"},{"name":"primitivetype"}],"output":{"name":"bool"}}],[11,"fmt","","",17,{"inputs":[{"name":"primitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"primitivetype"}],"output":{"name":"primitivetype"}}],[11,"default","","",0,{"inputs":[{"name":"calctangentspace"}],"output":{"name":"calctangentspace"}}],[11,"default","","",1,{"inputs":[{"name":"removecomponent"}],"output":{"name":"removecomponent"}}],[11,"default","","",2,{"inputs":[{"name":"generatenormals"}],"output":{"name":"generatenormals"}}],[11,"default","","",3,{"inputs":[{"name":"splitlargemeshes"}],"output":{"name":"splitlargemeshes"}}],[11,"default","","",4,{"inputs":[{"name":"pretransformvertices"}],"output":{"name":"pretransformvertices"}}],[11,"default","","",5,{"inputs":[{"name":"limitboneweights"}],"output":{"name":"limitboneweights"}}],[11,"default","","",6,{"inputs":[{"name":"improvecachelocality"}],"output":{"name":"improvecachelocality"}}],[11,"default","","",7,{"inputs":[{"name":"removeredundantmaterials"}],"output":{"name":"removeredundantmaterials"}}],[11,"default","","",8,{"inputs":[{"name":"sortbyprimitivetype"}],"output":{"name":"sortbyprimitivetype"}}],[11,"default","","",9,{"inputs":[{"name":"finddegenerates"}],"output":{"name":"finddegenerates"}}],[11,"default","","",10,{"inputs":[{"name":"findinvaliddata"}],"output":{"name":"findinvaliddata"}}],[11,"default","","",11,{"inputs":[{"name":"transformuvcoords"}],"output":{"name":"transformuvcoords"}}],[11,"default","","",12,{"inputs":[{"name":"optimizegraph"}],"output":{"name":"optimizegraph"}}],[11,"default","","",13,{"inputs":[{"name":"splitbybonecount"}],"output":{"name":"splitbybonecount"}}],[11,"default","","",14,{"inputs":[{"name":"debone"}],"output":{"name":"debone"}}],[11,"new","assimp::import","Create a new Importer.",18,{"inputs":[{"name":"importer"}],"output":{"name":"importer"}}],[11,"read_file","","Load a scene from the specified file.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":{"name":"result"}}],[11,"read_string","","Load a scene from a string.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":{"name":"result"}}],[11,"apply_postprocessing","","Apply post-processing to an already-imported scene.",18,{"inputs":[{"name":"importer"},{"name":"scene"}],"output":{"name":"result"}}],[11,"measure_time","","Enables time measurements.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"favour_speed","","A hint to Assimp to favour speed against import quality.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"calc_tangent_space","","Calculates the tangents and bitangents for the imported meshes.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"join_identical_vertices","","Identifies and joins identical vertex data sets within all imported meshes.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"make_left_handed","","Converts all the imported data to a left-handed coordinate space.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"triangulate","","Triangulates all faces of all meshes.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"remove_component","","Removes some parts of the data structure (animations, materials, light sources, cameras,\ntextures, vertex components).",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"generate_normals","","Generates normals for imported meshes.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"split_large_meshes","","Splits large meshes into smaller sub-meshes.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"pre_transform_vertices","","Removes the node graph and pre-transforms all vertices with the local transformation\nmatrices of their nodes.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"limit_bone_weights","","Limits the number of bones simultaneously affecting a single vertex to a maximum value.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"validate_data_structure","","Validates the imported scene data structure.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"improve_cache_locality","","Reorders triangles for better vertex cache locality.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"remove_redudant_materials","","Searches for redundant/unreferenced materials and removes them.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"fix_infacing_normals","","This step tries to determine which meshes have normal vectors that are facing inwards and\ninverts them.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"sort_by_primitive_type","","This step splits meshes with more than one primitive type in homogeneous sub-meshes.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"find_degenerates","","This step searches all meshes for degenerate primitives and converts them to proper lines\nor points.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"find_invalid_data","","This step searches all meshes for invalid data, such as zeroed normal vectors or invalid UV\ncoords and removes/fixes them. This is intended to get rid of some common exporter errors.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"gen_uv_coords","","This step converts non-UV mappings (such as spherical or cylindrical mapping) to proper\ntexture coordinate channels.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"transform_uv_coords","","This step applies per-texture UV transformations and bakes them into stand-alone vtexture\ncoordinate channels.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"find_instances","","This step searches for duplicate meshes and replaces them with references to the first mesh.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"optimize_meshes","","A postprocessing step to reduce the number of meshes.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"optimize_graph","","A postprocessing step to optimize the scene hierarchy.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"flip_uvs","","This step flips all UV coordinates along the y-axis and adjusts material settings and\nbitangents accordingly.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"flip_winding_order","","This step adjusts the output face winding order to be CW.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"split_by_bone_count","","This step splits meshes with many bones into sub-meshes so that each submesh has fewer or\nas many bones as a given limit.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"debone","","This step removes bones losslessly or according to some threshold.",18,{"inputs":[{"name":"importer"},{"name":"f"}],"output":null}],[11,"import_no_skeleton_meshes","","Global setting to disable generation of skeleton dummy meshes",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"import_mdl_colormap","","Sets the colormap to be used to decode embedded textures in MDL (Quake or 3DGS) files.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":null}],[11,"fbx_read_all_geometry_layers","","Set whether the FBX importer will merge all geometry layers present in the source file or\ntake only the first.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_read_all_materials","","Set whether the FBX importer will read all materials present in the source file or take only\nthe referenced materials. This has no effect if `fbx_read_materials` is false.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_read_materials","","Set whether the FBX importer will read materials.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_read_cameras","","Set whether the FBX importer will read cameras.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_read_lights","","Set whether the FBX importer will read light sources.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_read_animations","","Set whether the FBX importer will read animations.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_strict_mode","","Set whether the FBX importer will act in strict mode in which only FBX 2013 is supported and\nany other sub formats are rejected. FBX 2013 is the primary target for the importer, so this\nformat is best supported and well-tested.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_preserve_pivots","","Set whether the FBX importer will preserve pivot points for transformations (as extra\nnodes). If set to false, pivots and offsets will be evaluated whenever possible.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"fbx_optimize_empty_animation_curves","","Specifies whether the FBX importer will drop empty animation curves or animation curves\nwhich match the bind pose transformation over their entire defined range.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"global_keyframe","","Set the vertex animation keyframe to be imported",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"md3_keyframe","","Override [`global_keyframe`](#method.global_keyframe) property for the MD3 importer.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"md2_keyframe","","Override [`global_keyframe`](#method.global_keyframe) property for the MD2 importer.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"mdl_keyframe","","Override [`global_keyframe`](#method.global_keyframe) property for the MDL importer.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"mdc_keyframe","","Override [`global_keyframe`](#method.global_keyframe) property for the MDC importer.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"smd_keyframe","","Override [`global_keyframe`](#method.global_keyframe) property for the SMD importer.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"unreal_keyframe","","Override [`global_keyframe`](#method.global_keyframe) property for the Unreal importer.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"ac_separate_bf_cull","","Configures the AC importer to collect all surfaces which have the \"Backface cull\" flag set\nin separate meshes.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"ac_eval_subdivision","","Configures whether the AC importer evaluates subdivision surfaces (indicated by the presence\nof the 'subdiv' attribute in the file). By default, Assimp performs the subdivision using\nthe standard Catmull-Clark algorithm.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"unreal_handle_flags","","Configures the Unreal importer to separate faces with different surface flags (e.g.\ntwo-sided vs. single-sided).",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"ter_make_uvs","","Configures the terragen importer to compute UVs for terrains, if not given.\nFurthermore a default texture is assigned.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"ase_reconstruct_normals","","Configures the ASE importer to always reconstruct normal vectors based on the smoothing\ngroups loaded from the file.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"md3_handle_multipart","","Configures the MD3 importer to detect and process multi-part Quake player models.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"md3_skin_name","","Tells the MD3 importer which skin files to load.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":null}],[11,"md3_shader_src","","Specify the Quake 3 shader file to be used for a particular MD3 file. This can also be a\nsearch path.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":null}],[11,"lwo_one_layer_only_str","","Configures the LWO importer to load just one layer from the model.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":null}],[11,"lwo_one_layer_only_int","","Configures the LWO importer to load just one layer from the model.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"md5_no_anim_autoload","","Configures the MD5 loader to not load the MD5ANIM file for a MD5MESH file automatically.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"lws_anim_start","","Defines the begin of the time range for which the LWS loader evaluates animations and\ncomputes aiNodeAnims.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"lws_anim_end","","Defines the end of the time range for which the LWS loader evaluates animations and\ncomputs aiNodeAnims. See [`lws_anim_start`](#method.lws_anim_start) for more info.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"irr_anim_fps","","Defines the output frame rate of the IRR loader.",18,{"inputs":[{"name":"importer"},{"name":"i32"}],"output":null}],[11,"ogre_material_file","","Ogre Importer will try to find referenced materials from this file.",18,{"inputs":[{"name":"importer"},{"name":"str"}],"output":null}],[11,"ogre_texture_type_from_filename","","Ogre Importer detect the texture usage from its filename.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"ifc_skip_space_representations","","Specifies whether the IFC loader skips over IfcSpace elements.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"ifc_skip_curve_representations","","Specifies whether the IFC loader skips over shape representations of type 'Curve2D'.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"ifc_custom_triangulation","","Specifies whether the IFC loader will use its own, custom triangulation algorithm to\ntriangulate wall and floor meshes.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"collada_ignore_up_direction","","Tells the Collada importer to ignore the up direction specified in the file.",18,{"inputs":[{"name":"importer"},{"name":"bool"}],"output":null}],[11,"get_extension_list","","Get a list of all file extensions supported by Assimp.",18,{"inputs":[{"name":"importer"}],"output":{"name":"vec"}}],[11,"drop","","",18,{"inputs":[{"name":"importer"}],"output":null}],[0,"log","assimp","",null,null],[3,"LogStream","assimp::log","",null,null],[11,"file","","",19,{"inputs":[{"name":"logstream"},{"name":"str"}],"output":{"name":"option"}}],[11,"stdout","","",19,{"inputs":[{"name":"logstream"}],"output":{"name":"logstream"}}],[11,"stderr","","",19,{"inputs":[{"name":"logstream"}],"output":{"name":"logstream"}}],[11,"attached","","",19,{"inputs":[{"name":"logstream"}],"output":{"name":"bool"}}],[11,"attach","","",19,{"inputs":[{"name":"logstream"}],"output":null}],[11,"detach","","",19,{"inputs":[{"name":"logstream"}],"output":null}],[11,"set_verbose_logging","","",19,{"inputs":[{"name":"logstream"},{"name":"bool"}],"output":null}],[11,"drop","","",19,{"inputs":[{"name":"logstream"}],"output":null}],[0,"math","assimp","The `math` module contains definitions of primitive math types.",null,null],[0,"color3","assimp::math","",null,null],[3,"Color3D","assimp::math::color3","Color3D docs",null,null],[11,"eq","","",20,{"inputs":[{"name":"color3d"},{"name":"color3d"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"color3d"},{"name":"color3d"}],"output":{"name":"bool"}}],[11,"fmt","","",20,{"inputs":[{"name":"color3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"color3d"}],"output":{"name":"color3d"}}],[11,"fmt","ffi::anim","",21,{"inputs":[{"name":"aivectorkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",21,{"inputs":[{"name":"aivectorkey"}],"output":{"name":"aivectorkey"}}],[11,"fmt","","",22,{"inputs":[{"name":"aiquatkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",22,{"inputs":[{"name":"aiquatkey"}],"output":{"name":"aiquatkey"}}],[11,"fmt","","",23,{"inputs":[{"name":"aimeshkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",23,{"inputs":[{"name":"aimeshkey"}],"output":{"name":"aimeshkey"}}],[11,"eq","","",24,{"inputs":[{"name":"aianimbehaviour"},{"name":"aianimbehaviour"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"aianimbehaviour"},{"name":"aianimbehaviour"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"aianimbehaviour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"aianimbehaviour"}],"output":{"name":"aianimbehaviour"}}],[11,"fmt","ffi::camera","",25,{"inputs":[{"name":"aicamera"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",25,{"inputs":[{"name":"aicamera"}],"output":{"name":"aicamera"}}],[11,"fmt","ffi::cimport","",26,{"inputs":[{"name":"aipropertystore"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"aipropertystore"}],"output":{"name":"aipropertystore"}}],[11,"hash","ffi::config","",27,null],[11,"cmp","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"eq","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"fmt","","",27,{"inputs":[{"name":"aicomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"all","","Returns the set containing all flags.",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bits","","Returns the raw value of the flags currently stored.",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",27,{"inputs":[{"name":"aicomponent"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",27,{"inputs":[{"name":"aicomponent"},{"name":"u32"}],"output":{"name":"aicomponent"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",27,null],[11,"remove","","Removes the specified flags in-place.",27,null],[11,"toggle","","Toggles the specified flags in-place.",27,null],[11,"bitor","","Returns the union of the two sets of flags.",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"sub","","Returns the set difference of the two sets of flags.",27,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"not","","Returns the complement of this set of flags.",27,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"from_iter","","",27,{"inputs":[{"name":"aicomponent"},{"name":"t"}],"output":{"name":"aicomponent"}}],[11,"hash","","",28,null],[11,"cmp","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"option"}}],[11,"lt","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"le","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"gt","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ge","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"eq","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"fmt","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"all","","Returns the set containing all flags.",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"u32"}],"output":{"name":"aiuvtransformflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",28,null],[11,"remove","","Removes the specified flags in-place.",28,null],[11,"toggle","","Toggles the specified flags in-place.",28,null],[11,"bitor","","Returns the union of the two sets of flags.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"not","","Returns the complement of this set of flags.",28,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"from_iter","","",28,{"inputs":[{"name":"aiuvtransformflags"},{"name":"t"}],"output":{"name":"aiuvtransformflags"}}],[11,"hash","ffi::importerdesc","",29,null],[11,"cmp","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"eq","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"all","","Returns the set containing all flags.",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"u32"}],"output":{"name":"aiimporterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",29,null],[11,"remove","","Removes the specified flags in-place.",29,null],[11,"toggle","","Toggles the specified flags in-place.",29,null],[11,"bitor","","Returns the union of the two sets of flags.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",29,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"not","","Returns the complement of this set of flags.",29,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"from_iter","","",29,{"inputs":[{"name":"aiimporterflags"},{"name":"t"}],"output":{"name":"aiimporterflags"}}],[11,"eq","ffi::light","",30,{"inputs":[{"name":"ailightsourcetype"},{"name":"ailightsourcetype"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"ailightsourcetype"},{"name":"ailightsourcetype"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"ailightsourcetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"ailightsourcetype"}],"output":{"name":"ailightsourcetype"}}],[11,"fmt","","",31,{"inputs":[{"name":"ailight"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"ailight"}],"output":{"name":"ailight"}}],[11,"eq","ffi::material","",32,{"inputs":[{"name":"aitextureop"},{"name":"aitextureop"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"aitextureop"},{"name":"aitextureop"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"aitextureop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"aitextureop"}],"output":{"name":"aitextureop"}}],[11,"eq","","",33,{"inputs":[{"name":"aitexturemapmode"},{"name":"aitexturemapmode"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"aitexturemapmode"},{"name":"aitexturemapmode"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"aitexturemapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"aitexturemapmode"}],"output":{"name":"aitexturemapmode"}}],[11,"eq","","",34,{"inputs":[{"name":"aitexturemapping"},{"name":"aitexturemapping"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"aitexturemapping"},{"name":"aitexturemapping"}],"output":{"name":"bool"}}],[11,"fmt","","",34,{"inputs":[{"name":"aitexturemapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",34,{"inputs":[{"name":"aitexturemapping"}],"output":{"name":"aitexturemapping"}}],[11,"eq","","",35,{"inputs":[{"name":"aitexturetype"},{"name":"aitexturetype"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"aitexturetype"},{"name":"aitexturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"aitexturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"aitexturetype"}],"output":{"name":"aitexturetype"}}],[11,"eq","","",36,{"inputs":[{"name":"aishadingmode"},{"name":"aishadingmode"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"aishadingmode"},{"name":"aishadingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"aishadingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"aishadingmode"}],"output":{"name":"aishadingmode"}}],[11,"hash","","",37,null],[11,"cmp","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"option"}}],[11,"lt","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"le","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"gt","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ge","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"clone","","",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"eq","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"all","","Returns the set containing all flags.",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",37,{"inputs":[{"name":"aitextureflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",37,{"inputs":[{"name":"aitextureflags"},{"name":"u32"}],"output":{"name":"aitextureflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",37,null],[11,"remove","","Removes the specified flags in-place.",37,null],[11,"toggle","","Toggles the specified flags in-place.",37,null],[11,"bitor","","Returns the union of the two sets of flags.",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",37,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"not","","Returns the complement of this set of flags.",37,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"from_iter","","",37,{"inputs":[{"name":"aitextureflags"},{"name":"t"}],"output":{"name":"aitextureflags"}}],[11,"eq","","",38,{"inputs":[{"name":"aiblendmode"},{"name":"aiblendmode"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"aiblendmode"},{"name":"aiblendmode"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"aiblendmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"aiblendmode"}],"output":{"name":"aiblendmode"}}],[11,"fmt","","",39,{"inputs":[{"name":"aiuvtransform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"aiuvtransform"}],"output":{"name":"aiuvtransform"}}],[11,"eq","","",40,{"inputs":[{"name":"aipropertytypeinfo"},{"name":"aipropertytypeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"aipropertytypeinfo"},{"name":"aipropertytypeinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"aipropertytypeinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"aipropertytypeinfo"}],"output":{"name":"aipropertytypeinfo"}}],[11,"fmt","ffi::mesh","",41,{"inputs":[{"name":"aivertexweight"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"aivertexweight"}],"output":{"name":"aivertexweight"}}],[11,"hash","","",42,null],[11,"cmp","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"option"}}],[11,"lt","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"le","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"gt","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ge","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"eq","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"all","","Returns the set containing all flags.",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"u32"}],"output":{"name":"aiprimitivetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",42,null],[11,"remove","","Removes the specified flags in-place.",42,null],[11,"toggle","","Toggles the specified flags in-place.",42,null],[11,"bitor","","Returns the union of the two sets of flags.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"sub","","Returns the set difference of the two sets of flags.",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"not","","Returns the complement of this set of flags.",42,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"from_iter","","",42,{"inputs":[{"name":"aiprimitivetype"},{"name":"t"}],"output":{"name":"aiprimitivetype"}}],[11,"eq","ffi::metadata","",43,{"inputs":[{"name":"aimetadatatype"},{"name":"aimetadatatype"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"aimetadatatype"},{"name":"aimetadatatype"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"aimetadatatype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"aimetadatatype"}],"output":{"name":"aimetadatatype"}}],[11,"hash","ffi::postprocess","",44,null],[11,"cmp","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"option"}}],[11,"lt","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"le","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"gt","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ge","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"clone","","",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"eq","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"all","","Returns the set containing all flags.",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bits","","Returns the raw value of the flags currently stored.",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"u32"}],"output":{"name":"aipostprocesssteps"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",44,null],[11,"remove","","Removes the specified flags in-place.",44,null],[11,"toggle","","Toggles the specified flags in-place.",44,null],[11,"bitor","","Returns the union of the two sets of flags.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"sub","","Returns the set difference of the two sets of flags.",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"not","","Returns the complement of this set of flags.",44,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"from_iter","","",44,{"inputs":[{"name":"aipostprocesssteps"},{"name":"t"}],"output":{"name":"aipostprocesssteps"}}],[11,"hash","ffi::scene","",45,null],[11,"cmp","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"option"}}],[11,"lt","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"le","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"gt","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ge","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"eq","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"all","","Returns the set containing all flags.",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",45,{"inputs":[{"name":"aisceneflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",45,{"inputs":[{"name":"aisceneflags"},{"name":"u32"}],"output":{"name":"aisceneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",45,null],[11,"remove","","Removes the specified flags in-place.",45,null],[11,"toggle","","Toggles the specified flags in-place.",45,null],[11,"bitor","","Returns the union of the two sets of flags.",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",45,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"not","","Returns the complement of this set of flags.",45,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"from_iter","","",45,{"inputs":[{"name":"aisceneflags"},{"name":"t"}],"output":{"name":"aisceneflags"}}],[11,"fmt","ffi::texture","",46,{"inputs":[{"name":"aitexel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"aitexel"}],"output":{"name":"aitexel"}}],[11,"eq","ffi::types::color3","",47,{"inputs":[{"name":"aicolor3d"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"aicolor3d"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"aicolor3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"aicolor3d"}],"output":{"name":"aicolor3d"}}],[11,"eq","ffi::types::color4","",48,{"inputs":[{"name":"aicolor4d"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"aicolor4d"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"aicolor4d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"aicolor4d"}],"output":{"name":"aicolor4d"}}],[11,"eq","ffi::types::matrix3","",49,{"inputs":[{"name":"aimatrix3x3"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"aimatrix3x3"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"aimatrix3x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"aimatrix3x3"}],"output":{"name":"aimatrix3x3"}}],[11,"eq","ffi::types::matrix4","",50,{"inputs":[{"name":"aimatrix4x4"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"aimatrix4x4"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"aimatrix4x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"aimatrix4x4"}],"output":{"name":"aimatrix4x4"}}],[11,"eq","ffi::types::quaternion","",51,{"inputs":[{"name":"aiquaternion"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"aiquaternion"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"aiquaternion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"aiquaternion"}],"output":{"name":"aiquaternion"}}],[11,"default","ffi::types::string","",52,{"inputs":[{"name":"aistring"}],"output":{"name":"aistring"}}],[11,"as_ref","","",52,{"inputs":[{"name":"aistring"}],"output":{"name":"str"}}],[11,"from","","",52,{"inputs":[{"name":"aistring"},{"name":"str"}],"output":{"name":"aistring"}}],[11,"clone","","",52,{"inputs":[{"name":"aistring"}],"output":{"name":"aistring"}}],[11,"fmt","","",52,{"inputs":[{"name":"aistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",52,{"inputs":[{"name":"aistring"},{"name":"aistring"}],"output":{"name":"bool"}}],[11,"eq","ffi::types::vector2","",53,{"inputs":[{"name":"aivector2d"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"aivector2d"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"aivector2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",53,{"inputs":[{"name":"aivector2d"}],"output":{"name":"aivector2d"}}],[11,"eq","ffi::types::vector3","",54,{"inputs":[{"name":"aivector3d"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"aivector3d"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"aivector3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",54,{"inputs":[{"name":"aivector3d"}],"output":{"name":"aivector3d"}}],[11,"eq","ffi::types","",55,{"inputs":[{"name":"aiplane"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"aiplane"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"aiplane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",55,{"inputs":[{"name":"aiplane"}],"output":{"name":"aiplane"}}],[11,"eq","","",56,{"inputs":[{"name":"airay"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"airay"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"airay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",56,{"inputs":[{"name":"airay"}],"output":{"name":"airay"}}],[11,"eq","","",57,{"inputs":[{"name":"aireturn"},{"name":"aireturn"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"aireturn"},{"name":"aireturn"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"aireturn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",57,{"inputs":[{"name":"aireturn"}],"output":{"name":"aireturn"}}],[11,"eq","","",58,{"inputs":[{"name":"aiorigin"},{"name":"aiorigin"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"aiorigin"},{"name":"aiorigin"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"aiorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",58,{"inputs":[{"name":"aiorigin"}],"output":{"name":"aiorigin"}}],[11,"eq","","",59,{"inputs":[{"name":"aidefaultlogstream"},{"name":"aidefaultlogstream"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"aidefaultlogstream"},{"name":"aidefaultlogstream"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"aidefaultlogstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",59,{"inputs":[{"name":"aidefaultlogstream"}],"output":{"name":"aidefaultlogstream"}}],[11,"default","","",60,{"inputs":[{"name":"aimemoryinfo"}],"output":{"name":"aimemoryinfo"}}],[11,"fmt","","",60,{"inputs":[{"name":"aimemoryinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",60,{"inputs":[{"name":"aimemoryinfo"}],"output":{"name":"aimemoryinfo"}}],[11,"hash","ffi::version","",61,null],[11,"cmp","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"option"}}],[11,"lt","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"le","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"gt","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ge","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"clone","","",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"eq","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ne","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"fmt","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"all","","Returns the set containing all flags.",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"u32"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",61,{"inputs":[{"name":"aicompileflags"},{"name":"u32"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",61,{"inputs":[{"name":"aicompileflags"},{"name":"u32"}],"output":{"name":"aicompileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",61,null],[11,"remove","","Removes the specified flags in-place.",61,null],[11,"toggle","","Toggles the specified flags in-place.",61,null],[11,"bitor","","Returns the union of the two sets of flags.",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",61,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"not","","Returns the complement of this set of flags.",61,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"from_iter","","",61,{"inputs":[{"name":"aicompileflags"},{"name":"t"}],"output":{"name":"aicompileflags"}}],[11,"deref","assimp::math::color3","",20,{"inputs":[{"name":"color3d"}],"output":{"name":"aicolor3d"}}],[11,"new","","",20,{"inputs":[{"name":"color3d"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color3d"}}],[11,"from","","",20,null],[11,"into","","",20,null],[11,"from","","",20,{"inputs":[{"name":"color3d"},{"name":"vector3"}],"output":{"name":"color3d"}}],[11,"into","","",20,{"inputs":[{"name":"color3d"}],"output":{"name":"vector3"}}],[0,"color4","assimp::math","",null,null],[3,"Color4D","assimp::math::color4","Color4D docs",null,null],[11,"eq","","",62,{"inputs":[{"name":"color4d"},{"name":"color4d"}],"output":{"name":"bool"}}],[11,"ne","","",62,{"inputs":[{"name":"color4d"},{"name":"color4d"}],"output":{"name":"bool"}}],[11,"fmt","","",62,{"inputs":[{"name":"color4d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",62,{"inputs":[{"name":"color4d"}],"output":{"name":"color4d"}}],[11,"deref","","",62,{"inputs":[{"name":"color4d"}],"output":{"name":"aicolor4d"}}],[11,"new","","",62,{"inputs":[{"name":"color4d"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"color4d"}}],[11,"from","","",62,null],[11,"into","","",62,null],[11,"from","","",62,{"inputs":[{"name":"color4d"},{"name":"vector4"}],"output":{"name":"color4d"}}],[11,"into","","",62,{"inputs":[{"name":"color4d"}],"output":{"name":"vector4"}}],[0,"matrix3","assimp::math","",null,null],[3,"Matrix3x3","assimp::math::matrix3","Matrix3x3 docs",null,null],[11,"eq","","",63,{"inputs":[{"name":"matrix3x3"},{"name":"matrix3x3"}],"output":{"name":"bool"}}],[11,"ne","","",63,{"inputs":[{"name":"matrix3x3"},{"name":"matrix3x3"}],"output":{"name":"bool"}}],[11,"fmt","","",63,{"inputs":[{"name":"matrix3x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",63,{"inputs":[{"name":"matrix3x3"}],"output":{"name":"matrix3x3"}}],[11,"deref","","",63,{"inputs":[{"name":"matrix3x3"}],"output":{"name":"aimatrix3x3"}}],[11,"new","","",63,{"inputs":[{"name":"matrix3x3"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"matrix3x3"}}],[11,"from","","",63,{"inputs":[{"name":"matrix3x3"},{"name":"matrix3"}],"output":{"name":"matrix3x3"}}],[11,"into","","",63,{"inputs":[{"name":"matrix3x3"}],"output":{"name":"matrix3"}}],[0,"matrix4","assimp::math","",null,null],[3,"Matrix4x4","assimp::math::matrix4","Matrix4x4 docs",null,null],[11,"eq","","",64,{"inputs":[{"name":"matrix4x4"},{"name":"matrix4x4"}],"output":{"name":"bool"}}],[11,"ne","","",64,{"inputs":[{"name":"matrix4x4"},{"name":"matrix4x4"}],"output":{"name":"bool"}}],[11,"fmt","","",64,{"inputs":[{"name":"matrix4x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",64,{"inputs":[{"name":"matrix4x4"}],"output":{"name":"matrix4x4"}}],[11,"deref","","",64,{"inputs":[{"name":"matrix4x4"}],"output":{"name":"aimatrix4x4"}}],[11,"new","","",64,{"inputs":[{"name":"matrix4x4"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"matrix4x4"}}],[11,"from","","",64,{"inputs":[{"name":"matrix4x4"},{"name":"matrix4"}],"output":{"name":"matrix4x4"}}],[11,"into","","",64,{"inputs":[{"name":"matrix4x4"}],"output":{"name":"matrix4"}}],[0,"quaternion","assimp::math","",null,null],[3,"Quaternion","assimp::math::quaternion","Quaternion docs",null,null],[11,"eq","","",65,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",65,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"fmt","","",65,{"inputs":[{"name":"quaternion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",65,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"deref","","",65,{"inputs":[{"name":"quaternion"}],"output":{"name":"aiquaternion"}}],[11,"new","","",65,{"inputs":[{"name":"quaternion"},{"name":"f32"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"quaternion"}}],[11,"from","","",65,{"inputs":[{"name":"quaternion"},{"name":"cgquaternion"}],"output":{"name":"quaternion"}}],[11,"into","","",65,{"inputs":[{"name":"quaternion"}],"output":{"name":"cgquaternion"}}],[0,"vector2","assimp::math","",null,null],[3,"Vector2D","assimp::math::vector2","Vector2D docs",null,null],[11,"eq","","",66,{"inputs":[{"name":"vector2d"},{"name":"vector2d"}],"output":{"name":"bool"}}],[11,"ne","","",66,{"inputs":[{"name":"vector2d"},{"name":"vector2d"}],"output":{"name":"bool"}}],[11,"fmt","","",66,{"inputs":[{"name":"vector2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",66,{"inputs":[{"name":"vector2d"}],"output":{"name":"vector2d"}}],[11,"deref","","",66,{"inputs":[{"name":"vector2d"}],"output":{"name":"aivector2d"}}],[11,"new","","",66,{"inputs":[{"name":"vector2d"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vector2d"}}],[11,"from","","",66,null],[11,"into","","",66,null],[11,"from","","",66,{"inputs":[{"name":"vector2d"},{"name":"point2"}],"output":{"name":"vector2d"}}],[11,"into","","",66,{"inputs":[{"name":"vector2d"}],"output":{"name":"point2"}}],[11,"from","","",66,{"inputs":[{"name":"vector2d"},{"name":"vector2"}],"output":{"name":"vector2d"}}],[11,"into","","",66,{"inputs":[{"name":"vector2d"}],"output":{"name":"vector2"}}],[0,"vector3","assimp::math","",null,null],[3,"Vector3D","assimp::math::vector3","Vector3D docs",null,null],[3,"Vector3DIter","","Vector3DIter docs",null,null],[11,"eq","","",67,{"inputs":[{"name":"vector3d"},{"name":"vector3d"}],"output":{"name":"bool"}}],[11,"ne","","",67,{"inputs":[{"name":"vector3d"},{"name":"vector3d"}],"output":{"name":"bool"}}],[11,"fmt","","",67,{"inputs":[{"name":"vector3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",67,{"inputs":[{"name":"vector3d"}],"output":{"name":"vector3d"}}],[11,"deref","","",67,{"inputs":[{"name":"vector3d"}],"output":{"name":"aivector3d"}}],[11,"next","","",68,{"inputs":[{"name":"vector3diter"}],"output":{"name":"option"}}],[11,"new","","",67,{"inputs":[{"name":"vector3d"},{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"vector3d"}}],[11,"from","","",67,null],[11,"into","","",67,null],[11,"from","","",67,{"inputs":[{"name":"vector3d"},{"name":"point3"}],"output":{"name":"vector3d"}}],[11,"into","","",67,{"inputs":[{"name":"vector3d"}],"output":{"name":"point3"}}],[11,"from","","",67,{"inputs":[{"name":"vector3d"},{"name":"vector3"}],"output":{"name":"vector3d"}}],[11,"into","","",67,{"inputs":[{"name":"vector3d"}],"output":{"name":"vector3"}}],[0,"scene","assimp","The `scene` module contains definitions of imported scene data.",null,null],[3,"Animation","assimp::scene","Animation type (not yet implemented)",null,null],[3,"AnimationIter","","Animation iterator type.",null,null],[3,"NodeAnim","","NodeAnim type (not yet implemented)",null,null],[3,"NodeAnimIter","","NodeAnim iterator type.",null,null],[3,"VectorKey","","VectorKey type (not yet implemented)",null,null],[3,"VectorKeyIter","","VectorKey iterator type.",null,null],[3,"QuatKey","","QuatKey type (not yet implemented)",null,null],[3,"QuatKeyIter","","QuatKey iterator type.",null,null],[3,"Camera","","Camera type (not yet implemented)",null,null],[3,"CameraIter","","Camera iterator type.",null,null],[3,"Face","","Face type (not yet implemented)",null,null],[3,"FaceIter","","Face iterator type.",null,null],[3,"Light","","Light type (not yet implemented)",null,null],[3,"LightIter","","Light iterator type.",null,null],[3,"Material","","Material type (not yet implemented)",null,null],[3,"MaterialIter","","Material iterator type.",null,null],[3,"Mesh","","Mesh type (incomplete)",null,null],[3,"MeshIter","","Mesh iterator type.",null,null],[3,"Bone","","Bone type",null,null],[3,"BoneIter","","Bone iterator type.",null,null],[3,"VertexWeight","","Vertex weight type",null,null],[3,"VertexWeightIter","","Vertex weight iterator type.",null,null],[3,"Node","","The `Node` type represents a node in the imported scene hierarchy.",null,null],[3,"NodeIter","","Node iterator type.",null,null],[3,"Texture","","Texture type.",null,null],[3,"TextureIter","","Texture iterator type.",null,null],[11,"deref","assimp","",69,{"inputs":[{"name":"animation"}],"output":{"name":"aianimation"}}],[11,"next","assimp::scene","",70,{"inputs":[{"name":"animationiter"}],"output":{"name":"option"}}],[11,"len","","",70,{"inputs":[{"name":"animationiter"}],"output":{"name":"usize"}}],[11,"deref","assimp","",71,{"inputs":[{"name":"nodeanim"}],"output":{"name":"ainodeanim"}}],[11,"next","assimp::scene","",72,{"inputs":[{"name":"nodeanimiter"}],"output":{"name":"option"}}],[11,"len","","",72,{"inputs":[{"name":"nodeanimiter"}],"output":{"name":"usize"}}],[11,"deref","assimp","",73,{"inputs":[{"name":"vectorkey"}],"output":{"name":"aivectorkey"}}],[11,"next","assimp::scene","",74,{"inputs":[{"name":"vectorkeyiter"}],"output":{"name":"option"}}],[11,"len","","",74,{"inputs":[{"name":"vectorkeyiter"}],"output":{"name":"usize"}}],[11,"deref","assimp","",75,{"inputs":[{"name":"quatkey"}],"output":{"name":"aiquatkey"}}],[11,"next","assimp::scene","",76,{"inputs":[{"name":"quatkeyiter"}],"output":{"name":"option"}}],[11,"len","","",76,{"inputs":[{"name":"quatkeyiter"}],"output":{"name":"usize"}}],[11,"get_position_key","assimp","",71,{"inputs":[{"name":"nodeanim"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_rotation_key","","",71,{"inputs":[{"name":"nodeanim"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_scaling_key","","",71,{"inputs":[{"name":"nodeanim"},{"name":"usize"}],"output":{"name":"option"}}],[11,"get_node_anim","","",69,{"inputs":[{"name":"animation"},{"name":"usize"}],"output":{"name":"option"}}],[11,"deref","","",77,{"inputs":[{"name":"camera"}],"output":{"name":"aicamera"}}],[11,"next","assimp::scene","",78,{"inputs":[{"name":"cameraiter"}],"output":{"name":"option"}}],[11,"len","","",78,{"inputs":[{"name":"cameraiter"}],"output":{"name":"usize"}}],[11,"deref","assimp","",79,{"inputs":[{"name":"face"}],"output":{"name":"aiface"}}],[11,"next","assimp::scene","",80,{"inputs":[{"name":"faceiter"}],"output":{"name":"option"}}],[11,"len","","",80,{"inputs":[{"name":"faceiter"}],"output":{"name":"usize"}}],[11,"index","assimp","",79,{"inputs":[{"name":"face"},{"name":"isize"}],"output":{"name":"c_uint"}}],[11,"deref","","",81,{"inputs":[{"name":"light"}],"output":{"name":"ailight"}}],[11,"next","assimp::scene","",82,{"inputs":[{"name":"lightiter"}],"output":{"name":"option"}}],[11,"len","","",82,{"inputs":[{"name":"lightiter"}],"output":{"name":"usize"}}],[11,"deref","assimp","",83,{"inputs":[{"name":"material"}],"output":{"name":"aimaterial"}}],[11,"next","assimp::scene","",84,{"inputs":[{"name":"materialiter"}],"output":{"name":"option"}}],[11,"len","","",84,{"inputs":[{"name":"materialiter"}],"output":{"name":"usize"}}],[11,"deref","assimp","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"aimesh"}}],[11,"next","assimp::scene","",86,{"inputs":[{"name":"meshiter"}],"output":{"name":"option"}}],[11,"len","","",86,{"inputs":[{"name":"meshiter"}],"output":{"name":"usize"}}],[11,"deref","","",87,{"inputs":[{"name":"bone"}],"output":{"name":"aibone"}}],[11,"next","","",88,{"inputs":[{"name":"boneiter"}],"output":{"name":"option"}}],[11,"len","","",88,{"inputs":[{"name":"boneiter"}],"output":{"name":"usize"}}],[11,"deref","","",89,{"inputs":[{"name":"vertexweight"}],"output":{"name":"aivertexweight"}}],[11,"next","","",90,{"inputs":[{"name":"vertexweightiter"}],"output":{"name":"option"}}],[11,"len","","",90,{"inputs":[{"name":"vertexweightiter"}],"output":{"name":"usize"}}],[11,"primitive_types","assimp","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"u32"}}],[11,"num_vertices","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"u32"}}],[11,"vertex_iter","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"vector3diter"}}],[11,"get_vertex","","",85,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"option"}}],[11,"normal_iter","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"vector3diter"}}],[11,"get_normal","","",85,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"option"}}],[11,"tangent_iter","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"vector3diter"}}],[11,"get_tangent","","",85,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"option"}}],[11,"bitangent_iter","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"vector3diter"}}],[11,"get_bitangent","","",85,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"option"}}],[11,"texture_coords_iter","","",85,{"inputs":[{"name":"mesh"},{"name":"usize"}],"output":{"name":"vector3diter"}}],[11,"get_texture_coord","","",85,{"inputs":[{"name":"mesh"},{"name":"usize"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_faces","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"u32"}}],[11,"face_iter","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"faceiter"}}],[11,"get_face","","",85,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"option"}}],[11,"num_bones","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"u32"}}],[11,"bone_iter","","",85,{"inputs":[{"name":"mesh"}],"output":{"name":"boneiter"}}],[11,"get_bone","","",85,{"inputs":[{"name":"mesh"},{"name":"u32"}],"output":{"name":"option"}}],[11,"name","assimp::scene","Returns the name of the bone.",87,{"inputs":[{"name":"bone"}],"output":{"name":"str"}}],[11,"offset_matrix","","Returns the bones's offset transformation matrix.",87,{"inputs":[{"name":"bone"}],"output":{"name":"matrix4x4"}}],[11,"num_weights","","",87,{"inputs":[{"name":"bone"}],"output":{"name":"u32"}}],[11,"weight_iter","","",87,{"inputs":[{"name":"bone"}],"output":{"name":"vertexweightiter"}}],[11,"get_weight","","",87,{"inputs":[{"name":"bone"},{"name":"u32"}],"output":{"name":"option"}}],[11,"deref","assimp","",91,{"inputs":[{"name":"node"}],"output":{"name":"ainode"}}],[11,"next","assimp::scene","",92,{"inputs":[{"name":"nodeiter"}],"output":{"name":"option"}}],[11,"len","","",92,{"inputs":[{"name":"nodeiter"}],"output":{"name":"usize"}}],[11,"name","assimp","Returns the name of the node.",91,{"inputs":[{"name":"node"}],"output":{"name":"str"}}],[11,"transformation","","Returns the node's transformation matrix.",91,{"inputs":[{"name":"node"}],"output":{"name":"matrix4x4"}}],[11,"parent","","Return the parent of this node. Returns `None` if this node is the root node.",91,{"inputs":[{"name":"node"}],"output":{"name":"option"}}],[11,"num_children","","Returns the number of child nodes.",91,{"inputs":[{"name":"node"}],"output":{"name":"u32"}}],[11,"child_iter","","Returns a vector containing all of the child nodes under this node.",91,{"inputs":[{"name":"node"}],"output":{"name":"nodeiter"}}],[11,"num_meshes","","Returns the number of meshes under this node.",91,{"inputs":[{"name":"node"}],"output":{"name":"u32"}}],[11,"meshes","","Returns a vector containing all of the meshes under this node. These are indices into\nthe meshes contained in the `Scene` struct.",91,null],[11,"deref","","",93,{"inputs":[{"name":"scene"}],"output":{"name":"aiscene"}}],[11,"is_incomplete","","Returns true if the imported scene is not complete.",93,{"inputs":[{"name":"scene"}],"output":{"name":"bool"}}],[11,"is_validated","","Returns true if the imported scene was successfully validated by the\n`validate_data_structure` post-process step.",93,{"inputs":[{"name":"scene"}],"output":{"name":"bool"}}],[11,"has_validation_warning","","Returns true if any warnings were generated by the `validate_data_structure`\npost-process step. The details of the warnings are written to the output log.",93,{"inputs":[{"name":"scene"}],"output":{"name":"bool"}}],[11,"is_non_verbose_format","","Returns true if the `join_identical_vertices` post-process step was run.",93,{"inputs":[{"name":"scene"}],"output":{"name":"bool"}}],[11,"is_terrain","","Returns true if the imported mesh contained height-map terrain data.",93,{"inputs":[{"name":"scene"}],"output":{"name":"bool"}}],[11,"root_node","","Returns the root node of the scene hierarchy",93,{"inputs":[{"name":"scene"}],"output":{"name":"node"}}],[11,"num_meshes","","Returns the number of meshes in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"u32"}}],[11,"mesh_iter","","Returns an iterator over all the meshes in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"meshiter"}}],[11,"mesh","","Return an individual mesh from the scene.",93,{"inputs":[{"name":"scene"},{"name":"usize"}],"output":{"name":"option"}}],[11,"num_materials","","Returns the number of materials in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"u32"}}],[11,"material_iter","","Returns an iterator over all the materials in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"materialiter"}}],[11,"num_animations","","Returns the number of animations in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"u32"}}],[11,"animation_iter","","Returns an iterator over all the animations in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"animationiter"}}],[11,"animation","","Return an individual animation from the scene.",93,{"inputs":[{"name":"scene"},{"name":"usize"}],"output":{"name":"option"}}],[11,"num_textures","","Returns the number of animations in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"u32"}}],[11,"texture_iter","","Returns an iterator over all the textures in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"textureiter"}}],[11,"num_lights","","Returns the number of lights in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"u32"}}],[11,"light_iter","","Returns an iterator over all the lights in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"lightiter"}}],[11,"num_cameras","","Returns the number of cameras in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"u32"}}],[11,"camera_iter","","Returns an iterator over all the cameras in the scene.",93,{"inputs":[{"name":"scene"}],"output":{"name":"cameraiter"}}],[11,"drop","","",93,{"inputs":[{"name":"scene"}],"output":null}],[11,"deref","","",94,{"inputs":[{"name":"texture"}],"output":{"name":"aitexture"}}],[11,"next","assimp::scene","",95,{"inputs":[{"name":"textureiter"}],"output":{"name":"option"}}],[11,"len","","",95,{"inputs":[{"name":"textureiter"}],"output":{"name":"usize"}}]],"paths":[[3,"CalcTangentSpace"],[3,"RemoveComponent"],[3,"GenerateNormals"],[3,"SplitLargeMeshes"],[3,"PreTransformVertices"],[3,"LimitBoneWeights"],[3,"ImproveCacheLocality"],[3,"RemoveRedundantMaterials"],[3,"SortByPrimitiveType"],[3,"FindDegenerates"],[3,"FindInvalidData"],[3,"TransformUVCoords"],[3,"OptimizeGraph"],[3,"SplitByBoneCount"],[3,"Debone"],[4,"ComponentType"],[4,"UVTransformFlag"],[4,"PrimitiveType"],[3,"Importer"],[3,"LogStream"],[3,"Color3D"],[3,"AiVectorKey"],[3,"AiQuatKey"],[3,"AiMeshKey"],[4,"AiAnimBehaviour"],[3,"AiCamera"],[3,"AiPropertyStore"],[3,"AiComponent"],[3,"AiUVTransformFlags"],[3,"AiImporterFlags"],[4,"AiLightSourceType"],[3,"AiLight"],[4,"AiTextureOp"],[4,"AiTextureMapMode"],[4,"AiTextureMapping"],[4,"AiTextureType"],[4,"AiShadingMode"],[3,"AiTextureFlags"],[4,"AiBlendMode"],[3,"AiUVTransform"],[4,"AiPropertyTypeInfo"],[3,"AiVertexWeight"],[3,"AiPrimitiveType"],[4,"AiMetadataType"],[3,"AiPostProcessSteps"],[3,"AiSceneFlags"],[3,"AiTexel"],[3,"AiColor3D"],[3,"AiColor4D"],[3,"AiMatrix3x3"],[3,"AiMatrix4x4"],[3,"AiQuaternion"],[3,"AiString"],[3,"AiVector2D"],[3,"AiVector3D"],[3,"AiPlane"],[3,"AiRay"],[4,"AiReturn"],[4,"AiOrigin"],[4,"AiDefaultLogStream"],[3,"AiMemoryInfo"],[3,"AiCompileFlags"],[3,"Color4D"],[3,"Matrix3x3"],[3,"Matrix4x4"],[3,"Quaternion"],[3,"Vector2D"],[3,"Vector3D"],[3,"Vector3DIter"],[3,"Animation"],[3,"AnimationIter"],[3,"NodeAnim"],[3,"NodeAnimIter"],[3,"VectorKey"],[3,"VectorKeyIter"],[3,"QuatKey"],[3,"QuatKeyIter"],[3,"Camera"],[3,"CameraIter"],[3,"Face"],[3,"FaceIter"],[3,"Light"],[3,"LightIter"],[3,"Material"],[3,"MaterialIter"],[3,"Mesh"],[3,"MeshIter"],[3,"Bone"],[3,"BoneIter"],[3,"VertexWeight"],[3,"VertexWeightIter"],[3,"Node"],[3,"NodeIter"],[3,"Scene"],[3,"Texture"],[3,"TextureIter"]]};
searchIndex['cgmath'] = {"items":[[0,"","cgmath","Computer graphics-centric math.",null,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",0,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",1,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",1,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[3,"Matrix2","","A 2 x 2, column major matrix",null,null],[12,"x","","",2,null],[12,"y","","",2,null],[3,"Matrix3","","A 3 x 3, column major matrix",null,null],[12,"x","","",3,null],[12,"y","","",3,null],[12,"z","","",3,null],[3,"Matrix4","","A 4 x 4, column major matrix",null,null],[12,"x","","",4,null],[12,"y","","",4,null],[12,"z","","",4,null],[12,"w","","",4,null],[3,"Quaternion","","A [quaternion](https://en.wikipedia.org/wiki/Quaternion) in scalar/vector\nform.",null,null],[12,"s","","",5,null],[12,"v","","",5,null],[3,"Vector2","","",null,null],[12,"x","","",6,null],[12,"y","","",6,null],[3,"Vector3","","",null,null],[12,"x","","",7,null],[12,"y","","",7,null],[12,"z","","",7,null],[3,"Vector4","","",null,null],[12,"x","","",8,null],[12,"y","","",8,null],[12,"z","","",8,null],[12,"w","","",8,null],[3,"Rad","","An angle, in radians",null,null],[12,"s","","",9,null],[3,"Deg","","An angle, in degrees",null,null],[12,"s","","",10,null],[3,"Plane","","A 3-dimensional plane formed from the equation: `A*x + B*y + C*z - D = 0`.",null,null],[12,"n","","",11,null],[12,"d","","",11,null],[3,"Point2","","A point in 2-dimensional space.",null,null],[12,"x","","",12,null],[12,"y","","",12,null],[3,"Point3","","A point in 3-dimensional space.",null,null],[12,"x","","",13,null],[12,"y","","",13,null],[12,"z","","",13,null],[3,"Line","","A generic directed line segment from `origin` to `dest`.",null,null],[12,"origin","","",14,null],[12,"dest","","",14,null],[3,"Ray","","A generic ray starting at `origin` and extending infinitely in\n`direction`.",null,null],[12,"origin","","",15,null],[12,"direction","","",15,null],[3,"Basis2","","A two-dimensional rotation matrix.",null,null],[3,"Basis3","","A three-dimensional rotation matrix.",null,null],[3,"Decomposed","","A generic transformation consisting of a rotation,\ndisplacement vector and scale amount.",null,null],[12,"scale","","",16,null],[12,"rot","","",16,null],[12,"disp","","",16,null],[3,"AffineMatrix3","","A homogeneous transformation matrix.",null,null],[12,"mat","","",17,null],[3,"PerspectiveFov","","A perspective projection based on a vertical field-of-view angle.",null,null],[12,"fovy","","",18,null],[12,"aspect","","",18,null],[12,"near","","",18,null],[12,"far","","",18,null],[3,"Perspective","","A perspective projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",19,null],[12,"right","","",19,null],[12,"bottom","","",19,null],[12,"top","","",19,null],[12,"near","","",19,null],[12,"far","","",19,null],[3,"Ortho","","An orthographic projection with arbitrary left/right/bottom/top distances",null,null],[12,"left","","",20,null],[12,"right","","",20,null],[12,"bottom","","",20,null],[12,"top","","",20,null],[12,"near","","",20,null],[12,"far","","",20,null],[3,"Aabb2","","A two-dimensional AABB, aka a rectangle.",null,null],[12,"min","","",21,null],[12,"max","","",21,null],[3,"Aabb3","","A three-dimensional AABB, aka a rectangular prism.",null,null],[12,"min","","",22,null],[12,"max","","",22,null],[3,"Cylinder","","",null,null],[12,"center","","",23,null],[12,"axis","","",23,null],[12,"radius","","",23,null],[3,"Frustum","","",null,null],[12,"left","","",24,null],[12,"right","","",24,null],[12,"bottom","","",24,null],[12,"top","","",24,null],[12,"near","","",24,null],[12,"far","","",24,null],[3,"FrustumPoints","","",null,null],[12,"near_top_left","","",25,null],[12,"near_top_right","","",25,null],[12,"near_bottom_left","","",25,null],[12,"near_bottom_right","","",25,null],[12,"far_top_left","","",25,null],[12,"far_top_right","","",25,null],[12,"far_bottom_left","","",25,null],[12,"far_bottom_right","","",25,null],[3,"Obb2","","",null,null],[12,"center","","",26,null],[12,"axis","","",26,null],[12,"extents","","",26,null],[3,"Obb3","","",null,null],[12,"center","","",27,null],[12,"axis","","",27,null],[12,"extents","","",27,null],[3,"Sphere","","",null,null],[12,"center","","",28,null],[12,"radius","","",28,null],[4,"Relation","","Spatial relation between two objects.",null,null],[13,"In","","Completely inside.",29,null],[13,"Cross","","Crosses the boundary.",29,null],[13,"Out","","Completely outside.",29,null],[5,"dot","","Dot product of two vectors.",null,{"inputs":[{"name":"v"},{"name":"v"}],"output":{"name":"s"}}],[5,"vec2","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[5,"vec3","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[5,"vec4","","The short constructor.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[5,"rad","","Create a new angle, in radians",null,{"inputs":[{"name":"s"}],"output":{"name":"rad"}}],[5,"deg","","Create a new angle, in degrees",null,{"inputs":[{"name":"s"}],"output":{"name":"deg"}}],[5,"bisect","","",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"a"}}],[5,"sin","","",null,{"inputs":[{"name":"r"}],"output":{"name":"s"}}],[5,"cos","","",null,{"inputs":[{"name":"r"}],"output":{"name":"s"}}],[5,"tan","","",null,{"inputs":[{"name":"r"}],"output":{"name":"s"}}],[5,"sin_cos","","",null,null],[5,"cot","","",null,{"inputs":[{"name":"r"}],"output":{"name":"s"}}],[5,"sec","","",null,{"inputs":[{"name":"r"}],"output":{"name":"s"}}],[5,"csc","","",null,{"inputs":[{"name":"r"}],"output":{"name":"s"}}],[5,"asin","","",null,{"inputs":[{"name":"s"}],"output":{"name":"r"}}],[5,"acos","","",null,{"inputs":[{"name":"s"}],"output":{"name":"r"}}],[5,"atan","","",null,{"inputs":[{"name":"s"}],"output":{"name":"r"}}],[5,"atan2","","",null,{"inputs":[{"name":"s"},{"name":"s"}],"output":{"name":"r"}}],[5,"perspective","","Create a perspective projection matrix.",null,{"inputs":[{"name":"a"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"frustum","","Create a perspective matrix from a view frustrum.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[5,"ortho","","Create an orthographic projection matrix.",null,{"inputs":[{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"decode","","",2,{"inputs":[{"name":"matrix2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",2,{"inputs":[{"name":"matrix2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"ne","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"clone","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"decode","","",3,{"inputs":[{"name":"matrix3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",3,{"inputs":[{"name":"matrix3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"ne","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"clone","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"decode","","",4,{"inputs":[{"name":"matrix4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",4,{"inputs":[{"name":"matrix4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"ne","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"clone","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"new","","Create a new matrix, providing values for each index.",2,{"inputs":[{"name":"matrix2"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_cols","","Create a new matrix, providing columns.",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"from_angle","","",2,{"inputs":[{"name":"matrix2"},{"name":"rad"}],"output":{"name":"matrix2"}}],[11,"neg_self","","Negate this `Matrix2` in-place.",2,{"inputs":[{"name":"matrix2"}],"output":null}],[11,"new","","Create a new matrix, providing values for each index.",3,{"inputs":[{"name":"matrix3"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_cols","","Create a new matrix, providing columns.",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"from_angle_x","","Create a matrix from a rotation around the `x` axis (pitch).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_angle_y","","Create a matrix from a rotation around the `y` axis (yaw).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_angle_z","","Create a matrix from a rotation around the `z` axis (roll).",3,{"inputs":[{"name":"matrix3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_euler","","Create a matrix from a set of euler angles.",3,{"inputs":[{"name":"matrix3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"from_axis_angle","","Create a matrix from a rotation around an arbitrary axis",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"matrix3"}}],[11,"neg_self","","Negate this `Matrix3` in-place.",3,{"inputs":[{"name":"matrix3"}],"output":null}],[11,"new","","Create a new matrix, providing values for each index.",4,{"inputs":[{"name":"matrix4"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_cols","","Create a new matrix, providing columns.",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"from_translation","","Create a translation matrix from a Vector3",4,{"inputs":[{"name":"matrix4"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"look_at","","Create a transformation matrix that will cause a vector to point at\n`dir`, using `up` for orientation.",4,{"inputs":[{"name":"matrix4"},{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"matrix4"}}],[11,"neg_self","","Negate this `Matrix4` in-place.",4,{"inputs":[{"name":"matrix4"}],"output":null}],[11,"row","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"swap_rows","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"row","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"swap_rows","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"row","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"swap_rows","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"from_value","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"from_diagonal","","",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"}],"output":{"name":"matrix2"}}],[11,"mul_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"div_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"rem_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":{"name":"matrix2"}}],[11,"add_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"sub_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"mul_v","","",2,{"inputs":[{"name":"matrix2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",2,{"inputs":[{"name":"matrix2"},{"name":"s"}],"output":null}],[11,"add_self_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":null}],[11,"sub_self_m","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"}],"output":null}],[11,"transpose","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"transpose_self","","",2,{"inputs":[{"name":"matrix2"}],"output":null}],[11,"determinant","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"s"}}],[11,"diagonal","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"vector2"}}],[11,"invert","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"option"}}],[11,"is_diagonal","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"bool"}}],[11,"from_value","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"from_diagonal","","",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"matrix3"}}],[11,"mul_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"div_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"rem_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":{"name":"matrix3"}}],[11,"add_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"sub_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"mul_v","","",3,{"inputs":[{"name":"matrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",3,{"inputs":[{"name":"matrix3"},{"name":"s"}],"output":null}],[11,"add_self_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":null}],[11,"sub_self_m","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"}],"output":null}],[11,"transpose","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"transpose_self","","",3,{"inputs":[{"name":"matrix3"}],"output":null}],[11,"determinant","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"s"}}],[11,"diagonal","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"vector3"}}],[11,"invert","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"option"}}],[11,"is_diagonal","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"bool"}}],[11,"from_value","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"from_diagonal","","",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"matrix4"}}],[11,"mul_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"div_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"rem_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":{"name":"matrix4"}}],[11,"add_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"sub_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"mul_v","","",4,{"inputs":[{"name":"matrix4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"div_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",4,{"inputs":[{"name":"matrix4"},{"name":"s"}],"output":null}],[11,"add_self_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":null}],[11,"sub_self_m","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"}],"output":null}],[11,"transpose","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"transpose_self","","",4,{"inputs":[{"name":"matrix4"}],"output":null}],[11,"determinant","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"s"}}],[11,"diagonal","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"vector4"}}],[11,"invert","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"option"}}],[11,"is_diagonal","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"is_symmetric","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",2,{"inputs":[{"name":"matrix2"},{"name":"matrix2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",3,{"inputs":[{"name":"matrix3"},{"name":"matrix3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",4,{"inputs":[{"name":"matrix4"},{"name":"matrix4"},{"name":"s"}],"output":{"name":"bool"}}],[11,"neg","","",2,{"inputs":[{"name":"matrix2"}],"output":{"name":"matrix2"}}],[11,"neg","","",3,{"inputs":[{"name":"matrix3"}],"output":{"name":"matrix3"}}],[11,"neg","","",4,{"inputs":[{"name":"matrix4"}],"output":{"name":"matrix4"}}],[11,"index","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index_mut","","",2,{"inputs":[{"name":"matrix2"},{"name":"usize"}],"output":{"name":"vector2"}}],[11,"index","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index_mut","","",3,{"inputs":[{"name":"matrix3"},{"name":"usize"}],"output":{"name":"vector3"}}],[11,"index","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"index_mut","","",4,{"inputs":[{"name":"matrix4"},{"name":"usize"}],"output":{"name":"vector4"}}],[11,"into","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"from","","",2,null],[11,"as_ref","","",2,null],[11,"as_mut","","",2,null],[11,"into","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"from","","",3,null],[11,"as_ref","","",3,null],[11,"as_mut","","",3,null],[11,"into","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","",4,null],[11,"as_ref","","",4,null],[11,"as_mut","","",4,null],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 3-dimensional identity matrix.",3,{"inputs":[{"name":"matrix3"},{"name":"matrix2"}],"output":{"name":"matrix3"}}],[11,"from","","Clone the elements of a 2-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",4,{"inputs":[{"name":"matrix4"},{"name":"matrix2"}],"output":{"name":"matrix4"}}],[11,"from","","Clone the elements of a 3-dimensional matrix into the top-left corner\nof a 4-dimensional identity matrix.",4,{"inputs":[{"name":"matrix4"},{"name":"matrix3"}],"output":{"name":"matrix4"}}],[11,"from","","Convert the matrix to a quaternion",5,{"inputs":[{"name":"quaternion"},{"name":"matrix3"}],"output":{"name":"quaternion"}}],[11,"fmt","","",2,{"inputs":[{"name":"matrix2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",3,{"inputs":[{"name":"matrix3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",4,{"inputs":[{"name":"matrix4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"rand","","",2,{"inputs":[{"name":"matrix2"},{"name":"r"}],"output":{"name":"matrix2"}}],[11,"rand","","",3,{"inputs":[{"name":"matrix3"},{"name":"r"}],"output":{"name":"matrix3"}}],[11,"rand","","",4,{"inputs":[{"name":"matrix4"},{"name":"r"}],"output":{"name":"matrix4"}}],[11,"decode","","",5,{"inputs":[{"name":"quaternion"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"quaternion"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"ne","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"bool"}}],[11,"clone","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"new","","Construct a new quaternion from one scalar component and three\nimaginary components",5,{"inputs":[{"name":"quaternion"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"from_sv","","Construct a new quaternion from a scalar and a vector",5,{"inputs":[{"name":"quaternion"},{"name":"s"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"zero","","The additive identity, ie: `q = 0 + 0i + 0j + 0i`",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"one","","The multiplicative identity, ie: `q = 1 + 0i + 0j + 0i`",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"dot","","The dot product of the quaternion and `q`.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"s"}}],[11,"conjugate","","The conjugate of the quaternion.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"magnitude2","","The squared magnitude of the quaternion. This is useful for\nmagnitude comparisons where the exact magnitude does not need to be\ncalculated.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"s"}}],[11,"magnitude","","The magnitude of the quaternion",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"s"}}],[11,"normalize","","Normalize this quaternion, returning the new quaternion.",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"nlerp","","Do a normalized linear interpolation with `other`, by `amount`.",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"approx_eq_eps","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"bool"}}],[11,"slerp","","Spherical Linear Intoperlation",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"},{"name":"s"}],"output":{"name":"quaternion"}}],[11,"to_euler","","Convert a Quaternion to Eular angles\n    This is a polar singularity aware conversion",5,null],[11,"from","","Convert the quaternion to a 3 x 3 rotation matrix",3,{"inputs":[{"name":"matrix3"},{"name":"quaternion"}],"output":{"name":"matrix3"}}],[11,"from","","Convert the quaternion to a 4 x 4 rotation matrix",4,{"inputs":[{"name":"matrix4"},{"name":"quaternion"}],"output":{"name":"matrix4"}}],[11,"neg","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"fmt","","",5,{"inputs":[{"name":"quaternion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"basis3"},{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"one","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"look_at","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"between_vectors","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"quaternion"}}],[11,"rotate_vector","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"concat","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"concat_self","","",5,{"inputs":[{"name":"quaternion"},{"name":"quaternion"}],"output":null}],[11,"invert","","",5,{"inputs":[{"name":"quaternion"}],"output":{"name":"quaternion"}}],[11,"invert_self","","",5,{"inputs":[{"name":"quaternion"}],"output":null}],[11,"from_axis_angle","","",5,{"inputs":[{"name":"quaternion"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"quaternion"}}],[11,"from_euler","","- [Maths - Conversion Euler to Quaternion]\n(http://www.euclideanspace.com/maths/geometry/rotations/conversions/eulerToQuaternion/index.htm)",5,{"inputs":[{"name":"quaternion"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"quaternion"}}],[11,"into","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"into","","",5,null],[11,"as_ref","","",5,null],[11,"as_mut","","",5,null],[11,"from","","",5,null],[11,"index","","",5,{"inputs":[{"name":"quaternion"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",5,{"inputs":[{"name":"quaternion"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"index","","",5,null],[11,"index_mut","","",5,null],[11,"rand","","",5,{"inputs":[{"name":"quaternion"},{"name":"r"}],"output":{"name":"quaternion"}}],[11,"decode","","",6,{"inputs":[{"name":"vector2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"vector2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",6,null],[11,"clone","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"eq","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"ne","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",6,{"inputs":[{"name":"vector2"},{"name":"s"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",6,{"inputs":[{"name":"vector2"}],"output":null}],[11,"cast","","Component-wise casting to another type",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"from_value","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"sub_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"mul_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"div_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"rem_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector2"}}],[11,"add_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"sub_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"mul_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"div_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"rem_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"add_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":null}],[11,"add_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"sub_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"mul_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"div_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"rem_self_v","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":null}],[11,"sum","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"product","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_min","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"comp_max","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"s"}}],[11,"neg","","",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"approx_eq_eps","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",6,{"inputs":[{"name":"vector2"},{"name":"r"}],"output":{"name":"vector2"}}],[11,"decode","","",7,{"inputs":[{"name":"vector3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",7,{"inputs":[{"name":"vector3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",7,null],[11,"clone","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"eq","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"ne","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",7,{"inputs":[{"name":"vector3"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",7,{"inputs":[{"name":"vector3"}],"output":null}],[11,"cast","","Component-wise casting to another type",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"from_value","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"sub_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"mul_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"div_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"rem_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"add_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"sub_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"mul_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"div_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"rem_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"add_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":null}],[11,"add_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"sub_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"mul_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"div_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"rem_self_v","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"sum","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"product","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_min","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"comp_max","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"s"}}],[11,"neg","","",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"approx_eq_eps","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",7,{"inputs":[{"name":"vector3"},{"name":"r"}],"output":{"name":"vector3"}}],[11,"decode","","",8,{"inputs":[{"name":"vector4"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"vector4"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"eq","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"bool"}}],[11,"new","","Construct a new vector, using the provided values.",8,{"inputs":[{"name":"vector4"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"neg_self","","Negate this vector in-place (multiply by -1).",8,{"inputs":[{"name":"vector4"}],"output":null}],[11,"cast","","Component-wise casting to another type",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"from_value","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"sub_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"mul_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"div_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"rem_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"add_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"sub_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"mul_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"div_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"rem_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"add_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"sub_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"mul_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"div_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",8,{"inputs":[{"name":"vector4"},{"name":"s"}],"output":null}],[11,"add_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"sub_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"mul_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"div_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"rem_self_v","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":null}],[11,"sum","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"product","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_min","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"comp_max","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"s"}}],[11,"neg","","",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"approx_eq_eps","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",8,{"inputs":[{"name":"vector4"},{"name":"r"}],"output":{"name":"vector4"}}],[11,"into","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"into","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"into","","",6,null],[11,"as_ref","","",6,null],[11,"as_mut","","",6,null],[11,"from","","",6,null],[11,"into","","",7,null],[11,"as_ref","","",7,null],[11,"as_mut","","",7,null],[11,"from","","",7,null],[11,"into","","",8,null],[11,"as_ref","","",8,null],[11,"as_mut","","",8,null],[11,"from","","",8,null],[11,"index","","",6,{"inputs":[{"name":"vector2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",6,{"inputs":[{"name":"vector2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",7,{"inputs":[{"name":"vector3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",7,{"inputs":[{"name":"vector3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",8,{"inputs":[{"name":"vector4"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",8,{"inputs":[{"name":"vector4"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"index","","",6,null],[11,"index_mut","","",6,null],[11,"index","","",7,null],[11,"index_mut","","",7,null],[11,"index","","",8,null],[11,"index_mut","","",8,null],[11,"unit_x","","A unit vector in the `x` direction.",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"unit_y","","A unit vector in the `y` direction.",6,{"inputs":[{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"perp_dot","","The perpendicular dot product of the vector and `other`.",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"extend","","Create a `Vector3`, using the `x` and `y` values from this vector, and the\nprovided `z`.",6,{"inputs":[{"name":"vector2"},{"name":"s"}],"output":{"name":"vector3"}}],[11,"unit_x","","A unit vector in the `x` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"unit_y","","A unit vector in the `y` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"unit_z","","A unit vector in the `w` direction.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross","","Returns the cross product of the vector and `other`.",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"cross_self","","Calculates the cross product of the vector and `other`, then stores the\nresult in `self`.",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":null}],[11,"extend","","Create a `Vector4`, using the `x`, `y` and `z` values from this vector, and the\nprovided `w`.",7,{"inputs":[{"name":"vector3"},{"name":"s"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector2`, dropping the `z` value.",7,{"inputs":[{"name":"vector3"}],"output":{"name":"vector2"}}],[11,"unit_x","","A unit vector in the `x` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_y","","A unit vector in the `y` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_z","","A unit vector in the `z` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"unit_w","","A unit vector in the `w` direction.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector4"}}],[11,"truncate","","Create a `Vector3`, dropping the `w` value.",8,{"inputs":[{"name":"vector4"}],"output":{"name":"vector3"}}],[11,"truncate_n","","Create a `Vector3`, dropping the nth element",8,{"inputs":[{"name":"vector4"},{"name":"isize"}],"output":{"name":"vector3"}}],[11,"angle","","",6,{"inputs":[{"name":"vector2"},{"name":"vector2"}],"output":{"name":"rad"}}],[11,"angle","","",7,{"inputs":[{"name":"vector3"},{"name":"vector3"}],"output":{"name":"rad"}}],[11,"angle","","",8,{"inputs":[{"name":"vector4"},{"name":"vector4"}],"output":{"name":"rad"}}],[11,"fmt","","",6,{"inputs":[{"name":"vector2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",7,{"inputs":[{"name":"vector3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",8,{"inputs":[{"name":"vector4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"rad"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",9,{"inputs":[{"name":"rad"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",9,null],[11,"partial_cmp","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"option"}}],[11,"lt","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"le","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"gt","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ge","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"eq","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"ne","","",9,{"inputs":[{"name":"rad"},{"name":"rad"}],"output":{"name":"bool"}}],[11,"clone","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"decode","","",10,{"inputs":[{"name":"deg"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"deg"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",10,null],[11,"partial_cmp","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"deg"},{"name":"deg"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"from","","",10,{"inputs":[{"name":"deg"},{"name":"rad"}],"output":{"name":"deg"}}],[11,"from","","",9,{"inputs":[{"name":"rad"},{"name":"deg"}],"output":{"name":"rad"}}],[11,"add","","",9,{"inputs":[{"name":"rad"},{"name":"r"}],"output":{"name":"rad"}}],[11,"add","","",10,{"inputs":[{"name":"deg"},{"name":"r"}],"output":{"name":"deg"}}],[11,"sub","","",9,{"inputs":[{"name":"rad"},{"name":"r"}],"output":{"name":"rad"}}],[11,"sub","","",10,{"inputs":[{"name":"deg"},{"name":"r"}],"output":{"name":"deg"}}],[11,"neg","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"neg","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"is_zero","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"bool"}}],[11,"zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"is_zero","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"bool"}}],[11,"mul","","",9,{"inputs":[{"name":"rad"},{"name":"r"}],"output":{"name":"rad"}}],[11,"mul","","",10,{"inputs":[{"name":"deg"},{"name":"r"}],"output":{"name":"deg"}}],[11,"one","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"one","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"from","","",9,{"inputs":[{"name":"rad"},{"name":"a"}],"output":{"name":"rad"}}],[11,"full_turn","","",9,{"inputs":[{"name":"rad"}],"output":{"name":"rad"}}],[11,"from","","",10,{"inputs":[{"name":"deg"},{"name":"a"}],"output":{"name":"deg"}}],[11,"full_turn","","",10,{"inputs":[{"name":"deg"}],"output":{"name":"deg"}}],[11,"fmt","","",9,{"inputs":[{"name":"rad"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",10,{"inputs":[{"name":"deg"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"approx_eq_eps","","",9,{"inputs":[{"name":"rad"},{"name":"rad"},{"name":"s"}],"output":{"name":"bool"}}],[11,"approx_eq_eps","","",10,{"inputs":[{"name":"deg"},{"name":"deg"},{"name":"s"}],"output":{"name":"bool"}}],[11,"rand","","",9,{"inputs":[{"name":"rad"},{"name":"r"}],"output":{"name":"rad"}}],[11,"rand","","",10,{"inputs":[{"name":"deg"},{"name":"r"}],"output":{"name":"deg"}}],[11,"decode","","",11,{"inputs":[{"name":"plane"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",11,{"inputs":[{"name":"plane"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",11,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"plane"},{"name":"plane"}],"output":{"name":"bool"}}],[11,"clone","","",11,{"inputs":[{"name":"plane"}],"output":{"name":"plane"}}],[11,"new","","Construct a plane from a normal vector and a scalar distance. The\nplane will be perpendicular to `n`, and `d` units offset from the\norigin.",11,{"inputs":[{"name":"plane"},{"name":"vector3"},{"name":"s"}],"output":{"name":"plane"}}],[11,"from_abcd","","# Arguments",11,{"inputs":[{"name":"plane"},{"name":"s"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"plane"}}],[11,"from_vector4","","Construct a plane from the components of a four-dimensional vector",11,{"inputs":[{"name":"plane"},{"name":"vector4"}],"output":{"name":"plane"}}],[11,"from_vector4_alt","","Construct a plane from the components of a four-dimensional vector\nAssuming alternative representation: `A*x + B*y + C*z + D = 0`",11,{"inputs":[{"name":"plane"},{"name":"vector4"}],"output":{"name":"plane"}}],[11,"from_points","","Constructs a plane that passes through the the three points `a`, `b` and `c`",11,{"inputs":[{"name":"plane"},{"name":"point3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"option"}}],[11,"from_point_normal","","Construct a plane from a point and a normal vector.\nThe plane will contain the point `p` and be perpendicular to `n`.",11,{"inputs":[{"name":"plane"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"plane"}}],[11,"normalize","","Normalize a plane.",11,{"inputs":[{"name":"plane"}],"output":{"name":"option"}}],[11,"approx_eq_eps","","",11,{"inputs":[{"name":"plane"},{"name":"plane"},{"name":"s"}],"output":{"name":"bool"}}],[11,"fmt","","",11,{"inputs":[{"name":"plane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"point2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",12,{"inputs":[{"name":"point2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",12,null],[11,"clone","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"eq","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"ne","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"decode","","",13,{"inputs":[{"name":"point3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",13,{"inputs":[{"name":"point3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"hash","","",13,null],[11,"clone","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"eq","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"ne","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"new","","",12,{"inputs":[{"name":"point2"},{"name":"s"},{"name":"s"}],"output":{"name":"point2"}}],[11,"new","","",13,{"inputs":[{"name":"point3"},{"name":"s"},{"name":"s"},{"name":"s"}],"output":{"name":"point3"}}],[11,"from_homogeneous","","",13,{"inputs":[{"name":"point3"},{"name":"vector4"}],"output":{"name":"point3"}}],[11,"to_homogeneous","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"vector4"}}],[11,"origin","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"point2"}}],[11,"from_vec","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"to_vec","","",12,{"inputs":[{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"div_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"rem_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":{"name":"point2"}}],[11,"add_v","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"point2"}}],[11,"sub_p","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"vector2"}}],[11,"mul_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"div_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",12,{"inputs":[{"name":"point2"},{"name":"s"}],"output":null}],[11,"add_self_v","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":null}],[11,"dot","","",12,{"inputs":[{"name":"point2"},{"name":"vector2"}],"output":{"name":"s"}}],[11,"min","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"max","","",12,{"inputs":[{"name":"point2"},{"name":"point2"}],"output":{"name":"point2"}}],[11,"approx_eq_eps","","",12,{"inputs":[{"name":"point2"},{"name":"point2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"origin","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"point3"}}],[11,"from_vec","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"to_vec","","",13,{"inputs":[{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"div_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"rem_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":{"name":"point3"}}],[11,"add_v","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"point3"}}],[11,"sub_p","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"vector3"}}],[11,"mul_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"div_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"rem_self_s","","",13,{"inputs":[{"name":"point3"},{"name":"s"}],"output":null}],[11,"add_self_v","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":null}],[11,"dot","","",13,{"inputs":[{"name":"point3"},{"name":"vector3"}],"output":{"name":"s"}}],[11,"min","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"max","","",13,{"inputs":[{"name":"point3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"approx_eq_eps","","",13,{"inputs":[{"name":"point3"},{"name":"point3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"into","","",12,null],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"from","","",12,null],[11,"into","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"into","","",12,null],[11,"as_ref","","",12,null],[11,"as_mut","","",12,null],[11,"from","","",12,null],[11,"into","","",13,null],[11,"as_ref","","",13,null],[11,"as_mut","","",13,null],[11,"from","","",13,null],[11,"index","","",12,{"inputs":[{"name":"point2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",12,{"inputs":[{"name":"point2"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",13,{"inputs":[{"name":"point3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index_mut","","",13,{"inputs":[{"name":"point3"},{"name":"usize"}],"output":{"name":"s"}}],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"index","","",12,null],[11,"index_mut","","",12,null],[11,"index","","",13,null],[11,"index_mut","","",13,null],[11,"fmt","","",12,{"inputs":[{"name":"point2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",13,{"inputs":[{"name":"point3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate_plane","","",13,{"inputs":[{"name":"point3"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"relate_clip_space","","",13,{"inputs":[{"name":"point3"},{"name":"matrix4"}],"output":{"name":"relation"}}],[11,"decode","","",14,{"inputs":[{"name":"line"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",14,{"inputs":[{"name":"line"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",14,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"line"},{"name":"line"}],"output":{"name":"bool"}}],[11,"clone","","",14,{"inputs":[{"name":"line"}],"output":{"name":"line"}}],[11,"new","","",14,{"inputs":[{"name":"line"},{"name":"p"},{"name":"p"}],"output":{"name":"line"}}],[11,"decode","","",15,{"inputs":[{"name":"ray"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",15,{"inputs":[{"name":"ray"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",15,{"inputs":[{"name":"ray"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"ray"},{"name":"ray"}],"output":{"name":"bool"}}],[11,"clone","","",15,{"inputs":[{"name":"ray"}],"output":{"name":"ray"}}],[11,"new","","",15,{"inputs":[{"name":"ray"},{"name":"p"},{"name":"v"}],"output":{"name":"ray"}}],[11,"decode","","",31,{"inputs":[{"name":"basis2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"basis2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"eq","","",31,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"bool"}}],[11,"as_ref","","",31,{"inputs":[{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"from","","",2,{"inputs":[{"name":"matrix2"},{"name":"basis2"}],"output":{"name":"matrix2"}}],[11,"one","","",31,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"look_at","","",31,{"inputs":[{"name":"basis2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"between_vectors","","",31,{"inputs":[{"name":"basis2"},{"name":"vector2"},{"name":"vector2"}],"output":{"name":"basis2"}}],[11,"rotate_vector","","",31,{"inputs":[{"name":"basis2"},{"name":"vector2"}],"output":{"name":"vector2"}}],[11,"concat","","",31,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"concat_self","","",31,{"inputs":[{"name":"basis2"},{"name":"basis2"}],"output":null}],[11,"invert","","",31,{"inputs":[{"name":"basis2"}],"output":{"name":"basis2"}}],[11,"invert_self","","",31,{"inputs":[{"name":"basis2"}],"output":null}],[11,"approx_eq_eps","","",31,{"inputs":[{"name":"basis2"},{"name":"basis2"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_angle","","",31,{"inputs":[{"name":"basis2"},{"name":"rad"}],"output":{"name":"basis2"}}],[11,"decode","","",30,{"inputs":[{"name":"basis3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",30,{"inputs":[{"name":"basis3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"eq","","",30,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"bool"}}],[11,"from_quaternion","","Create a new rotation matrix from a quaternion.",30,{"inputs":[{"name":"basis3"},{"name":"quaternion"}],"output":{"name":"basis3"}}],[11,"as_ref","","",30,{"inputs":[{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"from","","",3,{"inputs":[{"name":"matrix3"},{"name":"basis3"}],"output":{"name":"matrix3"}}],[11,"from","","",5,{"inputs":[{"name":"quaternion"},{"name":"basis3"}],"output":{"name":"quaternion"}}],[11,"one","","",30,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"look_at","","",30,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"between_vectors","","",30,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"vector3"}],"output":{"name":"basis3"}}],[11,"rotate_vector","","",30,{"inputs":[{"name":"basis3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"concat","","",30,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"concat_self","","",30,{"inputs":[{"name":"basis3"},{"name":"basis3"}],"output":null}],[11,"invert","","",30,{"inputs":[{"name":"basis3"}],"output":{"name":"basis3"}}],[11,"invert_self","","",30,{"inputs":[{"name":"basis3"}],"output":null}],[11,"approx_eq_eps","","",30,{"inputs":[{"name":"basis3"},{"name":"basis3"},{"name":"s"}],"output":{"name":"bool"}}],[11,"from_axis_angle","","",30,{"inputs":[{"name":"basis3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_euler","","",30,{"inputs":[{"name":"basis3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_x","","",30,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_y","","",30,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"from_angle_z","","",30,{"inputs":[{"name":"basis3"},{"name":"rad"}],"output":{"name":"basis3"}}],[11,"decode","","",16,{"inputs":[{"name":"decomposed"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",16,{"inputs":[{"name":"decomposed"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"one","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"look_at","","",16,{"inputs":[{"name":"decomposed"},{"name":"p"},{"name":"p"},{"name":"v"}],"output":{"name":"decomposed"}}],[11,"transform_vector","","",16,{"inputs":[{"name":"decomposed"},{"name":"v"}],"output":{"name":"v"}}],[11,"transform_point","","",16,{"inputs":[{"name":"decomposed"},{"name":"p"}],"output":{"name":"p"}}],[11,"concat","","",16,{"inputs":[{"name":"decomposed"},{"name":"decomposed"}],"output":{"name":"decomposed"}}],[11,"invert","","",16,{"inputs":[{"name":"decomposed"}],"output":{"name":"option"}}],[11,"from","","",3,{"inputs":[{"name":"matrix3"},{"name":"decomposed"}],"output":{"name":"matrix3"}}],[11,"from","","",4,{"inputs":[{"name":"matrix4"},{"name":"decomposed"}],"output":{"name":"matrix4"}}],[11,"fmt","","",16,{"inputs":[{"name":"decomposed"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"one","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"look_at","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"point3"},{"name":"point3"},{"name":"vector3"}],"output":{"name":"affinematrix3"}}],[11,"transform_vector","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"vector3"}],"output":{"name":"vector3"}}],[11,"transform_point","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"point3"}],"output":{"name":"point3"}}],[11,"concat","","",17,{"inputs":[{"name":"affinematrix3"},{"name":"affinematrix3"}],"output":{"name":"affinematrix3"}}],[11,"invert","","",17,{"inputs":[{"name":"affinematrix3"}],"output":{"name":"option"}}],[11,"from","","",4,{"inputs":[{"name":"matrix4"},{"name":"affinematrix3"}],"output":{"name":"matrix4"}}],[11,"decompose","","",16,null],[11,"decode","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"ne","","",18,{"inputs":[{"name":"perspectivefov"},{"name":"perspectivefov"}],"output":{"name":"bool"}}],[11,"clone","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"perspectivefov"}}],[11,"to_perspective","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"perspective"}}],[11,"to_frustum","","",18,{"inputs":[{"name":"perspectivefov"}],"output":{"name":"frustum"}}],[11,"from","","",4,{"inputs":[{"name":"matrix4"},{"name":"perspectivefov"}],"output":{"name":"matrix4"}}],[11,"decode","","",19,{"inputs":[{"name":"perspective"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",19,{"inputs":[{"name":"perspective"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"perspective"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"perspective"},{"name":"perspective"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"perspective"}}],[11,"to_frustum","","",19,{"inputs":[{"name":"perspective"}],"output":{"name":"frustum"}}],[11,"from","","",4,{"inputs":[{"name":"matrix4"},{"name":"perspective"}],"output":{"name":"matrix4"}}],[11,"decode","","",20,{"inputs":[{"name":"ortho"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",20,{"inputs":[{"name":"ortho"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",20,{"inputs":[{"name":"ortho"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"ne","","",20,{"inputs":[{"name":"ortho"},{"name":"ortho"}],"output":{"name":"bool"}}],[11,"clone","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"ortho"}}],[11,"to_frustum","","",20,{"inputs":[{"name":"ortho"}],"output":{"name":"frustum"}}],[11,"from","","",4,{"inputs":[{"name":"matrix4"},{"name":"ortho"}],"output":{"name":"matrix4"}}],[11,"decode","","",21,{"inputs":[{"name":"aabb2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",21,{"inputs":[{"name":"aabb2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",21,{"inputs":[{"name":"aabb2"},{"name":"aabb2"}],"output":{"name":"bool"}}],[11,"ne","","",21,{"inputs":[{"name":"aabb2"},{"name":"aabb2"}],"output":{"name":"bool"}}],[11,"clone","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"aabb2"}}],[11,"new","","Construct a new axis-aligned bounding box from two points.",21,{"inputs":[{"name":"aabb2"},{"name":"point2"},{"name":"point2"}],"output":{"name":"aabb2"}}],[11,"to_corners","","Compute corners.",21,null],[11,"new","","",21,{"inputs":[{"name":"aabb2"},{"name":"point2"},{"name":"point2"}],"output":{"name":"aabb2"}}],[11,"min","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"point2"}}],[11,"max","","",21,{"inputs":[{"name":"aabb2"}],"output":{"name":"point2"}}],[11,"contains","","",21,{"inputs":[{"name":"aabb2"},{"name":"point2"}],"output":{"name":"bool"}}],[11,"fmt","","",21,{"inputs":[{"name":"aabb2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",22,{"inputs":[{"name":"aabb3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",22,{"inputs":[{"name":"aabb3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"aabb3"},{"name":"aabb3"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"aabb3"},{"name":"aabb3"}],"output":{"name":"bool"}}],[11,"clone","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"aabb3"}}],[11,"new","","Construct a new axis-aligned bounding box from two points.",22,{"inputs":[{"name":"aabb3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"aabb3"}}],[11,"to_corners","","Compute corners.",22,null],[11,"new","","",22,{"inputs":[{"name":"aabb3"},{"name":"point3"},{"name":"point3"}],"output":{"name":"aabb3"}}],[11,"min","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"max","","",22,{"inputs":[{"name":"aabb3"}],"output":{"name":"point3"}}],[11,"contains","","",22,{"inputs":[{"name":"aabb3"},{"name":"point3"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"aabb3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"relate_plane","","",22,{"inputs":[{"name":"aabb3"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"eq","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"relation"},{"name":"relation"}],"output":{"name":"ordering"}}],[11,"hash","","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"relation"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"relation"}],"output":{"name":"relation"}}],[11,"decode","","",23,{"inputs":[{"name":"cylinder"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",23,{"inputs":[{"name":"cylinder"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",23,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"cylinder"},{"name":"cylinder"}],"output":{"name":"bool"}}],[11,"clone","","",23,{"inputs":[{"name":"cylinder"}],"output":{"name":"cylinder"}}],[11,"decode","","",24,{"inputs":[{"name":"frustum"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",24,{"inputs":[{"name":"frustum"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",24,{"inputs":[{"name":"frustum"},{"name":"frustum"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"frustum"},{"name":"frustum"}],"output":{"name":"bool"}}],[11,"fmt","","",24,{"inputs":[{"name":"frustum"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"frustum"}],"output":{"name":"frustum"}}],[11,"new","","Construct a frustum.",24,{"inputs":[{"name":"frustum"},{"name":"plane"},{"name":"plane"},{"name":"plane"},{"name":"plane"},{"name":"plane"},{"name":"plane"}],"output":{"name":"frustum"}}],[11,"from_matrix4","","Extract frustum planes from a projection matrix.",24,{"inputs":[{"name":"frustum"},{"name":"matrix4"}],"output":{"name":"option"}}],[11,"contains","","Find the spatial relation of a bound inside this frustum.",24,{"inputs":[{"name":"frustum"},{"name":"b"}],"output":{"name":"relation"}}],[11,"decode","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"frustumpoints"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"frustumpoints"},{"name":"frustumpoints"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"frustumpoints"}],"output":{"name":"frustumpoints"}}],[11,"decode","","",26,{"inputs":[{"name":"obb2"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",26,{"inputs":[{"name":"obb2"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"obb2"},{"name":"obb2"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"obb2"},{"name":"obb2"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"obb2"}],"output":{"name":"obb2"}}],[11,"decode","","",27,{"inputs":[{"name":"obb3"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",27,{"inputs":[{"name":"obb3"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",27,{"inputs":[{"name":"obb3"},{"name":"obb3"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"obb3"},{"name":"obb3"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"obb3"}],"output":{"name":"obb3"}}],[11,"decode","","",28,{"inputs":[{"name":"sphere"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",28,{"inputs":[{"name":"sphere"},{"name":"__s"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"sphere"},{"name":"sphere"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"sphere"},{"name":"sphere"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"sphere"}],"output":{"name":"sphere"}}],[11,"relate_plane","","",28,{"inputs":[{"name":"sphere"},{"name":"plane"}],"output":{"name":"relation"}}],[6,"Line2","","",null,null],[6,"Line3","","",null,null],[6,"Ray2","","",null,null],[6,"Ray3","","",null,null],[8,"Array1","","An array containing elements of type `Element`",null,null],[11,"ptr","","Get the pointer to the first element of the array.",32,{"inputs":[{"name":"array1"}],"output":{"name":"element"}}],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",32,{"inputs":[{"name":"array1"}],"output":{"name":"element"}}],[11,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",32,{"inputs":[{"name":"array1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"replace_elem","","Replace an element in the array.",32,{"inputs":[{"name":"array1"},{"name":"usize"},{"name":"element"}],"output":{"name":"element"}}],[8,"Array2","","A column-major array",null,null],[11,"ptr","","Get the pointer to the first element of the array.",33,{"inputs":[{"name":"array2"}],"output":{"name":"element"}}],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",33,{"inputs":[{"name":"array2"}],"output":{"name":"element"}}],[11,"swap_cols","","Swap two columns of this array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"replace_col","","Replace a column in the array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"column"}],"output":{"name":"column"}}],[10,"row","","Get a row from this array by-value.",33,{"inputs":[{"name":"array2"},{"name":"usize"}],"output":{"name":"row"}}],[10,"swap_rows","","Swap two rows of this array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"swap_elems","","Swap the values at index `a` and `b`",33,null],[8,"Matrix","","",null,null],[10,"from_value","","Create a new diagonal matrix using the supplied value.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"from_diagonal","","Create a matrix from a non-uniform scale",34,{"inputs":[{"name":"matrix"},{"name":"v"}],"output":{"name":"self"}}],[11,"zero","","Create a matrix with all elements equal to zero.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[11,"one","","Create a matrix where the each element of the diagonal is equal to one.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[10,"mul_s","","Multiply this matrix by a scalar, returning the new matrix.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"div_s","","Divide this matrix by a scalar, returning the new matrix.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"rem_s","","Take the remainder of this matrix by a scalar, returning the new\nmatrix.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_m","","Add this matrix with another matrix, returning the new metrix.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub_m","","Subtract another matrix from this matrix, returning the new matrix.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":{"name":"self"}}],[10,"mul_v","","Multiplay a vector by this matrix, returning a new vector.",34,{"inputs":[{"name":"matrix"},{"name":"v"}],"output":{"name":"v"}}],[10,"mul_m","","Multiply this matrix by another matrix, returning the new matrix.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":{"name":"self"}}],[10,"mul_self_s","","Multiply this matrix by a scalar, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":null}],[10,"div_self_s","","Divide this matrix by a scalar, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":null}],[10,"rem_self_s","","Take the remainder of this matrix, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"s"}],"output":null}],[10,"add_self_m","","Add this matrix with another matrix, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[10,"sub_self_m","","Subtract another matrix from this matrix, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[11,"mul_self_m","","Multiply this matrix by another matrix, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[10,"transpose","","Transpose this matrix, returning a new matrix.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[10,"transpose_self","","Transpose this matrix in-place.",34,{"inputs":[{"name":"matrix"}],"output":null}],[10,"determinant","","Take the determinant of this matrix.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"s"}}],[10,"diagonal","","Return a vector containing the diagonal of this matrix.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"v"}}],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"s"}}],[10,"invert","","Invert this matrix, returning a new matrix. `m.mul_m(m.invert())` is\nthe identity matrix. Returns `None` if this matrix is not invertible\n(has a determinant of zero).",34,{"inputs":[{"name":"matrix"}],"output":{"name":"option"}}],[11,"invert_self","","Invert this matrix in-place.",34,{"inputs":[{"name":"matrix"}],"output":null}],[11,"is_invertible","","Test if this matrix is invertible.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_one","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[10,"is_diagonal","","Test if this is a diagonal matrix. That is, every element outside of\nthe diagonal is 0.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[10,"is_symmetric","","Test if this matrix is symmetric. That is, it is equal to its\ntranspose.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[8,"Vector","","A trait that specifies a range of numeric operations for vectors. Not all\nof these make sense from a linear algebra point of view, but are included\nfor pragmatic reasons.",null,null],[10,"from_value","","Construct a vector from a single value, replicating it.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[11,"zero","","The zero vector (with all components set to zero)",35,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"one","","The identity vector (with all components set to one)",35,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[10,"add_s","","Add a scalar to this vector, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"sub_s","","Subtract a scalar from this vector, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"mul_s","","Multiply this vector by a scalar, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"div_s","","Divide this vector by a scalar, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"rem_s","","Take the remainder of this vector by a scalar, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_v","","Add this vector to another, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"sub_v","","Subtract another vector from this one, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"mul_v","","Multiply this vector by another, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"div_v","","Divide this vector by another, returning a new vector.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"rem_v","","Take the remainder of this vector by another, returning a new scalar.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"self"}}],[10,"add_self_s","","Add a scalar to this vector in-place.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"sub_self_s","","Subtract a scalar from this vector, in-place.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"mul_self_s","","Multiply this vector by a scalar, in-place.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"div_self_s","","Divide this vector by a scalar, in-place.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"rem_self_s","","Take the remainder of this vector by a scalar, in-place.",35,{"inputs":[{"name":"vector"},{"name":"s"}],"output":null}],[10,"add_self_v","","Add another vector to this one, in-place.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"sub_self_v","","Subtract another vector from this one, in-place.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"mul_self_v","","Multiply this matrix by another, in-place.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"div_self_v","","Divide this matrix by anothor, in-place.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"rem_self_v","","Take the remainder of this vector by another, in-place.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":null}],[10,"sum","","The sum of the components of the vector.",35,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[10,"product","","The product of the components of the vector.",35,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[11,"dot","","Vector dot product.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"s"}}],[10,"comp_min","","The minimum component of the vector.",35,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[10,"comp_max","","The maximum component of the vector.",35,{"inputs":[{"name":"vector"}],"output":{"name":"s"}}],[8,"EuclideanVector","","Specifies geometric operations for vectors. This is only implemented for\n2-dimensional and 3-dimensional vectors.",null,null],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"}],"output":{"name":"bool"}}],[11,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",36,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"s"}}],[11,"length","","The norm of the vector.",36,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"s"}}],[10,"angle","","The angle between the vector and `other`, in radians.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"}],"output":{"name":"rad"}}],[11,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",36,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given `length`.",36,{"inputs":[{"name":"euclideanvector"},{"name":"s"}],"output":{"name":"self"}}],[11,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"normalize_self","","Normalises the vector to a length of `1`.",36,{"inputs":[{"name":"euclideanvector"}],"output":null}],[11,"normalize_self_to","","Normalizes the vector to `length`.",36,{"inputs":[{"name":"euclideanvector"},{"name":"s"}],"output":null}],[11,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"},{"name":"s"}],"output":null}],[8,"Angle","","Operations on angles.",null,null],[10,"from","","Create a new angle from any other valid angle.",37,{"inputs":[{"name":"angle"},{"name":"a"}],"output":{"name":"self"}}],[11,"neg_self","","Negate this angle, in-place.",37,{"inputs":[{"name":"angle"}],"output":null}],[11,"add_a","","Add this angle with another, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub_a","","Subtract another angle from this one, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_a","","Divide this angle by another, returning the ratio.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"s"}}],[11,"rem_a","","Take the remainder of this angle with another.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"s"}}],[11,"mul_s","","Multiply this angle by a scalar, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"div_s","","Divide this angle by a scalar, returing the new angle.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"add_self_a","","Add this angle with another, in-place.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":null}],[11,"sub_self_a","","Subtract another angle from this one, in-place.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":null}],[11,"mul_self_s","","Multiply this angle by a scalar, in-place.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"div_self_s","","Divide this angle by a scalar, in-place.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",37,{"inputs":[{"name":"angle"}],"output":null}],[11,"opposite","","Return the angle rotated by half a turn",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[10,"full_turn","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_2","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_3","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_4","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_6","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"equiv","","",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"bool"}}],[8,"Point","","Specifies the numeric operations for point types.",null,null],[10,"origin","","Create a point at the origin.",38,{"inputs":[{"name":"point"}],"output":{"name":"self"}}],[10,"from_vec","","Create a point from a vector.",38,{"inputs":[{"name":"point"},{"name":"v"}],"output":{"name":"self"}}],[10,"to_vec","","Convert a point to a vector.",38,{"inputs":[{"name":"point"}],"output":{"name":"v"}}],[10,"mul_s","","Multiply each component by a scalar, returning the new point.",38,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"self"}}],[10,"div_s","","Divide each component by a scalar, returning the new point.",38,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"self"}}],[10,"rem_s","","Subtract a scalar from each component, returning the new point.",38,{"inputs":[{"name":"point"},{"name":"s"}],"output":{"name":"self"}}],[10,"add_v","","Add a vector to this point, returning the new point.",38,{"inputs":[{"name":"point"},{"name":"v"}],"output":{"name":"self"}}],[10,"sub_p","","Subtract another point from this one, returning a new vector.",38,{"inputs":[{"name":"point"},{"name":"self"}],"output":{"name":"v"}}],[10,"mul_self_s","","Multiply each component by a scalar, in-place.",38,{"inputs":[{"name":"point"},{"name":"s"}],"output":null}],[10,"div_self_s","","Divide each component by a scalar, in-place.",38,{"inputs":[{"name":"point"},{"name":"s"}],"output":null}],[10,"rem_self_s","","Take the remainder of each component by a scalar, in-place.",38,{"inputs":[{"name":"point"},{"name":"s"}],"output":null}],[10,"add_self_v","","Add a vector to this point, in-place.",38,{"inputs":[{"name":"point"},{"name":"v"}],"output":null}],[10,"dot","","This is a weird one, but its useful for plane calculations.",38,{"inputs":[{"name":"point"},{"name":"v"}],"output":{"name":"s"}}],[10,"min","","",38,{"inputs":[{"name":"point"},{"name":"self"}],"output":{"name":"self"}}],[10,"max","","",38,{"inputs":[{"name":"point"},{"name":"self"}],"output":{"name":"self"}}],[8,"Rotation","","A trait for a generic rotation. A rotation is a transformation that\ncreates a circular motion, and preserves at least one point in the space.",null,null],[10,"one","","Create the identity transform (causes no transformation).",39,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[10,"look_at","","Create a rotation to a given direction with an 'up' vector",39,{"inputs":[{"name":"rotation"},{"name":"v"},{"name":"v"}],"output":{"name":"self"}}],[10,"between_vectors","","Create a shortest rotation to transform vector 'a' into 'b'.\nBoth given vectors are assumed to have unit length.",39,{"inputs":[{"name":"rotation"},{"name":"v"},{"name":"v"}],"output":{"name":"self"}}],[10,"rotate_vector","","Rotate a vector using this rotation.",39,{"inputs":[{"name":"rotation"},{"name":"v"}],"output":{"name":"v"}}],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",39,{"inputs":[{"name":"rotation"},{"name":"p"}],"output":{"name":"p"}}],[11,"rotate_ray","","Rotate a ray using this rotation.",39,{"inputs":[{"name":"rotation"},{"name":"ray"}],"output":{"name":"ray"}}],[10,"concat","","Create a new rotation which combines both this rotation, and another.",39,{"inputs":[{"name":"rotation"},{"name":"self"}],"output":{"name":"self"}}],[10,"invert","","Create a new rotation which \"un-does\" this rotation. That is,\n`r.concat(r.invert())` is the identity.",39,{"inputs":[{"name":"rotation"}],"output":{"name":"self"}}],[11,"concat_self","","Modify this rotation in-place by combining it with another.",39,{"inputs":[{"name":"rotation"},{"name":"self"}],"output":null}],[11,"invert_self","","Invert this rotation in-place.",39,{"inputs":[{"name":"rotation"}],"output":null}],[8,"Rotation2","","A two-dimensional rotation.",null,null],[10,"from_angle","","Create a rotation by a given angle. Thus is a redundant case of both\nfrom_axis_angle() and from_euler() for 2D space.",40,{"inputs":[{"name":"rotation2"},{"name":"rad"}],"output":{"name":"self"}}],[8,"Rotation3","","A three-dimensional rotation.",null,null],[10,"from_axis_angle","","Create a rotation using an angle around a given axis.",41,{"inputs":[{"name":"rotation3"},{"name":"vector3"},{"name":"rad"}],"output":{"name":"self"}}],[10,"from_euler","","Create a rotation from a set of euler angles.",41,{"inputs":[{"name":"rotation3"},{"name":"rad"},{"name":"rad"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",41,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",41,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",41,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[8,"Transform","","A trait representing an [affine\ntransformation](https://en.wikipedia.org/wiki/Affine_transformation) that\ncan be applied to points or vectors. An affine transformation is one which",null,null],[10,"one","","Create an identity transformation. That is, a transformation which\ndoes nothing.",42,{"inputs":[{"name":"transform"}],"output":{"name":"self"}}],[10,"look_at","","Create a transformation that rotates a vector to look at `center` from\n`eye`, using `up` for orientation.",42,{"inputs":[{"name":"transform"},{"name":"p"},{"name":"p"},{"name":"v"}],"output":{"name":"self"}}],[10,"transform_vector","","Transform a vector using this transform.",42,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"transform_point","","Transform a point using this transform.",42,{"inputs":[{"name":"transform"},{"name":"p"}],"output":{"name":"p"}}],[11,"transform_ray","","Transform a ray using this transform.",42,{"inputs":[{"name":"transform"},{"name":"ray"}],"output":{"name":"ray"}}],[11,"transform_as_point","","Transform a vector as a point using this transform.",42,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[10,"concat","","Combine this transform with another, yielding a new transformation\nwhich has the effects of both.",42,{"inputs":[{"name":"transform"},{"name":"self"}],"output":{"name":"self"}}],[10,"invert","","Create a transform that \"un-does\" this one.",42,{"inputs":[{"name":"transform"}],"output":{"name":"option"}}],[11,"concat_self","","Combine this transform with another, in-place.",42,{"inputs":[{"name":"transform"},{"name":"self"}],"output":null}],[11,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",42,{"inputs":[{"name":"transform"}],"output":null}],[8,"Transform2","","",null,null],[8,"Transform3","","",null,null],[8,"ToComponents","","A trait that allows extracting components (rotation, translation, scale)\nfrom an arbitrary transformations",null,null],[10,"decompose","","Extract the (scale, rotation, translation) triple",43,null],[8,"ToComponents2","","",null,null],[8,"ToComponents3","","",null,null],[8,"CompositeTransform","","",null,null],[8,"CompositeTransform2","","",null,null],[8,"CompositeTransform3","","",null,null],[8,"Projection","","",null,null],[10,"to_frustum","","",44,{"inputs":[{"name":"projection"}],"output":{"name":"frustum"}}],[8,"Aabb","","",null,null],[10,"new","","Create a new AABB using two points as opposing corners.",45,{"inputs":[{"name":"aabb"},{"name":"p"},{"name":"p"}],"output":{"name":"self"}}],[10,"min","","Return a shared reference to the point nearest to (-inf, -inf).",45,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[10,"max","","Return a shared reference to the point nearest to (inf, inf).",45,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[11,"dim","","Return the dimensions of this AABB.",45,{"inputs":[{"name":"aabb"}],"output":{"name":"v"}}],[11,"volume","","Return the volume this AABB encloses.",45,{"inputs":[{"name":"aabb"}],"output":{"name":"s"}}],[11,"center","","Return the center point of this AABB.",45,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[10,"contains","","Tests whether a point is cointained in the box, inclusive for min corner\nand exclusive for the max corner.",45,{"inputs":[{"name":"aabb"},{"name":"p"}],"output":{"name":"bool"}}],[11,"grow","","Returns a new AABB that is grown to include the given point.",45,{"inputs":[{"name":"aabb"},{"name":"p"}],"output":{"name":"self"}}],[11,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",45,{"inputs":[{"name":"aabb"},{"name":"v"}],"output":{"name":"self"}}],[11,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",45,{"inputs":[{"name":"aabb"},{"name":"s"}],"output":{"name":"self"}}],[11,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",45,{"inputs":[{"name":"aabb"},{"name":"v"}],"output":{"name":"self"}}],[8,"Bound","","Generic bound.",null,null],[10,"relate_plane","","Classify the spatial relation with a plane.",46,{"inputs":[{"name":"bound"},{"name":"plane"}],"output":{"name":"relation"}}],[11,"relate_clip_space","","Classify the relation with a projection matrix.",46,{"inputs":[{"name":"bound"},{"name":"matrix4"}],"output":{"name":"relation"}}],[8,"Intersect","","",null,null],[10,"intersection","","",47,{"inputs":[{"name":"intersect"}],"output":{"name":"result"}}],[8,"ApproxEq","","",null,null],[11,"approx_epsilon","","",48,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"t"}}],[11,"approx_eq","","",48,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}],[10,"approx_eq_eps","","",48,{"inputs":[{"name":"approxeq"},{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[8,"PartialOrd","","A trait providing a [partial ordering](http://mathworld.wolfram.com/PartialOrder.html).",null,null],[10,"partial_min","","",49,{"inputs":[{"name":"partialord"},{"name":"self"}],"output":{"name":"self"}}],[10,"partial_max","","",49,{"inputs":[{"name":"partialord"},{"name":"self"}],"output":{"name":"self"}}],[8,"BaseNum","","Base numeric types with partial ordering",null,null],[8,"BaseInt","","Base integer types",null,null],[8,"BaseFloat","","Base floating point types",null,null],[14,"assert_approx_eq_eps!","","",null,null],[14,"assert_approx_eq!","","",null,null],[11,"ptr","","Get the pointer to the first element of the array.",32,{"inputs":[{"name":"array1"}],"output":{"name":"element"}}],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",32,{"inputs":[{"name":"array1"}],"output":{"name":"element"}}],[11,"swap_elems","","Swap the elements at indices `i` and `j` in-place.",32,{"inputs":[{"name":"array1"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"replace_elem","","Replace an element in the array.",32,{"inputs":[{"name":"array1"},{"name":"usize"},{"name":"element"}],"output":{"name":"element"}}],[11,"ptr","","Get the pointer to the first element of the array.",33,{"inputs":[{"name":"array2"}],"output":{"name":"element"}}],[11,"mut_ptr","","Get a mutable pointer to the first element of the array.",33,{"inputs":[{"name":"array2"}],"output":{"name":"element"}}],[11,"swap_cols","","Swap two columns of this array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"usize"}],"output":null}],[11,"replace_col","","Replace a column in the array.",33,{"inputs":[{"name":"array2"},{"name":"usize"},{"name":"column"}],"output":{"name":"column"}}],[11,"swap_elems","","Swap the values at index `a` and `b`",33,null],[11,"zero","","Create a matrix with all elements equal to zero.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[11,"one","","Create a matrix where the each element of the diagonal is equal to one.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"self"}}],[11,"mul_self_m","","Multiply this matrix by another matrix, in-place.",34,{"inputs":[{"name":"matrix"},{"name":"self"}],"output":null}],[11,"trace","","Return the trace of this matrix. That is, the sum of the diagonal.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"s"}}],[11,"invert_self","","Invert this matrix in-place.",34,{"inputs":[{"name":"matrix"}],"output":null}],[11,"is_invertible","","Test if this matrix is invertible.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"is_one","","Test if this matrix is the identity matrix. That is, it is diagonal\nand every element in the diagonal is one.",34,{"inputs":[{"name":"matrix"}],"output":{"name":"bool"}}],[11,"zero","","The zero vector (with all components set to zero)",35,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"one","","The identity vector (with all components set to one)",35,{"inputs":[{"name":"vector"}],"output":{"name":"self"}}],[11,"dot","","Vector dot product.",35,{"inputs":[{"name":"vector"},{"name":"self"}],"output":{"name":"s"}}],[11,"is_perpendicular","","Returns `true` if the vector is perpendicular (at right angles) to the\nother vector.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"}],"output":{"name":"bool"}}],[11,"length2","","Returns the squared length of the vector. This does not perform an\nexpensive square root operation like in the `length` method and can\ntherefore be more efficient for comparing the lengths of two vectors.",36,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"s"}}],[11,"length","","The norm of the vector.",36,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"s"}}],[11,"normalize","","Returns a vector with the same direction, but with a `length` (or\n`norm`) of `1`.",36,{"inputs":[{"name":"euclideanvector"}],"output":{"name":"self"}}],[11,"normalize_to","","Returns a vector with the same direction and a given `length`.",36,{"inputs":[{"name":"euclideanvector"},{"name":"s"}],"output":{"name":"self"}}],[11,"lerp","","Returns the result of linarly interpolating the length of the vector\ntowards the length of `other` by the specified amount.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"},{"name":"s"}],"output":{"name":"self"}}],[11,"normalize_self","","Normalises the vector to a length of `1`.",36,{"inputs":[{"name":"euclideanvector"}],"output":null}],[11,"normalize_self_to","","Normalizes the vector to `length`.",36,{"inputs":[{"name":"euclideanvector"},{"name":"s"}],"output":null}],[11,"lerp_self","","Linearly interpolates the length of the vector towards the length of\n`other` by the specified amount.",36,{"inputs":[{"name":"euclideanvector"},{"name":"self"},{"name":"s"}],"output":null}],[11,"neg_self","","Negate this angle, in-place.",37,{"inputs":[{"name":"angle"}],"output":null}],[11,"add_a","","Add this angle with another, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"sub_a","","Subtract another angle from this one, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"div_a","","Divide this angle by another, returning the ratio.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"s"}}],[11,"rem_a","","Take the remainder of this angle with another.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"s"}}],[11,"mul_s","","Multiply this angle by a scalar, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"div_s","","Divide this angle by a scalar, returing the new angle.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"rem_s","","Take the remainder of this angle by a scalar, returning the new angle.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":{"name":"self"}}],[11,"add_self_a","","Add this angle with another, in-place.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":null}],[11,"sub_self_a","","Subtract another angle from this one, in-place.",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":null}],[11,"mul_self_s","","Multiply this angle by a scalar, in-place.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"div_self_s","","Divide this angle by a scalar, in-place.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"rem_self_s","","Take the remainder of this angle by a scalar, in-place.",37,{"inputs":[{"name":"angle"},{"name":"s"}],"output":null}],[11,"normalize","","Return the angle, normalized to the range `[0, full_turn)`.",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"normalize_self","","Normalize the angle to the range `[0, full_turn)`.",37,{"inputs":[{"name":"angle"}],"output":null}],[11,"opposite","","Return the angle rotated by half a turn",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"bisect","","Returns the interior bisector of the two angles",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"self"}}],[11,"turn_div_2","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_3","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_4","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"turn_div_6","","",37,{"inputs":[{"name":"angle"}],"output":{"name":"self"}}],[11,"equiv","","",37,{"inputs":[{"name":"angle"},{"name":"self"}],"output":{"name":"bool"}}],[11,"rotate_point","","Rotate a point using this rotation, by converting it to its\nrepresentation as a vector.",39,{"inputs":[{"name":"rotation"},{"name":"p"}],"output":{"name":"p"}}],[11,"rotate_ray","","Rotate a ray using this rotation.",39,{"inputs":[{"name":"rotation"},{"name":"ray"}],"output":{"name":"ray"}}],[11,"concat_self","","Modify this rotation in-place by combining it with another.",39,{"inputs":[{"name":"rotation"},{"name":"self"}],"output":null}],[11,"invert_self","","Invert this rotation in-place.",39,{"inputs":[{"name":"rotation"}],"output":null}],[11,"from_angle_x","","Create a rotation from an angle around the `x` axis (pitch).",41,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_y","","Create a rotation from an angle around the `y` axis (yaw).",41,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"from_angle_z","","Create a rotation from an angle around the `z` axis (roll).",41,{"inputs":[{"name":"rotation3"},{"name":"rad"}],"output":{"name":"self"}}],[11,"transform_ray","","Transform a ray using this transform.",42,{"inputs":[{"name":"transform"},{"name":"ray"}],"output":{"name":"ray"}}],[11,"transform_as_point","","Transform a vector as a point using this transform.",42,{"inputs":[{"name":"transform"},{"name":"v"}],"output":{"name":"v"}}],[11,"concat_self","","Combine this transform with another, in-place.",42,{"inputs":[{"name":"transform"},{"name":"self"}],"output":null}],[11,"invert_self","","Invert this transform in-place, failing if the transformation is not\ninvertible.",42,{"inputs":[{"name":"transform"}],"output":null}],[11,"dim","","Return the dimensions of this AABB.",45,{"inputs":[{"name":"aabb"}],"output":{"name":"v"}}],[11,"volume","","Return the volume this AABB encloses.",45,{"inputs":[{"name":"aabb"}],"output":{"name":"s"}}],[11,"center","","Return the center point of this AABB.",45,{"inputs":[{"name":"aabb"}],"output":{"name":"p"}}],[11,"grow","","Returns a new AABB that is grown to include the given point.",45,{"inputs":[{"name":"aabb"},{"name":"p"}],"output":{"name":"self"}}],[11,"add_v","","Add a vector to every point in the AABB, returning a new AABB.",45,{"inputs":[{"name":"aabb"},{"name":"v"}],"output":{"name":"self"}}],[11,"mul_s","","Multiply every point in the AABB by a scalar, returning a new AABB.",45,{"inputs":[{"name":"aabb"},{"name":"s"}],"output":{"name":"self"}}],[11,"mul_v","","Multiply every point in the AABB by a vector, returning a new AABB.",45,{"inputs":[{"name":"aabb"},{"name":"v"}],"output":{"name":"self"}}],[11,"relate_clip_space","","Classify the relation with a projection matrix.",46,{"inputs":[{"name":"bound"},{"name":"matrix4"}],"output":{"name":"relation"}}],[11,"approx_epsilon","","",48,{"inputs":[{"name":"approxeq"},{"name":"option"}],"output":{"name":"t"}}],[11,"approx_eq","","",48,{"inputs":[{"name":"approxeq"},{"name":"self"}],"output":{"name":"bool"}}]],"paths":[[8,"One"],[8,"Zero"],[3,"Matrix2"],[3,"Matrix3"],[3,"Matrix4"],[3,"Quaternion"],[3,"Vector2"],[3,"Vector3"],[3,"Vector4"],[3,"Rad"],[3,"Deg"],[3,"Plane"],[3,"Point2"],[3,"Point3"],[3,"Line"],[3,"Ray"],[3,"Decomposed"],[3,"AffineMatrix3"],[3,"PerspectiveFov"],[3,"Perspective"],[3,"Ortho"],[3,"Aabb2"],[3,"Aabb3"],[3,"Cylinder"],[3,"Frustum"],[3,"FrustumPoints"],[3,"Obb2"],[3,"Obb3"],[3,"Sphere"],[4,"Relation"],[3,"Basis3"],[3,"Basis2"],[8,"Array1"],[8,"Array2"],[8,"Matrix"],[8,"Vector"],[8,"EuclideanVector"],[8,"Angle"],[8,"Point"],[8,"Rotation"],[8,"Rotation2"],[8,"Rotation3"],[8,"Transform"],[8,"ToComponents"],[8,"Projection"],[8,"Aabb"],[8,"Bound"],[8,"Intersect"],[8,"ApproxEq"],[8,"PartialOrd"]]};
searchIndex['num'] = {"items":[[0,"","num","Simple numerics.",null,null],[5,"zero","","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"abs","","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"pow","","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[0,"bigint","","A Big integer (signed version: `BigInt`, unsigned version: `BigUint`).",null,null],[3,"BigUint","num::bigint","A big unsigned integer type.",null,null],[3,"RadixFmt","","",null,null],[3,"BigInt","","A big signed integer type.",null,null],[4,"Sign","","A Sign is a `BigInt`'s composing element.",null,null],[13,"Minus","","",0,null],[13,"NoSign","","",0,null],[13,"Plus","","",0,null],[4,"ParseBigIntError","","",null,null],[13,"ParseInt","","",1,null],[13,"Other","","",1,null],[0,"big_digit","","",null,null],[5,"from_doublebigdigit","num::bigint::big_digit","Split one `DoubleBigDigit` into two `BigDigit`s.",null,null],[5,"to_doublebigdigit","","Join two `BigDigit`s into one `DoubleBigDigit`",null,{"inputs":[{"name":"bigdigit"},{"name":"bigdigit"}],"output":{"name":"doublebigdigit"}}],[17,"BITS","","",null,null],[17,"BASE","","",null,null],[6,"BigDigit","num::bigint","A `BigDigit` is a `BigUint`'s composing element.",null,null],[6,"DoubleBigDigit","","A `DoubleBigDigit` is the internal type used to do the computations.  Its\nsize is the double of the size of `BigDigit`.",null,null],[17,"ZERO_BIG_DIGIT","","",null,null],[8,"ToBigUint","","A generic trait for converting a value to a `BigUint`.",null,null],[10,"to_biguint","","Converts the value of `self` to a `BigUint`.",2,{"inputs":[{"name":"tobiguint"}],"output":{"name":"option"}}],[8,"ToBigInt","","A generic trait for converting a value to a `BigInt`.",null,null],[10,"to_bigint","","Converts the value of `self` to a `BigInt`.",3,{"inputs":[{"name":"tobigint"}],"output":{"name":"option"}}],[8,"RandBigInt","","",null,null],[10,"gen_biguint","","Generate a random `BigUint` of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"biguint"}}],[10,"gen_bigint","","Generate a random BigInt of the given bit size.",4,{"inputs":[{"name":"randbigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[10,"gen_biguint_below","","Generate a random `BigUint` less than the given bound. Fails\nwhen the bound is zero.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_biguint_range","","Generate a random `BigUint` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[10,"gen_bigint_range","","Generate a random `BigInt` within the given range. The lower\nbound is inclusive; the upper bound is exclusive. Fails when\nthe upper bound is not greater than the lower bound.",4,{"inputs":[{"name":"randbigint"},{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"biguint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",5,{"inputs":[{"name":"biguint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"eq","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"cmp","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"ordering"}}],[11,"default","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"hash","","",5,{"inputs":[{"name":"biguint"},{"name":"h"}],"output":null}],[11,"fmt","","",5,{"inputs":[{"name":"biguint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",5,{"inputs":[{"name":"biguint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitand","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"bitxor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"shl","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"shr","","",5,{"inputs":[{"name":"biguint"},{"name":"usize"}],"output":{"name":"biguint"}}],[11,"zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"is_zero","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"one","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"rem","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"neg","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"checked_add","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_sub","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_mul","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"checked_div","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"option"}}],[11,"div_rem","","",5,null],[11,"div_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"mod_floor","","",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"div_mod_floor","","",5,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"biguint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",5,{"inputs":[{"name":"biguint"},{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"bool"}}],[11,"to_i64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"to_u64","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"from_i64","","",5,{"inputs":[{"name":"biguint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",5,{"inputs":[{"name":"biguint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_biguint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_biguint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"clone","","",7,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",7,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Creates and initializes a `BigUint`.",5,{"inputs":[{"name":"biguint"},{"name":"vec"}],"output":{"name":"biguint"}}],[11,"from_slice","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_be","","Creates and initializes a `BigUint`.",5,null],[11,"from_bytes_le","","Creates and initializes a `BigUint`.",5,null],[11,"to_bytes_le","","Returns the byte representation of the `BigUint` in little-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"to_bytes_be","","Returns the byte representation of the `BigUint` in big-endian byte order.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"vec"}}],[11,"parse_bytes","","Creates and initializes a `BigUint`.",5,null],[11,"bits","","Determines the fewest bits necessary to express the `BigUint`.",5,{"inputs":[{"name":"biguint"}],"output":{"name":"usize"}}],[11,"decode","","",0,{"inputs":[{"name":"sign"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",0,{"inputs":[{"name":"sign"},{"name":"__s"}],"output":{"name":"result"}}],[11,"fmt","","",0,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"option"}}],[11,"lt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"le","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"gt","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ge","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"eq","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",0,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"neg","","Negate Sign value.",0,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"bigint"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",6,{"inputs":[{"name":"bigint"},{"name":"__s"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"eq","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"cmp","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"ordering"}}],[11,"default","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"fmt","","",6,{"inputs":[{"name":"bigint"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",6,{"inputs":[{"name":"bigint"},{"name":"h"}],"output":null}],[11,"from_str","","",6,{"inputs":[{"name":"bigint"},{"name":"str"}],"output":{"name":"result"}}],[11,"from_str_radix","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"shl","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"shr","","",6,{"inputs":[{"name":"bigint"},{"name":"usize"}],"output":{"name":"bigint"}}],[11,"zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_zero","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"one","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"abs_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"signum","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"is_positive","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_negative","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"rem","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"neg","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"div_rem","","",6,null],[11,"div_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"mod_floor","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"div_mod_floor","","",6,null],[11,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bigint"}}],[11,"divides","","Deprecated, use `is_multiple_of` instead.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_multiple_of","","Returns `true` if the number is a multiple of `other`.",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_even","","Returns `true` if the number is divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"is_odd","","Returns `true` if the number is not divisible by `2`.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"bool"}}],[11,"to_i64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_u64","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"from_i64","","",6,{"inputs":[{"name":"bigint"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_u64","","",6,{"inputs":[{"name":"bigint"},{"name":"u64"}],"output":{"name":"option"}}],[11,"to_bigint","","",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"to_bigint","","",5,{"inputs":[{"name":"biguint"}],"output":{"name":"option"}}],[11,"new","","Creates and initializes a BigInt.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"vec"}],"output":{"name":"bigint"}}],[11,"from_biguint","","Creates and initializes a `BigInt`.",6,{"inputs":[{"name":"bigint"},{"name":"sign"},{"name":"biguint"}],"output":{"name":"bigint"}}],[11,"from_slice","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_be","","Creates and initializes a `BigInt`.",6,null],[11,"from_bytes_le","","Creates and initializes a `BigInt`.",6,null],[11,"to_bytes_le","","Returns the sign and the byte representation of the `BigInt` in little-endian byte order.",6,null],[11,"to_bytes_be","","Returns the sign and the byte representation of the `BigInt` in big-endian byte order.",6,null],[11,"parse_bytes","","Creates and initializes a `BigInt`.",6,null],[11,"to_biguint","","Converts this `BigInt` into a `BigUint`, if it's not negative.",6,{"inputs":[{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_add","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_sub","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_mul","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"checked_div","","",6,{"inputs":[{"name":"bigint"},{"name":"bigint"}],"output":{"name":"option"}}],[11,"eq","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"ne","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parsebiginterror"}],"output":{"name":"bool"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",1,{"inputs":[{"name":"parsebiginterror"}],"output":{"name":"str"}}],[11,"from","","",1,{"inputs":[{"name":"parsebiginterror"},{"name":"parseinterror"}],"output":{"name":"parsebiginterror"}}],[0,"complex","num","Complex numbers.",null,null],[3,"Complex","num::complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",8,null],[12,"im","","Imaginary portion of the complex number",8,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",8,null],[11,"clone","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"eq","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"ne","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"bool"}}],[11,"decode","","",8,{"inputs":[{"name":"complex"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"complex"},{"name":"__s"}],"output":{"name":"result"}}],[11,"new","","Create a new Complex",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn't necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"scale","","Multiplies `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"unscale","","Divides `self` by the scalar `t`.",8,{"inputs":[{"name":"complex"},{"name":"t"}],"output":{"name":"complex"}}],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"inv","","Returns `1/self`",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"norm","","Calculate |self|",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"arg","","Calculate the principal Arg of self.",8,{"inputs":[{"name":"complex"}],"output":{"name":"t"}}],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",8,null],[11,"from_polar","","Convert a polar representation into a complex number.",8,{"inputs":[{"name":"complex"},{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"add","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"sub","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"mul","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"div","","",8,{"inputs":[{"name":"complex"},{"name":"complex"}],"output":{"name":"complex"}}],[11,"neg","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"is_zero","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"bool"}}],[11,"one","","",8,{"inputs":[{"name":"complex"}],"output":{"name":"complex"}}],[11,"fmt","","",8,{"inputs":[{"name":"complex"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"integer","num","Integer trait and functions.",null,null],[5,"div_rem","num::integer","Simultaneous integer division and modulus",null,null],[5,"div_floor","","Floored integer division",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"mod_floor","","Floored integer modulus",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"div_mod_floor","","Simultaneous floored integer division and modulus",null,null],[5,"gcd","","Calculates the Greatest Common Divisor (GCD) of the number and `other`. The\nresult is always positive.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"lcm","","Calculates the Lowest Common Multiple (LCM) of the number and `other`.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[8,"Integer","","",null,null],[10,"div_floor","","Floored integer division.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"mod_floor","","Floored integer modulo, satisfying:",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"gcd","","Greatest Common Divisor (GCD).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"lcm","","Lowest Common Multiple (LCM).",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"self"}}],[10,"divides","","Deprecated, use `is_multiple_of` instead.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_multiple_of","","Returns `true` if `other` is a multiple of `self`.",9,{"inputs":[{"name":"integer"},{"name":"self"}],"output":{"name":"bool"}}],[10,"is_even","","Returns `true` if the number is even.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"is_odd","","Returns `true` if the number is odd.",9,{"inputs":[{"name":"integer"}],"output":{"name":"bool"}}],[10,"div_rem","","Simultaneous truncated integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[11,"div_mod_floor","","Simultaneous floored integer division and modulus.\nReturns `(quotient, remainder)`.",9,null],[0,"iter","num","External iterators for generic mathematics",null,null],[3,"Range","num::iter","An iterator over the range [start, stop)",null,null],[3,"RangeInclusive","","An iterator over the range [start, stop]",null,null],[3,"RangeStep","","An iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,null],[3,"RangeStepInclusive","","An iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,null],[5,"range","","Returns an iterator over the given range [start, stop) (that is, starting\nat start (inclusive), and ending at stop (exclusive)).",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"range"}}],[5,"range_inclusive","","Return an iterator over the range [start, stop]",null,{"inputs":[{"name":"a"},{"name":"a"}],"output":{"name":"rangeinclusive"}}],[5,"range_step","","Return an iterator over the range [start, stop) by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestep"}}],[5,"range_step_inclusive","","Return an iterator over the range [start, stop] by `step`. It handles overflow by stopping.",null,{"inputs":[{"name":"a"},{"name":"a"},{"name":"a"}],"output":{"name":"rangestepinclusive"}}],[11,"clone","","",10,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"next","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",10,null],[11,"next_back","","",10,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"clone","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",11,null],[11,"next_back","","",11,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"clone","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"rangestep"}}],[11,"next","","",12,{"inputs":[{"name":"rangestep"}],"output":{"name":"option"}}],[11,"clone","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"rangestepinclusive"}}],[11,"next","","",13,{"inputs":[{"name":"rangestepinclusive"}],"output":{"name":"option"}}],[0,"traits","num","Numeric traits for generic mathematics",null,null],[3,"ParseFloatError","num::traits","",null,null],[12,"kind","","",14,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",15,null],[13,"Invalid","","",15,null],[5,"cast","","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"Num","","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","Parse error for `from_str_radix`",16,null],[10,"from_str_radix","","Convert from a string and radix <= 36.",16,{"inputs":[{"name":"num"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",17,{"inputs":[{"name":"zero"}],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",17,{"inputs":[{"name":"zero"}],"output":{"name":"bool"}}],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",18,{"inputs":[{"name":"one"}],"output":{"name":"self"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",19,{"inputs":[{"name":"signed"},{"name":"self"}],"output":{"name":"self"}}],[10,"signum","","Returns the sign of the number.",19,{"inputs":[{"name":"signed"}],"output":{"name":"self"}}],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",19,{"inputs":[{"name":"signed"}],"output":{"name":"bool"}}],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[8,"Bounded","","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",20,{"inputs":[{"name":"bounded"}],"output":{"name":"self"}}],[8,"Saturating","","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",21,{"inputs":[{"name":"saturating"},{"name":"self"}],"output":{"name":"self"}}],[8,"CheckedAdd","","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",22,{"inputs":[{"name":"checkedadd"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",23,{"inputs":[{"name":"checkedsub"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",24,{"inputs":[{"name":"checkedmul"},{"name":"self"}],"output":{"name":"option"}}],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",25,{"inputs":[{"name":"checkeddiv"},{"name":"self"}],"output":{"name":"option"}}],[8,"PrimInt","","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",26,{"inputs":[{"name":"primint"}],"output":{"name":"u32"}}],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[10,"swap_bytes","","Reverses the byte order of the integer.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"from_be","","Convert an integer from big endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target's endianness.",26,{"inputs":[{"name":"primint"},{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"to_le","","Convert `self` to little endian from the target's endianness.",26,{"inputs":[{"name":"primint"}],"output":{"name":"self"}}],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",26,{"inputs":[{"name":"primint"},{"name":"u32"}],"output":{"name":"self"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i8","","Converts the value of `self` to an `i8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i16","","Converts the value of `self` to an `i16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_i32","","Converts the value of `self` to an `i32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_i64","","Converts the value of `self` to an `i64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_usize","","Converts the value of `self` to a `usize`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u8","","Converts the value of `self` to an `u8`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u16","","Converts the value of `self` to an `u16`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_u32","","Converts the value of `self` to an `u32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[10,"to_u64","","Converts the value of `self` to an `u64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f32","","Converts the value of `self` to an `f32`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[11,"to_f64","","Converts the value of `self` to an `f64`.",27,{"inputs":[{"name":"toprimitive"}],"output":{"name":"option"}}],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",28,{"inputs":[{"name":"fromprimitive"},{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",29,{"inputs":[{"name":"numcast"},{"name":"t"}],"output":{"name":"option"}}],[8,"Float","","",null,null],[10,"nan","","Returns the `NaN` value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",30,{"inputs":[{"name":"float"}],"output":{"name":"fpcategory"}}],[10,"floor","","Returns the largest integer less than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"trunc","","Return the integer part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"fract","","Returns the fractional part of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"signum","","Returns a number that represents the sign of `self`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",30,{"inputs":[{"name":"float"}],"output":{"name":"bool"}}],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",30,{"inputs":[{"name":"float"},{"name":"self"},{"name":"self"}],"output":{"name":"self"}}],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"powi","","Raise a number to an integer power.",30,{"inputs":[{"name":"float"},{"name":"i32"}],"output":{"name":"self"}}],[10,"powf","","Raise a number to a floating point power.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sqrt","","Take the square root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp","","Returns `e^(self)`, (the exponential function).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"exp2","","Returns `2^(self)`.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln","","Returns the natural logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"log2","","Returns the base 2 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"log10","","Returns the base 10 logarithm of the number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"max","","Returns the maximum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"min","","Returns the minimum of the two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"abs_sub","","The positive difference of two numbers.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"cbrt","","Take the cubic root of a number.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin","","Computes the sine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cos","","Computes the cosine of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tan","","Computes the tangent of a number (in radians).",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",30,{"inputs":[{"name":"float"},{"name":"self"}],"output":{"name":"self"}}],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",30,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"sinh","","Hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"cosh","","Hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"tanh","","Hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"asinh","","Inverse hyperbolic sine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"acosh","","Inverse hyperbolic cosine function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"atanh","","Inverse hyperbolic tangent function.",30,{"inputs":[{"name":"float"}],"output":{"name":"self"}}],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",30,null],[0,"rational","num","Rational numbers",null,null],[3,"Ratio","num::rational","Represents the ratio between 2 numbers.",null,null],[3,"ParseRatioError","","",null,null],[6,"Rational","","Alias for a `Ratio` of machine-sized integers.",null,null],[6,"Rational32","","",null,null],[6,"Rational64","","",null,null],[6,"BigRational","","Alias for arbitrary precision rationals.",null,null],[11,"fmt","","",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","","",31,null],[11,"clone","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"decode","","",31,{"inputs":[{"name":"ratio"},{"name":"__d"}],"output":{"name":"result"}}],[11,"encode","","",31,{"inputs":[{"name":"ratio"},{"name":"__s"}],"output":{"name":"result"}}],[11,"from_integer","","Creates a ratio representing the integer `t`.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new_raw","","Creates a ratio without checking for `denom == 0` or reducing.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"new","","Create a new Ratio. Fails if `denom == 0`.",31,{"inputs":[{"name":"ratio"},{"name":"t"},{"name":"t"}],"output":{"name":"ratio"}}],[11,"to_integer","","Converts to an integer.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"numer","","Gets an immutable reference to the numerator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"denom","","Gets an immutable reference to the denominator.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"t"}}],[11,"is_integer","","Returns true if the rational number is an integer (denominator is 1).",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"reduced","","Returns a `reduce`d copy of self.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"recip","","Returns the reciprocal.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"floor","","Rounds towards minus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"ceil","","Rounds towards plus infinity.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"round","","Rounds to the nearest integer. Rounds half-way cases away from zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"trunc","","Rounds towards zero.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"fract","","Returns the fractional part of a number.",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"pow","","Raises the ratio to the power of an exponent",31,{"inputs":[{"name":"ratio"},{"name":"i32"}],"output":{"name":"ratio"}}],[11,"from_float","","Converts a float into a rational number.",31,{"inputs":[{"name":"ratio"},{"name":"t"}],"output":{"name":"option"}}],[11,"eq","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"lt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"gt","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"le","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"ge","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ordering"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"mul","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"div","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"add","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"rem","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"neg","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_zero","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"one","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"from_str_radix","","Parses `numer/denom` where the numbers are in base `radix`.",31,{"inputs":[{"name":"ratio"},{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"abs","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"abs_sub","","",31,{"inputs":[{"name":"ratio"},{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"signum","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"ratio"}}],[11,"is_positive","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"is_negative","","",31,{"inputs":[{"name":"ratio"}],"output":{"name":"bool"}}],[11,"fmt","","Renders as `numer/denom`. If denom=1, renders as numer.",31,{"inputs":[{"name":"ratio"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","Parses `numer/denom` or just `numer`.",31,{"inputs":[{"name":"ratio"},{"name":"str"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"parseratioerror"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"parseratioerror"}}],[11,"fmt","","",32,{"inputs":[{"name":"parseratioerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",32,{"inputs":[{"name":"parseratioerror"}],"output":{"name":"str"}}]],"paths":[[4,"Sign"],[4,"ParseBigIntError"],[8,"ToBigUint"],[8,"ToBigInt"],[8,"RandBigInt"],[3,"BigUint"],[3,"BigInt"],[3,"RadixFmt"],[3,"Complex"],[8,"Integer"],[3,"Range"],[3,"RangeInclusive"],[3,"RangeStep"],[3,"RangeStepInclusive"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Num"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Bounded"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"PrimInt"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"Float"],[3,"Ratio"],[3,"ParseRatioError"]]};
searchIndex['rustc_serialize'] = {"items":[[0,"","rustc_serialize","Support code for encoding and decoding types.",null,null],[11,"encode","collections::string","",0,{"inputs":[{"name":"string"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",0,{"inputs":[{"name":"string"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,{"inputs":[{"name":"box"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"box"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,{"inputs":[{"name":"rc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",2,{"inputs":[{"name":"rc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,{"inputs":[{"name":"cow"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",3,{"inputs":[{"name":"cow"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,{"inputs":[{"name":"vec"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",4,{"inputs":[{"name":"vec"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,{"inputs":[{"name":"option"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",5,{"inputs":[{"name":"option"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,{"inputs":[{"name":"phantomdata"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",6,{"inputs":[{"name":"phantomdata"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,{"inputs":[{"name":"path"},{"name":"s"}],"output":{"name":"result"}}],[11,"encode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",8,{"inputs":[{"name":"pathbuf"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,{"inputs":[{"name":"cell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",9,{"inputs":[{"name":"cell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,{"inputs":[{"name":"refcell"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",10,{"inputs":[{"name":"refcell"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,{"inputs":[{"name":"arc"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",11,{"inputs":[{"name":"arc"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,{"inputs":[{"name":"linkedlist"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",12,{"inputs":[{"name":"linkedlist"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,{"inputs":[{"name":"vecdeque"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",13,{"inputs":[{"name":"vecdeque"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,{"inputs":[{"name":"btreemap"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",14,{"inputs":[{"name":"btreemap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,{"inputs":[{"name":"btreeset"},{"name":"s"}],"output":{"name":"result"}}],[11,"decode","","",15,{"inputs":[{"name":"btreeset"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",16,{"inputs":[{"name":"hashmap"},{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,{"inputs":[{"name":"hashset"},{"name":"e"}],"output":{"name":"result"}}],[11,"decode","","",17,{"inputs":[{"name":"hashset"},{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,{"inputs":[{"name":"tobase64"},{"name":"config"}],"output":{"name":"string"}}],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,{"inputs":[{"name":"frombase64"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"characterset"}],"output":{"name":"characterset"}}],[11,"clone","","",20,{"inputs":[{"name":"newline"}],"output":{"name":"newline"}}],[11,"clone","","",18,{"inputs":[{"name":"config"}],"output":{"name":"config"}}],[11,"clone","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"frombase64error"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",21,{"inputs":[{"name":"frombase64error"}],"output":{"name":"str"}}],[11,"fmt","","",21,{"inputs":[{"name":"frombase64error"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,{"inputs":[{"name":"tohex"}],"output":{"name":"string"}}],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,{"inputs":[{"name":"fromhex"}],"output":{"name":"result"}}],[11,"clone","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"fromhexerror"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",24,{"inputs":[{"name":"fromhexerror"}],"output":{"name":"str"}}],[11,"fmt","","",24,{"inputs":[{"name":"fromhexerror"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(\"foo\"), Key(\"bar\"), Index(3) and Key(\"x\") are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,{"inputs":[{"name":"tojson"}],"output":{"name":"json"}}],[11,"fmt","","",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"option"}}],[11,"lt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"le","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"gt","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ge","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"eq","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"json"},{"name":"json"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"eq","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"errorcode"},{"name":"errorcode"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"errorcode"}],"output":{"name":"errorcode"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",29,{"inputs":[{"name":"parsererror"},{"name":"parsererror"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"decodererror"},{"name":"decodererror"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"self"}}],[11,"fmt","","",28,{"inputs":[{"name":"errorcode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"description","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"str"}}],[11,"cause","","",30,{"inputs":[{"name":"decodererror"}],"output":{"name":"option"}}],[11,"fmt","","",30,{"inputs":[{"name":"decodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",30,{"inputs":[{"name":"decodererror"},{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,{"inputs":[{"name":"parsererror"}],"output":{"name":"str"}}],[11,"fmt","","",29,{"inputs":[{"name":"parsererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",29,{"inputs":[{"name":"parsererror"},{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,{"inputs":[{"name":"encodererror"}],"output":{"name":"str"}}],[11,"fmt","","",31,{"inputs":[{"name":"encodererror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",31,{"inputs":[{"name":"encodererror"},{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"encoder"},{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[11,"emit_nil","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_usize","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"encoderesult"}}],[11,"emit_u64","","",35,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"encoderesult"}}],[11,"emit_u32","","",35,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"encoderesult"}}],[11,"emit_u16","","",35,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"encoderesult"}}],[11,"emit_u8","","",35,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"encoderesult"}}],[11,"emit_isize","","",35,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"encoderesult"}}],[11,"emit_i64","","",35,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"encoderesult"}}],[11,"emit_i32","","",35,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"encoderesult"}}],[11,"emit_i16","","",35,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"encoderesult"}}],[11,"emit_i8","","",35,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"encoderesult"}}],[11,"emit_bool","","",35,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"encoderesult"}}],[11,"emit_f64","","",35,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"encoderesult"}}],[11,"emit_f32","","",35,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"encoderesult"}}],[11,"emit_char","","",35,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"encoderesult"}}],[11,"emit_str","","",35,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"encoderesult"}}],[11,"emit_enum","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_variant_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_enum_struct_variant_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_struct_field","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct","","",35,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_tuple_struct_arg","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_option_none","","",35,{"inputs":[{"name":"encoder"}],"output":{"name":"encoderesult"}}],[11,"emit_option_some","","",35,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_seq_elt","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_key","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"emit_map_elt_val","","",35,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"encoderesult"}}],[11,"encode","","",27,{"inputs":[{"name":"json"},{"name":"s"}],"output":{"name":"result"}}],[11,"from_reader","","Decodes a json value from an `&mut io::Read`",27,{"inputs":[{"name":"json"},{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,{"inputs":[{"name":"json"}],"output":{"name":"prettyjson"}}],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"option"}}],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"bool"}}],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,{"inputs":[{"name":"json"}],"output":{"name":"option"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"json"}}],[11,"index","","",27,{"inputs":[{"name":"json"},{"name":"usize"}],"output":{"name":"json"}}],[11,"fmt","","",32,{"inputs":[{"name":"jsonevent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"jsonevent"},{"name":"jsonevent"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"stackelement"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"stackelement"}],"output":{"name":"stackelement"}}],[11,"eq","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"stackelement"},{"name":"stackelement"}],"output":{"name":"bool"}}],[11,"new","","",36,{"inputs":[{"name":"stack"}],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,{"inputs":[{"name":"stack"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the stack is empty.",36,{"inputs":[{"name":"stack"}],"output":{"name":"bool"}}],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,{"inputs":[{"name":"stack"},{"name":"usize"}],"output":{"name":"stackelement"}}],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,{"inputs":[{"name":"stack"}],"output":{"name":"option"}}],[11,"next","","",37,{"inputs":[{"name":"parser"}],"output":{"name":"option"}}],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"parser"},{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,{"inputs":[{"name":"parser"}],"output":{"name":"stack"}}],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"builder"},{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,{"inputs":[{"name":"builder"}],"output":{"name":"result"}}],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"decoder"},{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_usize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_u64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_isize","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i8","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i16","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_i64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f32","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_f64","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_bool","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_char","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_str","","",39,{"inputs":[{"name":"decoder"}],"output":{"name":"decoderesult"}}],[11,"read_enum","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_struct_field","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct","","",39,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_tuple_struct_arg","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_option","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_seq_elt","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map","","",39,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_key","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"read_map_elt_val","","",39,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"decoderesult"}}],[11,"error","","",39,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"decodererror"}}],[11,"to_json","","",27,{"inputs":[{"name":"json"}],"output":{"name":"json"}}],[11,"to_json","collections::string","",0,{"inputs":[{"name":"string"}],"output":{"name":"json"}}],[11,"to_json","collections::vec","",4,{"inputs":[{"name":"vec"}],"output":{"name":"json"}}],[11,"to_json","collections::btree::map","",14,{"inputs":[{"name":"btreemap"}],"output":{"name":"json"}}],[11,"to_json","std::collections::hash::map","",16,{"inputs":[{"name":"hashmap"}],"output":{"name":"json"}}],[11,"to_json","core::option","",5,{"inputs":[{"name":"option"}],"output":{"name":"json"}}],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,{"inputs":[{"name":"json"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",40,{"inputs":[{"name":"prettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","Encodes a json value into a string",41,{"inputs":[{"name":"asjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"indent","","Set the indentation level for the emitted JSON",42,{"inputs":[{"name":"asprettyjson"},{"name":"u32"}],"output":{"name":"asprettyjson"}}],[11,"fmt","","Encodes a json value into a string",42,{"inputs":[{"name":"asprettyjson"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_str","","",27,{"inputs":[{"name":"json"},{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_usize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_u8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_isize","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i16","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_i8","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_bool","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f64","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_f32","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_char","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_str","","",43,{"inputs":[{"name":"decoder"}],"output":{"name":"result"}}],[10,"read_enum","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_struct_field","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct","","",43,{"inputs":[{"name":"decoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_tuple_struct_arg","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_option","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_seq_elt","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map","","",43,{"inputs":[{"name":"decoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_key","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"read_map_elt_val","","",43,{"inputs":[{"name":"decoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"error","","",43,{"inputs":[{"name":"decoder"},{"name":"str"}],"output":{"name":"error"}}],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_usize","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"}],"output":{"name":"result"}}],[10,"emit_u64","","",44,{"inputs":[{"name":"encoder"},{"name":"u64"}],"output":{"name":"result"}}],[10,"emit_u32","","",44,{"inputs":[{"name":"encoder"},{"name":"u32"}],"output":{"name":"result"}}],[10,"emit_u16","","",44,{"inputs":[{"name":"encoder"},{"name":"u16"}],"output":{"name":"result"}}],[10,"emit_u8","","",44,{"inputs":[{"name":"encoder"},{"name":"u8"}],"output":{"name":"result"}}],[10,"emit_isize","","",44,{"inputs":[{"name":"encoder"},{"name":"isize"}],"output":{"name":"result"}}],[10,"emit_i64","","",44,{"inputs":[{"name":"encoder"},{"name":"i64"}],"output":{"name":"result"}}],[10,"emit_i32","","",44,{"inputs":[{"name":"encoder"},{"name":"i32"}],"output":{"name":"result"}}],[10,"emit_i16","","",44,{"inputs":[{"name":"encoder"},{"name":"i16"}],"output":{"name":"result"}}],[10,"emit_i8","","",44,{"inputs":[{"name":"encoder"},{"name":"i8"}],"output":{"name":"result"}}],[10,"emit_bool","","",44,{"inputs":[{"name":"encoder"},{"name":"bool"}],"output":{"name":"result"}}],[10,"emit_f64","","",44,{"inputs":[{"name":"encoder"},{"name":"f64"}],"output":{"name":"result"}}],[10,"emit_f32","","",44,{"inputs":[{"name":"encoder"},{"name":"f32"}],"output":{"name":"result"}}],[10,"emit_char","","",44,{"inputs":[{"name":"encoder"},{"name":"char"}],"output":{"name":"result"}}],[10,"emit_str","","",44,{"inputs":[{"name":"encoder"},{"name":"str"}],"output":{"name":"result"}}],[10,"emit_enum","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_variant_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_enum_struct_variant_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_struct_field","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct","","",44,{"inputs":[{"name":"encoder"},{"name":"str"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_tuple_struct_arg","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_option_none","","",44,{"inputs":[{"name":"encoder"}],"output":{"name":"result"}}],[10,"emit_option_some","","",44,{"inputs":[{"name":"encoder"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_seq_elt","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_key","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[10,"emit_map_elt_val","","",44,{"inputs":[{"name":"encoder"},{"name":"usize"},{"name":"f"}],"output":{"name":"result"}}],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"decodable"},{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,{"inputs":[{"name":"encodable"},{"name":"s"}],"output":{"name":"result"}}],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,{"inputs":[{"name":"decoderhelpers"},{"name":"f"}],"output":{"name":"result"}}],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex['rand'] = {"items":[[0,"","rand","Utilities for random number generation",null,null],[3,"Generator","","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::<i32>()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` & `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",0,null],[12,"item","","The actual item which is being weighted",0,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low < high`, so this\nfunction doesn't have to repeat the check.",1,{"inputs":[{"name":"samplerange"},{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",1,{"inputs":[{"name":"samplerange"},{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",2,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low >= high`.",2,{"inputs":[{"name":"range"},{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",2,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"sup"}}],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",3,{"inputs":[{"name":"gamma"}],"output":{"name":"gamma"}}],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",3,{"inputs":[{"name":"gamma"},{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",3,{"inputs":[{"name":"gamma"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",4,{"inputs":[{"name":"chisquared"}],"output":{"name":"chisquared"}}],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k < 0`.",4,{"inputs":[{"name":"chisquared"},{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",4,{"inputs":[{"name":"chisquared"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",5,{"inputs":[{"name":"fisherf"}],"output":{"name":"fisherf"}}],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",5,{"inputs":[{"name":"fisherf"},{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",5,{"inputs":[{"name":"fisherf"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",6,{"inputs":[{"name":"studentt"}],"output":{"name":"studentt"}}],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n <= 0`.",6,{"inputs":[{"name":"studentt"},{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",6,{"inputs":[{"name":"studentt"},{"name":"r"}],"output":{"name":"f64"}}],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",7,{"inputs":[{"name":"standardnormal"}],"output":{"name":"standardnormal"}}],[11,"rand","","",7,{"inputs":[{"name":"standardnormal"},{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",8,{"inputs":[{"name":"normal"}],"output":{"name":"normal"}}],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",8,{"inputs":[{"name":"normal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",8,{"inputs":[{"name":"normal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"clone","","",9,{"inputs":[{"name":"lognormal"}],"output":{"name":"lognormal"}}],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",9,{"inputs":[{"name":"lognormal"},{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",9,{"inputs":[{"name":"lognormal"},{"name":"r"}],"output":{"name":"f64"}}],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",10,{"inputs":[{"name":"exp1"}],"output":{"name":"exp1"}}],[11,"rand","","",10,{"inputs":[{"name":"exp1"},{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",11,{"inputs":[{"name":"exp"}],"output":{"name":"exp"}}],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda <= 0`.",11,{"inputs":[{"name":"exp"},{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[11,"ind_sample","","",11,{"inputs":[{"name":"exp"},{"name":"r"}],"output":{"name":"f64"}}],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",12,{"inputs":[{"name":"sample"},{"name":"r"}],"output":{"name":"support"}}],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",13,{"inputs":[{"name":"independentsample"},{"name":"r"}],"output":{"name":"support"}}],[11,"clone","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"self"}}],[11,"sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"ind_sample","","",14,{"inputs":[{"name":"randsample"},{"name":"r"}],"output":{"name":"sup"}}],[11,"new","","",14,{"inputs":[{"name":"randsample"}],"output":{"name":"randsample"}}],[11,"clone","","",0,{"inputs":[{"name":"weighted"}],"output":{"name":"weighted"}}],[11,"new","","Create a new `WeightedChoice`.",15,null],[11,"sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[11,"ind_sample","","",15,{"inputs":[{"name":"weightedchoice"},{"name":"r"}],"output":{"name":"t"}}],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"clone","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"isaacrng"}}],[11,"next_u32","","",16,{"inputs":[{"name":"isaacrng"}],"output":{"name":"u32"}}],[11,"reseed","","",16,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",16,null],[11,"rand","","",16,{"inputs":[{"name":"isaacrng"},{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"clone","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"isaac64rng"}}],[11,"next_u32","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u32"}}],[11,"next_u64","","",17,{"inputs":[{"name":"isaac64rng"}],"output":{"name":"u64"}}],[11,"reseed","","",17,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",17,null],[11,"rand","","",17,{"inputs":[{"name":"isaac64rng"},{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",18,{"inputs":[{"name":"chacharng"},{"name":"u64"},{"name":"u64"}],"output":null}],[11,"next_u32","","",18,{"inputs":[{"name":"chacharng"}],"output":{"name":"u32"}}],[11,"reseed","","",18,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",18,null],[11,"rand","","",18,{"inputs":[{"name":"chacharng"},{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",19,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",20,{"inputs":[{"name":"reseeder"},{"name":"r"}],"output":null}],[11,"new","","Create a new `ReseedingRng` with the given parameters.",19,{"inputs":[{"name":"reseedingrng"},{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",19,{"inputs":[{"name":"reseedingrng"}],"output":null}],[11,"next_u32","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",19,{"inputs":[{"name":"reseedingrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",19,null],[11,"clone","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"reseed","","",21,{"inputs":[{"name":"reseedwithdefault"},{"name":"r"}],"output":null}],[11,"default","","",21,{"inputs":[{"name":"reseedwithdefault"}],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",22,{"inputs":[{"name":"open01"},{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",23,{"inputs":[{"name":"closed01"},{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"option"},{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[{"name":"osrng"}],"output":{"name":"result"}}],[11,"next_u32","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",25,{"inputs":[{"name":"osrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"readrng"},{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",26,{"inputs":[{"name":"readrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"rand"},{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u32"}}],[11,"next_u64","","Return the next random u64.",28,{"inputs":[{"name":"rng"}],"output":{"name":"u64"}}],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f32"}}],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,{"inputs":[{"name":"rng"}],"output":{"name":"f64"}}],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,{"inputs":[{"name":"rng"}],"output":{"name":"t"}}],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,{"inputs":[{"name":"rng"}],"output":{"name":"generator"}}],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,{"inputs":[{"name":"rng"},{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,{"inputs":[{"name":"rng"},{"name":"u32"}],"output":{"name":"bool"}}],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,{"inputs":[{"name":"rng"}],"output":{"name":"asciigenerator"}}],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":null}],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seedablerng"},{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,{"inputs":[{"name":"box"}],"output":{"name":"u32"}}],[11,"next_u64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"u64"}}],[11,"next_f32","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f32"}}],[11,"next_f64","","",30,{"inputs":[{"name":"box"}],"output":{"name":"f64"}}],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,{"inputs":[{"name":"generator"}],"output":{"name":"option"}}],[11,"next","","",32,{"inputs":[{"name":"asciigenerator"}],"output":{"name":"option"}}],[11,"clone","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,{"inputs":[{"name":"xorshiftrng"}],"output":{"name":"u32"}}],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"xorshiftrng"},{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"stdrng"}}],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"result"}}],[11,"next_u32","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",34,{"inputs":[{"name":"stdrng"}],"output":{"name":"u64"}}],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"threadrng"}}],[11,"next_u32","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u32"}}],[11,"next_u64","","",35,{"inputs":[{"name":"threadrng"}],"output":{"name":"u64"}}],[11,"fill_bytes","","",35,null]],"paths":[[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[3,"Open01"],[3,"Closed01"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex['assimp_sys'] = {"items":[[0,"","assimp_sys","",null,null],[3,"AiVectorKey","","",null,null],[12,"time","","",0,null],[12,"value","","",0,null],[3,"AiQuatKey","","",null,null],[12,"time","","",1,null],[12,"velue","","",1,null],[3,"AiMeshKey","","",null,null],[12,"time","","",2,null],[12,"value","","",2,null],[3,"AiNodeAnim","","",null,null],[12,"node_name","","",3,null],[12,"num_position_keys","","",3,null],[12,"position_keys","","",3,null],[12,"num_rotation_keys","","",3,null],[12,"rotation_keys","","",3,null],[12,"num_scaling_keys","","",3,null],[12,"scaling_keys","","",3,null],[12,"pre_state","","",3,null],[12,"post_state","","",3,null],[3,"AiMeshAnim","","",null,null],[12,"name","","",4,null],[12,"num_keys","","",4,null],[12,"keys","","",4,null],[3,"AiAnimation","","",null,null],[12,"name","","",5,null],[12,"duration","","",5,null],[12,"ticks_per_second","","",5,null],[12,"num_channels","","",5,null],[12,"channels","","",5,null],[12,"num_mesh_channels","","",5,null],[12,"mesh_channels","","",5,null],[3,"AiCamera","","",null,null],[12,"name","","",6,null],[12,"position","","",6,null],[12,"up","","",6,null],[12,"look_at","","",6,null],[12,"horizontal_fov","","",6,null],[12,"clip_plane_near","","",6,null],[12,"clip_plane_far","","",6,null],[12,"aspect","","",6,null],[3,"AiExportFormatDesc","","",null,null],[12,"id","","",7,null],[12,"description","","",7,null],[12,"file_extension","","",7,null],[3,"AiExportDataBlob","","",null,null],[12,"size","","",8,null],[12,"data","","",8,null],[12,"name","","",8,null],[12,"next","","",8,null],[3,"AiFileIO","","",null,null],[12,"open_proc","","",9,null],[12,"close_proc","","",9,null],[12,"user_data","","",9,null],[3,"AiFile","","",null,null],[12,"read_proc","","",10,null],[12,"write_proc","","",10,null],[12,"tell_proc","","",10,null],[12,"file_size_proc","","",10,null],[12,"seek_proc","","",10,null],[12,"flush_proc","","",10,null],[12,"user_data","","",10,null],[3,"AiLogStream","","",null,null],[12,"callback","","",11,null],[12,"user","","",11,null],[3,"AiPropertyStore","","",null,null],[12,"sentinel","","",12,null],[3,"AiImporterFlags","","",null,null],[3,"AiImporterDesc","","",null,null],[12,"name","","",13,null],[12,"author","","",13,null],[12,"maintainer","","",13,null],[12,"comments","","",13,null],[12,"flags","","",13,null],[12,"min_major","","",13,null],[12,"min_minor","","",13,null],[12,"max_major","","",13,null],[12,"max_minor","","",13,null],[12,"file_extensions","","",13,null],[3,"AiLight","","",null,null],[12,"name","","",14,null],[12,"light_type","","",14,null],[12,"position","","",14,null],[12,"direction","","",14,null],[12,"attenuation_constant","","",14,null],[12,"attenuation_linear","","",14,null],[12,"attenuation_quadratic","","",14,null],[12,"color_diffuse","","",14,null],[12,"color_specular","","",14,null],[12,"color_ambient","","",14,null],[12,"angle_inner_cone","","",14,null],[12,"angle_outer_cone","","",14,null],[3,"AiTextureFlags","","",null,null],[3,"AiUVTransform","","",null,null],[12,"translation","","",15,null],[12,"scaling","","",15,null],[12,"rotation","","",15,null],[3,"AiMaterialProperty","","",null,null],[12,"key","","",16,null],[12,"semantic","","",16,null],[12,"index","","",16,null],[12,"data_length","","",16,null],[12,"property_type","","",16,null],[12,"data","","",16,null],[3,"AiMaterial","","",null,null],[12,"properties","","",17,null],[12,"num_properties","","",17,null],[12,"num_allocated","","",17,null],[3,"AiFace","","",null,null],[12,"num_indices","","",18,null],[12,"indices","","",18,null],[3,"AiVertexWeight","","",null,null],[12,"vertex_id","","",19,null],[12,"weight","","",19,null],[3,"AiBone","","",null,null],[12,"name","","",20,null],[12,"num_weights","","",20,null],[12,"weights","","",20,null],[12,"offset_matrix","","",20,null],[3,"AiPrimitiveType","","",null,null],[3,"AiAnimMesh","","",null,null],[12,"vertices","","",21,null],[12,"normals","","",21,null],[12,"tangents","","",21,null],[12,"bitangents","","",21,null],[12,"colors","","",21,null],[12,"texture_coords","","",21,null],[12,"num_vertices","","",21,null],[3,"AiMesh","","",null,null],[12,"primitive_types","","",22,null],[12,"num_vertices","","",22,null],[12,"num_faces","","",22,null],[12,"vertices","","",22,null],[12,"normals","","",22,null],[12,"tangents","","",22,null],[12,"bitangents","","",22,null],[12,"colors","","",22,null],[12,"texture_coords","","",22,null],[12,"num_uv_components","","",22,null],[12,"faces","","",22,null],[12,"num_bones","","",22,null],[12,"bones","","",22,null],[12,"material_index","","",22,null],[12,"name","","",22,null],[12,"num_anim_meshes","","",22,null],[12,"anim_meshes","","",22,null],[3,"AiMetadataEntry","","",null,null],[12,"data_type","","",23,null],[12,"data","","",23,null],[3,"AiMetadata","","",null,null],[12,"num_properties","","",24,null],[12,"keys","","",24,null],[12,"values","","",24,null],[3,"AiPostProcessSteps","","",null,null],[3,"AiNode","","",null,null],[12,"name","","",25,null],[12,"transformation","","",25,null],[12,"parent","","",25,null],[12,"num_children","","",25,null],[12,"children","","",25,null],[12,"num_meshes","","",25,null],[12,"meshes","","",25,null],[12,"metadata","","",25,null],[3,"AiSceneFlags","","",null,null],[3,"AiScene","","",null,null],[12,"flags","","",26,null],[12,"root_node","","",26,null],[12,"num_meshes","","",26,null],[12,"meshes","","",26,null],[12,"num_materials","","",26,null],[12,"materials","","",26,null],[12,"num_animations","","",26,null],[12,"animations","","",26,null],[12,"num_textures","","",26,null],[12,"textures","","",26,null],[12,"num_lights","","",26,null],[12,"lights","","",26,null],[12,"num_cameras","","",26,null],[12,"cameras","","",26,null],[3,"AiTexel","","",null,null],[12,"b","","",27,null],[12,"g","","",27,null],[12,"r","","",27,null],[12,"a","","",27,null],[3,"AiTexture","","",null,null],[12,"width","","",28,null],[12,"height","","",28,null],[12,"format_hint","","",28,null],[12,"data","","",28,null],[3,"AiColor3D","","",null,null],[12,"r","","",29,null],[12,"g","","",29,null],[12,"b","","",29,null],[3,"AiColor4D","","",null,null],[12,"r","","",30,null],[12,"g","","",30,null],[12,"b","","",30,null],[12,"a","","",30,null],[3,"AiMatrix3x3","","",null,null],[12,"a1","","",31,null],[12,"a2","","",31,null],[12,"a3","","",31,null],[12,"b1","","",31,null],[12,"b2","","",31,null],[12,"b3","","",31,null],[12,"c1","","",31,null],[12,"c2","","",31,null],[12,"c3","","",31,null],[3,"AiMatrix4x4","","",null,null],[12,"a1","","",32,null],[12,"a2","","",32,null],[12,"a3","","",32,null],[12,"a4","","",32,null],[12,"b1","","",32,null],[12,"b2","","",32,null],[12,"b3","","",32,null],[12,"b4","","",32,null],[12,"c1","","",32,null],[12,"c2","","",32,null],[12,"c3","","",32,null],[12,"c4","","",32,null],[12,"d1","","",32,null],[12,"d2","","",32,null],[12,"d3","","",32,null],[12,"d4","","",32,null],[3,"AiQuaternion","","",null,null],[12,"w","","",33,null],[12,"x","","",33,null],[12,"y","","",33,null],[12,"z","","",33,null],[3,"AiString","","",null,null],[12,"length","","",34,null],[12,"data","","",34,null],[3,"AiVector2D","","",null,null],[12,"x","","",35,null],[12,"y","","",35,null],[3,"AiVector3D","","",null,null],[12,"x","","",36,null],[12,"y","","",36,null],[12,"z","","",36,null],[3,"AiPlane","","",null,null],[12,"a","","",37,null],[12,"b","","",37,null],[12,"c","","",37,null],[12,"d","","",37,null],[3,"AiRay","","",null,null],[12,"pos","","",38,null],[12,"dir","","",38,null],[3,"AiMemoryInfo","","",null,null],[12,"textures","","",39,null],[12,"materials","","",39,null],[12,"meshes","","",39,null],[12,"nodes","","",39,null],[12,"animations","","",39,null],[12,"cameras","","",39,null],[12,"lights","","",39,null],[12,"total","","",39,null],[3,"AiCompileFlags","","",null,null],[4,"AiAnimBehaviour","","",null,null],[13,"Default","","",40,null],[13,"Constant","","",40,null],[13,"Linear","","",40,null],[13,"Repeat","","",40,null],[4,"AiLightSourceType","","",null,null],[13,"Undefined","","",41,null],[13,"Directional","","",41,null],[13,"Point","","",41,null],[13,"Spot","","",41,null],[13,"Ambient","","",41,null],[4,"AiTextureOp","","",null,null],[13,"Multiply","","",42,null],[13,"Add","","",42,null],[13,"Subtract","","",42,null],[13,"Divide","","",42,null],[13,"SmoothAdd","","",42,null],[13,"SignedAdd","","",42,null],[4,"AiTextureMapMode","","",null,null],[13,"Wrap","","",43,null],[13,"Clamp","","",43,null],[13,"Mirror","","",43,null],[13,"Decal","","",43,null],[4,"AiTextureMapping","","",null,null],[13,"UV","","",44,null],[13,"Sphere","","",44,null],[13,"Cylinder","","",44,null],[13,"Box","","",44,null],[13,"Plane","","",44,null],[13,"Other","","",44,null],[4,"AiTextureType","","",null,null],[13,"None","","",45,null],[13,"Diffuse","","",45,null],[13,"Specular","","",45,null],[13,"Ambient","","",45,null],[13,"Emissive","","",45,null],[13,"Height","","",45,null],[13,"Normals","","",45,null],[13,"Shininess","","",45,null],[13,"Opacity","","",45,null],[13,"Displacement","","",45,null],[13,"Lightmap","","",45,null],[13,"Reflection","","",45,null],[13,"Unknown","","",45,null],[4,"AiShadingMode","","",null,null],[13,"Flat","","",46,null],[13,"Gouraud","","",46,null],[13,"Phong","","",46,null],[13,"Blinn","","",46,null],[13,"Toon","","",46,null],[13,"OrenNayar","","",46,null],[13,"Minnaert","","",46,null],[13,"CookTorrance","","",46,null],[13,"NoShading","","",46,null],[13,"Fresnel","","",46,null],[4,"AiBlendMode","","",null,null],[13,"Default","","",47,null],[13,"Additive","","",47,null],[4,"AiPropertyTypeInfo","","",null,null],[13,"Float","","",48,null],[13,"String","","",48,null],[13,"Integer","","",48,null],[13,"Buffer","","",48,null],[4,"AiMetadataType","","",null,null],[13,"Bool","","",49,null],[13,"Int","","",49,null],[13,"Uint64","","",49,null],[13,"Float","","",49,null],[13,"AiString","","",49,null],[13,"AiVector3D","","",49,null],[4,"AiReturn","","",null,null],[13,"Success","","",50,null],[13,"Failure","","",50,null],[13,"OutOfMemory","","",50,null],[4,"AiOrigin","","",null,null],[13,"Set","","",51,null],[13,"Cur","","",51,null],[13,"End","","",51,null],[4,"AiDefaultLogStream","","",null,null],[13,"File","","",52,null],[13,"StdOut","","",52,null],[13,"StdErr","","",52,null],[13,"Debugger","","",52,null],[5,"aiGetExportFormatCount","","",null,null],[5,"aiGetExportFormatDescription","","",null,null],[5,"aiCopyScene","","",null,null],[5,"aiFreeScene","","",null,null],[5,"aiExportScene","","",null,null],[5,"aiExportSceneEx","","",null,null],[5,"aiExportSceneToBlob","","",null,null],[5,"aiReleaseExportBlob","","",null,null],[5,"aiImportFile","","",null,null],[5,"aiImportFileEx","","",null,null],[5,"aiImportFileExWithProperties","","",null,null],[5,"aiImportFileFromMemory","","",null,null],[5,"aiImportFileFromMemoryWithProperties","","",null,null],[5,"aiApplyPostProcessing","","",null,null],[5,"aiGetPredefinedLogStream","","",null,null],[5,"aiAttachLogStream","","",null,null],[5,"aiEnableVerboseLogging","","",null,null],[5,"aiDetachLogStream","","",null,null],[5,"aiDetachAllLogStreams","","",null,null],[5,"aiReleaseImport","","",null,null],[5,"aiGetErrorString","","",null,null],[5,"aiIsExtensionSupported","","",null,null],[5,"aiGetExtensionList","","",null,null],[5,"aiGetMemoryRequirements","","",null,null],[5,"aiCreatePropertyStore","","",null,null],[5,"aiReleasePropertyStore","","",null,null],[5,"aiSetImportPropertyInteger","","",null,null],[5,"aiSetImportPropertyFloat","","",null,null],[5,"aiSetImportPropertyString","","",null,null],[5,"aiSetImportPropertyMatrix","","",null,null],[5,"aiCreateQuaternionFromMatrix","","",null,null],[5,"aiDecomposeMatrix","","",null,null],[5,"aiTransposeMatrix4","","",null,null],[5,"aiTransposeMatrix3","","",null,null],[5,"aiTransformVecByMatrix3","","",null,null],[5,"aiTransformVecByMatrix4","","",null,null],[5,"aiMultiplyMatrix4","","",null,null],[5,"aiMultiplyMatrix3","","",null,null],[5,"aiIdentityMatrix3","","",null,null],[5,"aiIdentityMatrix4","","",null,null],[5,"aiGetImportFormatCount","","",null,null],[5,"aiGetImportFormatDescription","","",null,null],[5,"aiGetImporterDesc","","",null,null],[5,"aiGetMaterialProperty","","",null,null],[5,"aiGetMaterialFloatArray","","",null,null],[5,"aiGetMaterialIntegerArray","","",null,null],[5,"aiGetMaterialColor","","",null,null],[5,"aiGetMaterialUVTransform","","",null,null],[5,"aiGetMaterialString","","",null,null],[5,"aiGetMaterialTextureCount","","",null,null],[5,"aiGetMaterialTexture","","",null,null],[5,"aiGetLegalString","","",null,null],[5,"aiGetVersionMinor","","",null,null],[5,"aiGetVersionMajor","","",null,null],[5,"aiGetVersionRevision","","",null,null],[5,"aiGetCompileFlags","","",null,null],[11,"fmt","","",0,{"inputs":[{"name":"aivectorkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",0,{"inputs":[{"name":"aivectorkey"}],"output":{"name":"aivectorkey"}}],[11,"fmt","","",1,{"inputs":[{"name":"aiquatkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",1,{"inputs":[{"name":"aiquatkey"}],"output":{"name":"aiquatkey"}}],[11,"fmt","","",2,{"inputs":[{"name":"aimeshkey"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",2,{"inputs":[{"name":"aimeshkey"}],"output":{"name":"aimeshkey"}}],[11,"eq","","",40,{"inputs":[{"name":"aianimbehaviour"},{"name":"aianimbehaviour"}],"output":{"name":"bool"}}],[11,"ne","","",40,{"inputs":[{"name":"aianimbehaviour"},{"name":"aianimbehaviour"}],"output":{"name":"bool"}}],[11,"fmt","","",40,{"inputs":[{"name":"aianimbehaviour"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",40,{"inputs":[{"name":"aianimbehaviour"}],"output":{"name":"aianimbehaviour"}}],[11,"fmt","","",6,{"inputs":[{"name":"aicamera"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",6,{"inputs":[{"name":"aicamera"}],"output":{"name":"aicamera"}}],[11,"fmt","","",12,{"inputs":[{"name":"aipropertystore"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",12,{"inputs":[{"name":"aipropertystore"}],"output":{"name":"aipropertystore"}}],[0,"config","","",null,null],[3,"AiComponent","assimp_sys::config","",null,null],[3,"AiUVTransformFlags","","",null,null],[17,"AI_SBBC_DEFAULT_MAX_BONES","","",null,null],[17,"AI_SLM_DEFAULT_MAX_TRIANGLES","","",null,null],[17,"AI_SLM_DEFAULT_MAX_VERTICES","","",null,null],[17,"AI_LMW_MAX_WEIGHTS","","",null,null],[17,"AI_DEBONE_THRESHOLD","","",null,null],[17,"PP_ICL_DEFAULT_PTCACHE_SIZE","","",null,null],[17,"GLOB_MEASURE_TIME","","",null,null],[17,"IMPORT_NO_SKELETON_MESHES","","",null,null],[17,"GLOB_MULTITHREADING","","",null,null],[17,"PP_SBBC_MAX_BONES","","",null,null],[17,"PP_CT_MAX_SMOOTHING_ANGLE","","",null,null],[17,"PP_CT_TEXTURE_CHANNEL_INDEX","","",null,null],[17,"PP_GSN_MAX_SMOOTHING_ANGLE","","",null,null],[17,"IMPORT_MDL_COLORMAP","","",null,null],[17,"PP_RRM_EXCLUDE_LIST","","",null,null],[17,"PP_PTV_KEEP_HIERARCHY","","",null,null],[17,"PP_PTV_NORMALIZE","","",null,null],[17,"PP_PTV_ADD_ROOT_TRANSFORMATION","","",null,null],[17,"PP_PTV_ROOT_TRANSFORMATION","","",null,null],[17,"PP_FD_REMOVE","","",null,null],[17,"PP_OG_EXCLUDE_LIST","","",null,null],[17,"PP_SLM_TRIANGLE_LIMIT","","",null,null],[17,"PP_SLM_VERTEX_LIMIT","","",null,null],[17,"PP_LBW_MAX_WEIGHTS","","",null,null],[17,"PP_DB_THRESHOLD","","",null,null],[17,"PP_DB_ALL_OR_NONE","","",null,null],[17,"PP_ICL_PTCACHE_SIZE","","",null,null],[17,"PP_RVC_FLAGS","","",null,null],[17,"PP_SBP_REMOVE","","",null,null],[17,"PP_FID_ANIM_ACCURACY","","",null,null],[17,"PP_TUV_EVALUATE","","",null,null],[17,"FAVOUR_SPEED","","",null,null],[17,"IMPORT_FBX_READ_ALL_GEOMETRY_LAYERS","","",null,null],[17,"IMPORT_FBX_READ_ALL_MATERIALS","","",null,null],[17,"IMPORT_FBX_READ_MATERIALS","","",null,null],[17,"IMPORT_FBX_READ_CAMERAS","","",null,null],[17,"IMPORT_FBX_READ_LIGHTS","","",null,null],[17,"IMPORT_FBX_READ_ANIMATIONS","","",null,null],[17,"IMPORT_FBX_STRICT_MODE","","",null,null],[17,"IMPORT_FBX_PRESERVE_PIVOTS","","",null,null],[17,"IMPORT_FBX_OPTIMIZE_EMPTY_ANIMATION_CURVES","","",null,null],[17,"IMPORT_GLOBAL_KEYFRAME","","",null,null],[17,"IMPORT_MD3_KEYFRAME","","",null,null],[17,"IMPORT_MD2_KEYFRAME","","",null,null],[17,"IMPORT_MDL_KEYFRAME","","",null,null],[17,"IMPORT_MDC_KEYFRAME","","",null,null],[17,"IMPORT_SMD_KEYFRAME","","",null,null],[17,"IMPORT_UNREAL_KEYFRAME","","",null,null],[17,"IMPORT_AC_SEPARATE_BFCULL","","",null,null],[17,"IMPORT_AC_EVAL_SUBDIVISION","","",null,null],[17,"UNREAL_HANDLE_FLAGS","","",null,null],[17,"IMPORT_TER_MAKE_UVS","","",null,null],[17,"IMPORT_ASE_RECONSTRUCT_NORMALS","","",null,null],[17,"IMPORT_MD3_HANDLE_MULTIPART","","",null,null],[17,"IMPORT_MD3_SKIN_NAME","","",null,null],[17,"IMPORT_MD3_SHADER_SRC","","",null,null],[17,"IMPORT_LWO_ONE_LAYER_ONLY","","",null,null],[17,"IMPORT_MD5_NO_ANIM_AUTOLOAD","","",null,null],[17,"IMPORT_LWS_ANIM_START","","",null,null],[17,"IMPORT_LWS_ANIM_END","","",null,null],[17,"IMPORT_IRR_ANIM_FPS","","",null,null],[17,"IMPORT_OGRE_MATERIAL_FILE","","",null,null],[17,"IMPORT_OGRE_TEXTURETYPE_FROM_FILENAME","","",null,null],[17,"IMPORT_IFC_SKIP_SPACE_REPRESENTATIONS","","",null,null],[17,"IMPORT_IFC_SKIP_CURVE_REPRESENTATIONS","","",null,null],[17,"IMPORT_IFC_CUSTOM_TRIANGULATION","","",null,null],[17,"IMPORT_COLLADA_IGNORE_UP_DIRECTION","","",null,null],[17,"IMPORT_COLLADA_INVERT_TRANSPARENCY","","",null,null],[17,"EXPORT_XFILE_64BIT","","",null,null],[17,"AICOMPONENT_NORMALS","","",null,null],[17,"AICOMPONENT_TANGENTS_AND_BITANGENTS","","",null,null],[17,"AICOMPONENT_COLORS","","",null,null],[17,"AICOMPONENT_TEXCOORDS","","",null,null],[17,"AICOMPONENT_BONE_WEIGHTS","","",null,null],[17,"AICOMPONENT_ANIMATIONS","","",null,null],[17,"AICOMPONENT_TEXTURES","","",null,null],[17,"AICOMPONENT_LIGHTS","","",null,null],[17,"AICOMPONENT_CAMERAS","","",null,null],[17,"AICOMPONENT_MESHES","","",null,null],[17,"AICOMPONENT_MATERIALS","","",null,null],[17,"AI_UVTRAFO_SCALING","","",null,null],[17,"AI_UVTRAFO_ROTATION","","",null,null],[17,"AI_UVTRAFO_TRANSLATION","","",null,null],[17,"AI_UVTRAFO_ALL","","",null,null],[11,"hash","","",53,null],[11,"cmp","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"option"}}],[11,"lt","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"le","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"gt","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ge","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"clone","","",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"eq","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"ne","","",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"fmt","","",53,{"inputs":[{"name":"aicomponent"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"all","","Returns the set containing all flags.",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bits","","Returns the raw value of the flags currently stored.",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",53,{"inputs":[{"name":"aicomponent"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",53,{"inputs":[{"name":"aicomponent"},{"name":"c_uint"}],"output":{"name":"aicomponent"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"sub","","Returns the set difference of the two sets of flags.",53,{"inputs":[{"name":"aicomponent"},{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"not","","Returns the complement of this set of flags.",53,{"inputs":[{"name":"aicomponent"}],"output":{"name":"aicomponent"}}],[11,"from_iter","","",53,{"inputs":[{"name":"aicomponent"},{"name":"t"}],"output":{"name":"aicomponent"}}],[11,"hash","","",54,null],[11,"cmp","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"option"}}],[11,"lt","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"le","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"gt","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ge","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"clone","","",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"eq","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"ne","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"fmt","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"all","","Returns the set containing all flags.",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"c_uint"}],"output":{"name":"aiuvtransformflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"not","","Returns the complement of this set of flags.",54,{"inputs":[{"name":"aiuvtransformflags"}],"output":{"name":"aiuvtransformflags"}}],[11,"from_iter","","",54,{"inputs":[{"name":"aiuvtransformflags"},{"name":"t"}],"output":{"name":"aiuvtransformflags"}}],[11,"hash","assimp_sys","",55,null],[11,"cmp","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"option"}}],[11,"lt","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"le","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"gt","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ge","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"clone","","",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"eq","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"ne","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"fmt","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"all","","Returns the set containing all flags.",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"c_uint"}],"output":{"name":"aiimporterflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",55,{"inputs":[{"name":"aiimporterflags"},{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"not","","Returns the complement of this set of flags.",55,{"inputs":[{"name":"aiimporterflags"}],"output":{"name":"aiimporterflags"}}],[11,"from_iter","","",55,{"inputs":[{"name":"aiimporterflags"},{"name":"t"}],"output":{"name":"aiimporterflags"}}],[11,"eq","","",41,{"inputs":[{"name":"ailightsourcetype"},{"name":"ailightsourcetype"}],"output":{"name":"bool"}}],[11,"ne","","",41,{"inputs":[{"name":"ailightsourcetype"},{"name":"ailightsourcetype"}],"output":{"name":"bool"}}],[11,"fmt","","",41,{"inputs":[{"name":"ailightsourcetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",41,{"inputs":[{"name":"ailightsourcetype"}],"output":{"name":"ailightsourcetype"}}],[11,"fmt","","",14,{"inputs":[{"name":"ailight"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"ailight"}],"output":{"name":"ailight"}}],[11,"eq","","",42,{"inputs":[{"name":"aitextureop"},{"name":"aitextureop"}],"output":{"name":"bool"}}],[11,"ne","","",42,{"inputs":[{"name":"aitextureop"},{"name":"aitextureop"}],"output":{"name":"bool"}}],[11,"fmt","","",42,{"inputs":[{"name":"aitextureop"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",42,{"inputs":[{"name":"aitextureop"}],"output":{"name":"aitextureop"}}],[11,"eq","","",43,{"inputs":[{"name":"aitexturemapmode"},{"name":"aitexturemapmode"}],"output":{"name":"bool"}}],[11,"ne","","",43,{"inputs":[{"name":"aitexturemapmode"},{"name":"aitexturemapmode"}],"output":{"name":"bool"}}],[11,"fmt","","",43,{"inputs":[{"name":"aitexturemapmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",43,{"inputs":[{"name":"aitexturemapmode"}],"output":{"name":"aitexturemapmode"}}],[11,"eq","","",44,{"inputs":[{"name":"aitexturemapping"},{"name":"aitexturemapping"}],"output":{"name":"bool"}}],[11,"ne","","",44,{"inputs":[{"name":"aitexturemapping"},{"name":"aitexturemapping"}],"output":{"name":"bool"}}],[11,"fmt","","",44,{"inputs":[{"name":"aitexturemapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",44,{"inputs":[{"name":"aitexturemapping"}],"output":{"name":"aitexturemapping"}}],[11,"eq","","",45,{"inputs":[{"name":"aitexturetype"},{"name":"aitexturetype"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"aitexturetype"},{"name":"aitexturetype"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"aitexturetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",45,{"inputs":[{"name":"aitexturetype"}],"output":{"name":"aitexturetype"}}],[11,"eq","","",46,{"inputs":[{"name":"aishadingmode"},{"name":"aishadingmode"}],"output":{"name":"bool"}}],[11,"ne","","",46,{"inputs":[{"name":"aishadingmode"},{"name":"aishadingmode"}],"output":{"name":"bool"}}],[11,"fmt","","",46,{"inputs":[{"name":"aishadingmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",46,{"inputs":[{"name":"aishadingmode"}],"output":{"name":"aishadingmode"}}],[11,"hash","","",56,null],[11,"cmp","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"option"}}],[11,"lt","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"le","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"gt","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ge","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"clone","","",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"eq","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"ne","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"fmt","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"all","","Returns the set containing all flags.",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",56,{"inputs":[{"name":"aitextureflags"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",56,{"inputs":[{"name":"aitextureflags"},{"name":"c_uint"}],"output":{"name":"aitextureflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",56,{"inputs":[{"name":"aitextureflags"},{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"not","","Returns the complement of this set of flags.",56,{"inputs":[{"name":"aitextureflags"}],"output":{"name":"aitextureflags"}}],[11,"from_iter","","",56,{"inputs":[{"name":"aitextureflags"},{"name":"t"}],"output":{"name":"aitextureflags"}}],[11,"eq","","",47,{"inputs":[{"name":"aiblendmode"},{"name":"aiblendmode"}],"output":{"name":"bool"}}],[11,"ne","","",47,{"inputs":[{"name":"aiblendmode"},{"name":"aiblendmode"}],"output":{"name":"bool"}}],[11,"fmt","","",47,{"inputs":[{"name":"aiblendmode"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",47,{"inputs":[{"name":"aiblendmode"}],"output":{"name":"aiblendmode"}}],[11,"fmt","","",15,{"inputs":[{"name":"aiuvtransform"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"aiuvtransform"}],"output":{"name":"aiuvtransform"}}],[11,"eq","","",48,{"inputs":[{"name":"aipropertytypeinfo"},{"name":"aipropertytypeinfo"}],"output":{"name":"bool"}}],[11,"ne","","",48,{"inputs":[{"name":"aipropertytypeinfo"},{"name":"aipropertytypeinfo"}],"output":{"name":"bool"}}],[11,"fmt","","",48,{"inputs":[{"name":"aipropertytypeinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",48,{"inputs":[{"name":"aipropertytypeinfo"}],"output":{"name":"aipropertytypeinfo"}}],[11,"fmt","","",19,{"inputs":[{"name":"aivertexweight"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",19,{"inputs":[{"name":"aivertexweight"}],"output":{"name":"aivertexweight"}}],[11,"hash","","",57,null],[11,"cmp","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"option"}}],[11,"lt","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"le","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"gt","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ge","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"clone","","",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"eq","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"ne","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"fmt","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"all","","Returns the set containing all flags.",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bits","","Returns the raw value of the flags currently stored.",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"c_uint"}],"output":{"name":"aiprimitivetype"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"sub","","Returns the set difference of the two sets of flags.",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"not","","Returns the complement of this set of flags.",57,{"inputs":[{"name":"aiprimitivetype"}],"output":{"name":"aiprimitivetype"}}],[11,"from_iter","","",57,{"inputs":[{"name":"aiprimitivetype"},{"name":"t"}],"output":{"name":"aiprimitivetype"}}],[11,"eq","","",49,{"inputs":[{"name":"aimetadatatype"},{"name":"aimetadatatype"}],"output":{"name":"bool"}}],[11,"ne","","",49,{"inputs":[{"name":"aimetadatatype"},{"name":"aimetadatatype"}],"output":{"name":"bool"}}],[11,"fmt","","",49,{"inputs":[{"name":"aimetadatatype"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",49,{"inputs":[{"name":"aimetadatatype"}],"output":{"name":"aimetadatatype"}}],[11,"hash","","",58,null],[11,"cmp","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"option"}}],[11,"lt","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"le","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"gt","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ge","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"clone","","",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"eq","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"ne","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"fmt","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"all","","Returns the set containing all flags.",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bits","","Returns the raw value of the flags currently stored.",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"c_uint"}],"output":{"name":"aipostprocesssteps"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"sub","","Returns the set difference of the two sets of flags.",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"not","","Returns the complement of this set of flags.",58,{"inputs":[{"name":"aipostprocesssteps"}],"output":{"name":"aipostprocesssteps"}}],[11,"from_iter","","",58,{"inputs":[{"name":"aipostprocesssteps"},{"name":"t"}],"output":{"name":"aipostprocesssteps"}}],[11,"hash","","",59,null],[11,"cmp","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"option"}}],[11,"lt","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"le","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"gt","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ge","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"clone","","",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"eq","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"ne","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"fmt","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"all","","Returns the set containing all flags.",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",59,{"inputs":[{"name":"aisceneflags"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",59,{"inputs":[{"name":"aisceneflags"},{"name":"c_uint"}],"output":{"name":"aisceneflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",59,{"inputs":[{"name":"aisceneflags"},{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"not","","Returns the complement of this set of flags.",59,{"inputs":[{"name":"aisceneflags"}],"output":{"name":"aisceneflags"}}],[11,"from_iter","","",59,{"inputs":[{"name":"aisceneflags"},{"name":"t"}],"output":{"name":"aisceneflags"}}],[11,"fmt","","",27,{"inputs":[{"name":"aitexel"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",27,{"inputs":[{"name":"aitexel"}],"output":{"name":"aitexel"}}],[11,"eq","","",29,{"inputs":[{"name":"aicolor3d"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"aicolor3d"},{"name":"aicolor3d"}],"output":{"name":"bool"}}],[11,"fmt","","",29,{"inputs":[{"name":"aicolor3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",29,{"inputs":[{"name":"aicolor3d"}],"output":{"name":"aicolor3d"}}],[11,"eq","","",30,{"inputs":[{"name":"aicolor4d"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"ne","","",30,{"inputs":[{"name":"aicolor4d"},{"name":"aicolor4d"}],"output":{"name":"bool"}}],[11,"fmt","","",30,{"inputs":[{"name":"aicolor4d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",30,{"inputs":[{"name":"aicolor4d"}],"output":{"name":"aicolor4d"}}],[11,"eq","","",31,{"inputs":[{"name":"aimatrix3x3"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"ne","","",31,{"inputs":[{"name":"aimatrix3x3"},{"name":"aimatrix3x3"}],"output":{"name":"bool"}}],[11,"fmt","","",31,{"inputs":[{"name":"aimatrix3x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",31,{"inputs":[{"name":"aimatrix3x3"}],"output":{"name":"aimatrix3x3"}}],[11,"eq","","",32,{"inputs":[{"name":"aimatrix4x4"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"aimatrix4x4"},{"name":"aimatrix4x4"}],"output":{"name":"bool"}}],[11,"fmt","","",32,{"inputs":[{"name":"aimatrix4x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"aimatrix4x4"}],"output":{"name":"aimatrix4x4"}}],[11,"eq","","",33,{"inputs":[{"name":"aiquaternion"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"aiquaternion"},{"name":"aiquaternion"}],"output":{"name":"bool"}}],[11,"fmt","","",33,{"inputs":[{"name":"aiquaternion"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",33,{"inputs":[{"name":"aiquaternion"}],"output":{"name":"aiquaternion"}}],[11,"default","","",34,{"inputs":[{"name":"aistring"}],"output":{"name":"aistring"}}],[11,"as_ref","","",34,{"inputs":[{"name":"aistring"}],"output":{"name":"str"}}],[11,"from","","",34,{"inputs":[{"name":"aistring"},{"name":"str"}],"output":{"name":"aistring"}}],[11,"clone","","",34,{"inputs":[{"name":"aistring"}],"output":{"name":"aistring"}}],[11,"fmt","","",34,{"inputs":[{"name":"aistring"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"aistring"},{"name":"aistring"}],"output":{"name":"bool"}}],[11,"eq","","",35,{"inputs":[{"name":"aivector2d"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"aivector2d"},{"name":"aivector2d"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"aivector2d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"aivector2d"}],"output":{"name":"aivector2d"}}],[11,"eq","","",36,{"inputs":[{"name":"aivector3d"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"aivector3d"},{"name":"aivector3d"}],"output":{"name":"bool"}}],[11,"fmt","","",36,{"inputs":[{"name":"aivector3d"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",36,{"inputs":[{"name":"aivector3d"}],"output":{"name":"aivector3d"}}],[11,"eq","","",37,{"inputs":[{"name":"aiplane"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"ne","","",37,{"inputs":[{"name":"aiplane"},{"name":"aiplane"}],"output":{"name":"bool"}}],[11,"fmt","","",37,{"inputs":[{"name":"aiplane"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",37,{"inputs":[{"name":"aiplane"}],"output":{"name":"aiplane"}}],[11,"eq","","",38,{"inputs":[{"name":"airay"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"airay"},{"name":"airay"}],"output":{"name":"bool"}}],[11,"fmt","","",38,{"inputs":[{"name":"airay"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",38,{"inputs":[{"name":"airay"}],"output":{"name":"airay"}}],[11,"eq","","",50,{"inputs":[{"name":"aireturn"},{"name":"aireturn"}],"output":{"name":"bool"}}],[11,"ne","","",50,{"inputs":[{"name":"aireturn"},{"name":"aireturn"}],"output":{"name":"bool"}}],[11,"fmt","","",50,{"inputs":[{"name":"aireturn"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",50,{"inputs":[{"name":"aireturn"}],"output":{"name":"aireturn"}}],[11,"eq","","",51,{"inputs":[{"name":"aiorigin"},{"name":"aiorigin"}],"output":{"name":"bool"}}],[11,"ne","","",51,{"inputs":[{"name":"aiorigin"},{"name":"aiorigin"}],"output":{"name":"bool"}}],[11,"fmt","","",51,{"inputs":[{"name":"aiorigin"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",51,{"inputs":[{"name":"aiorigin"}],"output":{"name":"aiorigin"}}],[11,"eq","","",52,{"inputs":[{"name":"aidefaultlogstream"},{"name":"aidefaultlogstream"}],"output":{"name":"bool"}}],[11,"ne","","",52,{"inputs":[{"name":"aidefaultlogstream"},{"name":"aidefaultlogstream"}],"output":{"name":"bool"}}],[11,"fmt","","",52,{"inputs":[{"name":"aidefaultlogstream"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",52,{"inputs":[{"name":"aidefaultlogstream"}],"output":{"name":"aidefaultlogstream"}}],[11,"default","","",39,{"inputs":[{"name":"aimemoryinfo"}],"output":{"name":"aimemoryinfo"}}],[11,"fmt","","",39,{"inputs":[{"name":"aimemoryinfo"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",39,{"inputs":[{"name":"aimemoryinfo"}],"output":{"name":"aimemoryinfo"}}],[11,"hash","","",60,null],[11,"cmp","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"option"}}],[11,"lt","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"le","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"gt","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ge","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"clone","","",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"eq","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"ne","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"fmt","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"empty","","Returns an empty set of flags.",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"all","","Returns the set containing all flags.",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bits","","Returns the raw value of the flags currently stored.",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"c_uint"}}],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",60,{"inputs":[{"name":"aicompileflags"},{"name":"c_uint"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",60,{"inputs":[{"name":"aicompileflags"},{"name":"c_uint"}],"output":{"name":"aicompileflags"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"is_all","","Returns `true` if all flags are currently set.",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"bool"}}],[11,"insert","","Inserts the specified flags in-place.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":null}],[11,"remove","","Removes the specified flags in-place.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":null}],[11,"toggle","","Toggles the specified flags in-place.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":null}],[11,"bitor","","Returns the union of the two sets of flags.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"bitand","","Returns the intersection between the two sets of flags.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"sub","","Returns the set difference of the two sets of flags.",60,{"inputs":[{"name":"aicompileflags"},{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"not","","Returns the complement of this set of flags.",60,{"inputs":[{"name":"aicompileflags"}],"output":{"name":"aicompileflags"}}],[11,"from_iter","","",60,{"inputs":[{"name":"aicompileflags"},{"name":"t"}],"output":{"name":"aicompileflags"}}],[6,"AiFileWriteProc","","",null,null],[6,"AiFileReadProc","","",null,null],[6,"AiFileTellProc","","",null,null],[6,"AiFileFlushProc","","",null,null],[6,"AiFileSeek","","",null,null],[6,"AiFileOpenProc","","",null,null],[6,"AiFileCloseProc","","",null,null],[6,"AiUserData","","",null,null],[6,"AiLogStreamCallback","","",null,null],[6,"AiBool","","",null,null],[7,"AI_DEFAULT_MATERIAL_NAME","","",null,null],[17,"AI_FALSE","","",null,null],[17,"AI_TRUE","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_TEXT_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_BINARY_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_SUPPORT_COMPRESSED_FLAVOUR","","",null,null],[17,"AIIMPORTERFLAG_LIMITED_SUPPORT","","",null,null],[17,"AIIMPORTERFLAG_EXPERIMENTAL","","",null,null],[17,"AITEXTUREFLAG_INVERT","","",null,null],[17,"AITEXTUREFLAG_USE_ALPHA","","",null,null],[17,"AITEXTUREFLAG_IGNORE_ALPHA","","",null,null],[17,"AI_MAX_FACE_INDICES","","",null,null],[17,"AI_MAX_BONE_WEIGHTS","","",null,null],[17,"AI_MAX_VERTICES","","",null,null],[17,"AI_MAX_FACES","","",null,null],[17,"AI_MAX_NUMBER_OF_COLOR_SETS","","",null,null],[17,"AI_MAX_NUMBER_OF_TEXTURECOORDS","","",null,null],[17,"AIPRIMITIVETYPE_POINT","","",null,null],[17,"AIPRIMITIVETYPE_LINE","","",null,null],[17,"AIPRIMITIVETYPE_TRIANGLE","","",null,null],[17,"AIPRIMITIVETYPE_POLYGON","","",null,null],[17,"AIPROCESS_CALC_TANGENT_SPACE","","",null,null],[17,"AIPROCESS_JOIN_IDENTICAL_VERTICES","","",null,null],[17,"AIPROCESS_MAKE_LEFT_HANDED","","",null,null],[17,"AIPROCESS_TRIANGULATE","","",null,null],[17,"AIPROCESS_REMOVE_COMPONENT","","",null,null],[17,"AIPROCESS_GEN_NORMALS","","",null,null],[17,"AIPROCESS_GEN_SMOOTH_NORMALS","","",null,null],[17,"AIPROCESS_SPLIT_LARGE_MESHES","","",null,null],[17,"AIPROCESS_PRE_TRANSFORM_VERTICES","","",null,null],[17,"AIPROCESS_LIMIT_BONE_WEIGHTS","","",null,null],[17,"AIPROCESS_VALIDATE_DATA_STRUCTURE","","",null,null],[17,"AIPROCESS_IMPROVE_CACHE_LOCALITY","","",null,null],[17,"AIPROCESS_REMOVE_REDUNDANT_MATERIALS","","",null,null],[17,"AIPROCESS_FIX_INFACING_NORMALS","","",null,null],[17,"AIPROCESS_SORT_BY_PTYPE","","",null,null],[17,"AIPROCESS_FIND_DEGENERATES","","",null,null],[17,"AIPROCESS_FIND_INVALID_DATA","","",null,null],[17,"AIPROCESS_GEN_UV_COORDS","","",null,null],[17,"AIPROCESS_TRANSFORM_UV_COORDS","","",null,null],[17,"AIPROCESS_FIND_INSTANCES","","",null,null],[17,"AIPROCESS_OPTIMIZE_MESHES","","",null,null],[17,"AIPROCESS_OPTIMIZE_GRAPH","","",null,null],[17,"AIPROCESS_FLIP_UVS","","",null,null],[17,"AIPROCESS_FLIP_WINDING_ORDER","","",null,null],[17,"AIPROCESS_SPLIT_BY_BONE_COUNT","","",null,null],[17,"AIPROCESS_DEBONE","","",null,null],[17,"AIPROCESS_CONVERT_TO_LEFT_HANDED","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_FAST","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_QUALITY","","",null,null],[17,"AIPROCESS_TARGET_REALTIME_MAX_QUALITY","","",null,null],[17,"AI_SCENE_FLAGS_INCOMPLETE","","",null,null],[17,"AI_SCENE_FLAGS_VALIDATED","","",null,null],[17,"AI_SCENE_FLAGS_VALIDATION_WARNING","","",null,null],[17,"AI_SCENE_FLAGS_NON_VERBOSE_FORMAT","","",null,null],[17,"AI_SCENE_FLAGS_TERRAIN","","",null,null],[17,"MAXLEN","","",null,null],[17,"ASSIMP_CFLAGS_SHARED","","",null,null],[17,"ASSIMP_CFLAGS_STLPORT","","",null,null],[17,"ASSIMP_CFLAGS_DEBUG","","",null,null],[17,"ASSIMP_CFLAGS_NOBOOST","","",null,null],[17,"ASSIMP_CFLAGS_SINGLETHREADED","","",null,null]],"paths":[[3,"AiVectorKey"],[3,"AiQuatKey"],[3,"AiMeshKey"],[3,"AiNodeAnim"],[3,"AiMeshAnim"],[3,"AiAnimation"],[3,"AiCamera"],[3,"AiExportFormatDesc"],[3,"AiExportDataBlob"],[3,"AiFileIO"],[3,"AiFile"],[3,"AiLogStream"],[3,"AiPropertyStore"],[3,"AiImporterDesc"],[3,"AiLight"],[3,"AiUVTransform"],[3,"AiMaterialProperty"],[3,"AiMaterial"],[3,"AiFace"],[3,"AiVertexWeight"],[3,"AiBone"],[3,"AiAnimMesh"],[3,"AiMesh"],[3,"AiMetadataEntry"],[3,"AiMetadata"],[3,"AiNode"],[3,"AiScene"],[3,"AiTexel"],[3,"AiTexture"],[3,"AiColor3D"],[3,"AiColor4D"],[3,"AiMatrix3x3"],[3,"AiMatrix4x4"],[3,"AiQuaternion"],[3,"AiString"],[3,"AiVector2D"],[3,"AiVector3D"],[3,"AiPlane"],[3,"AiRay"],[3,"AiMemoryInfo"],[4,"AiAnimBehaviour"],[4,"AiLightSourceType"],[4,"AiTextureOp"],[4,"AiTextureMapMode"],[4,"AiTextureMapping"],[4,"AiTextureType"],[4,"AiShadingMode"],[4,"AiBlendMode"],[4,"AiPropertyTypeInfo"],[4,"AiMetadataType"],[4,"AiReturn"],[4,"AiOrigin"],[4,"AiDefaultLogStream"],[3,"AiComponent"],[3,"AiUVTransformFlags"],[3,"AiImporterFlags"],[3,"AiTextureFlags"],[3,"AiPrimitiveType"],[3,"AiPostProcessSteps"],[3,"AiSceneFlags"],[3,"AiCompileFlags"]]};
searchIndex['libc'] = {"items":[[0,"","libc","Crate docs",null,null],[3,"utimbuf","","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",9,null],[12,"dli_fbase","","",9,null],[12,"dli_sname","","",9,null],[12,"dli_saddr","","",9,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"putenv","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"usleep","","",null,null],[5,"recvfrom","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"mkfifo","","",null,null],[5,"getpwuid_r","","",null,null],[5,"posix_memalign","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"select","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",10,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"is_none","","Returns `true` if the option is a `None` value",10,{"inputs":[{"name":"option"}],"output":{"name":"bool"}}],[11,"as_ref","","Converts from `Option<T>` to `Option<&T>`",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut","","Converts from `Option<T>` to `Option<&mut T>`",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_mut_slice","","Converts from `Option<T>` to `&mut [T]` (without copying)",10,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`",10,{"inputs":[{"name":"option"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap","","Moves the value `v` out of the `Option<T>` if it is `Some(v)`.",10,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"unwrap_or","","Returns the contained value or a default.",10,{"inputs":[{"name":"option"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"t"}}],[11,"map","","Maps an `Option<T>` to `Option<U>` by applying a function to a contained value",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",10,{"inputs":[{"name":"option"},{"name":"u"},{"name":"f"}],"output":{"name":"u"}}],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",10,{"inputs":[{"name":"option"},{"name":"d"},{"name":"f"}],"output":{"name":"u"}}],[11,"ok_or","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",10,{"inputs":[{"name":"option"},{"name":"e"}],"output":{"name":"result"}}],[11,"ok_or_else","","Transforms the `Option<T>` into a `Result<T, E>`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",10,{"inputs":[{"name":"option"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",10,{"inputs":[{"name":"option"}],"output":{"name":"itermut"}}],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",10,{"inputs":[{"name":"option"},{"name":"f"}],"output":{"name":"option"}}],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"as_slice","","Converts from `Option<T>` to `&[T]` (without copying)",10,null],[11,"cloned","","Maps an Option<&T> to an Option<T> by cloning the contents of the Option.",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"unwrap_or_default","","Returns the contained value or a default",10,{"inputs":[{"name":"option"}],"output":{"name":"t"}}],[11,"fmt","core::num","",11,{"inputs":[{"name":"wrapping"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"cmp","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"option"}}],[11,"lt","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"le","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"gt","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ge","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"eq","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"ne","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"bool"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shl","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"shr","","",11,{"inputs":[{"name":"wrapping"},{"name":"usize"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"add","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"sub","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"mul","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"div","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"not","","",11,{"inputs":[{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitxor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitor","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"bitand","","",11,{"inputs":[{"name":"wrapping"},{"name":"wrapping"}],"output":{"name":"wrapping"}}],[11,"from_small","core::num::flt2dec::bignum","Makes a bignum from one digit.",12,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"from_u64","","Makes a bignum from `u64` value.",12,{"inputs":[{"name":"big32x40"},{"name":"u64"}],"output":{"name":"big32x40"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",12,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",12,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",12,{"inputs":[{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",12,{"inputs":[{"name":"big32x40"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"add_small","","",12,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"u32"}],"output":{"name":"big32x40"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",12,{"inputs":[{"name":"big32x40"},{"name":"usize"}],"output":{"name":"big32x40"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",12,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",12,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",12,null],[11,"eq","","",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"option"}}],[11,"cmp","","",12,{"inputs":[{"name":"big32x40"},{"name":"big32x40"}],"output":{"name":"ordering"}}],[11,"clone","","",12,{"inputs":[{"name":"big32x40"}],"output":{"name":"big32x40"}}],[11,"fmt","","",12,{"inputs":[{"name":"big32x40"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from_small","core::num::flt2dec::bignum::tests","Makes a bignum from one digit.",13,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"from_u64","","Makes a bignum from `u64` value.",13,{"inputs":[{"name":"big8x3"},{"name":"u64"}],"output":{"name":"big8x3"}}],[11,"digits","","Return the internal digits as a slice `[a, b, c, ...]` such that the numeric\nvalue is `a + b * 2^W + c * 2^(2W) + ...` where `W` is the number of bits in\nthe digit type.",13,null],[11,"get_bit","","Return the `i`-th bit where bit 0 is the least significant one.\nIn other words, the bit with weight `2^i`.",13,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"u8"}}],[11,"is_zero","","Returns true if the bignum is zero.",13,{"inputs":[{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"bit_length","","Returns the number of bits necessary to represent this value. Note that zero\nis considered to need 0 bits.",13,{"inputs":[{"name":"big8x3"}],"output":{"name":"usize"}}],[11,"add","","Adds `other` to itself and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"add_small","","",13,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"sub","","Subtracts `other` from itself and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"mul_small","","Multiplies itself by a digit-sized `other` and returns its own\nmutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"u8"}],"output":{"name":"big8x3"}}],[11,"mul_pow2","","Multiplies itself by `2^bits` and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_pow5","","Multiplies itself by `5^e` and returns its own mutable reference.",13,{"inputs":[{"name":"big8x3"},{"name":"usize"}],"output":{"name":"big8x3"}}],[11,"mul_digits","","Multiplies itself by a number described by `other[0] + other[1] * 2^W +\nother[2] * 2^(2W) + ...` (where `W` is the number of bits in the digit type)\nand returns its own mutable reference.",13,null],[11,"div_rem_small","","Divides itself by a digit-sized `other` and returns its own\nmutable reference *and* the remainder.",13,null],[11,"div_rem","","Divide self by another bignum, overwriting `q` with the quotient and `r` with the\nremainder.",13,null],[11,"eq","","",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"option"}}],[11,"cmp","","",13,{"inputs":[{"name":"big8x3"},{"name":"big8x3"}],"output":{"name":"ordering"}}],[11,"clone","","",13,{"inputs":[{"name":"big8x3"}],"output":{"name":"big8x3"}}],[11,"fmt","","",13,{"inputs":[{"name":"big8x3"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::flt2dec::decoder","",14,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"ne","","",14,{"inputs":[{"name":"decoded"},{"name":"decoded"}],"output":{"name":"bool"}}],[11,"fmt","","",14,{"inputs":[{"name":"decoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",14,{"inputs":[{"name":"decoded"}],"output":{"name":"decoded"}}],[11,"eq","","",15,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"ne","","",15,{"inputs":[{"name":"fulldecoded"},{"name":"fulldecoded"}],"output":{"name":"bool"}}],[11,"fmt","","",15,{"inputs":[{"name":"fulldecoded"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",15,{"inputs":[{"name":"fulldecoded"}],"output":{"name":"fulldecoded"}}],[11,"fmt","core::num::flt2dec::strategy::grisu","",16,{"inputs":[{"name":"fp"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"mul","","Returns a correctly rounded product of itself and `other`.",16,{"inputs":[{"name":"fp"},{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize","","Normalizes itself so that the resulting mantissa is at least `2^63`.",16,{"inputs":[{"name":"fp"}],"output":{"name":"fp"}}],[11,"normalize_to","","Normalizes itself to have the shared exponent.\nIt can only decrease the exponent (and thus increase the mantissa).",16,{"inputs":[{"name":"fp"},{"name":"i16"}],"output":{"name":"fp"}}],[11,"fmt","core::num::flt2dec","",17,{"inputs":[{"name":"part"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",17,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"ne","","",17,{"inputs":[{"name":"part"},{"name":"part"}],"output":{"name":"bool"}}],[11,"clone","","",17,{"inputs":[{"name":"part"}],"output":{"name":"part"}}],[11,"len","","Returns the exact byte length of given part.",17,{"inputs":[{"name":"part"}],"output":{"name":"usize"}}],[11,"write","","Writes a part into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",17,null],[11,"clone","","",18,{"inputs":[{"name":"formatted"}],"output":{"name":"formatted"}}],[11,"len","","Returns the exact byte length of combined formatted result.",18,{"inputs":[{"name":"formatted"}],"output":{"name":"usize"}}],[11,"write","","Writes all formatted parts into the supplied buffer.\nReturns the number of written bytes, or `None` if the buffer is not enough.\n(It may still leave partially written bytes in the buffer; do not rely on that.)",18,null],[11,"fmt","","",19,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",19,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"ne","","",19,{"inputs":[{"name":"sign"},{"name":"sign"}],"output":{"name":"bool"}}],[11,"clone","","",19,{"inputs":[{"name":"sign"}],"output":{"name":"sign"}}],[11,"fmt","core::num::dec2flt::rawfp","",20,{"inputs":[{"name":"unpacked"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",20,{"inputs":[{"name":"unpacked"}],"output":{"name":"unpacked"}}],[11,"new","","",20,{"inputs":[{"name":"unpacked"},{"name":"u64"},{"name":"i16"}],"output":{"name":"unpacked"}}],[11,"fmt","core::num::dec2flt::parse","",21,{"inputs":[{"name":"sign"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",22,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",22,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"fmt","","",22,{"inputs":[{"name":"decimal"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",22,null],[11,"eq","","",23,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"ne","","",23,{"inputs":[{"name":"parseresult"},{"name":"parseresult"}],"output":{"name":"bool"}}],[11,"fmt","","",23,{"inputs":[{"name":"parseresult"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","core::num::dec2flt","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"ne","","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"parsefloaterror"}],"output":{"name":"bool"}}],[11,"clone","","",24,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parsefloaterror"}}],[11,"fmt","","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",25,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",25,{"inputs":[{"name":"floaterrorkind"},{"name":"floaterrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",25,{"inputs":[{"name":"floaterrorkind"}],"output":{"name":"floaterrorkind"}}],[11,"fmt","","",25,{"inputs":[{"name":"floaterrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",24,{"inputs":[{"name":"parsefloaterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::num","",26,{"inputs":[{"name":"fpcategory"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",26,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"ne","","",26,{"inputs":[{"name":"fpcategory"},{"name":"fpcategory"}],"output":{"name":"bool"}}],[11,"clone","","",26,{"inputs":[{"name":"fpcategory"}],"output":{"name":"fpcategory"}}],[11,"eq","","",27,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"parseinterror"},{"name":"parseinterror"}],"output":{"name":"bool"}}],[11,"clone","","",27,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseinterror"}}],[11,"fmt","","",27,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",28,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"ne","","",28,{"inputs":[{"name":"interrorkind"},{"name":"interrorkind"}],"output":{"name":"bool"}}],[11,"clone","","",28,{"inputs":[{"name":"interrorkind"}],"output":{"name":"interrorkind"}}],[11,"fmt","","",28,{"inputs":[{"name":"interrorkind"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",27,{"inputs":[{"name":"parseinterror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::nonzero","",29,null],[11,"fmt","","",29,{"inputs":[{"name":"nonzero"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"partial_cmp","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"option"}}],[11,"lt","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"le","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"gt","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ge","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"cmp","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"ordering"}}],[11,"eq","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"ne","","",29,{"inputs":[{"name":"nonzero"},{"name":"nonzero"}],"output":{"name":"bool"}}],[11,"clone","","",29,{"inputs":[{"name":"nonzero"}],"output":{"name":"nonzero"}}],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually \"non-zero\".",29,{"inputs":[{"name":"nonzero"},{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",29,{"inputs":[{"name":"nonzero"}],"output":{"name":"t"}}],[11,"new","core::ptr","Creates a new `Unique`.",30,null],[11,"get","","Dereferences the content.",30,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"get_mut","","Mutably dereferences the content.",30,{"inputs":[{"name":"unique"}],"output":{"name":"t"}}],[11,"deref","","",30,null],[11,"fmt","","",30,{"inputs":[{"name":"unique"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"hash","core::marker","",31,null],[11,"eq","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"bool"}}],[11,"partial_cmp","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"option"}}],[11,"cmp","","",31,{"inputs":[{"name":"phantomdata"},{"name":"phantomdata"}],"output":{"name":"ordering"}}],[11,"clone","","",31,{"inputs":[{"name":"phantomdata"}],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",32,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"ne","","",32,{"inputs":[{"name":"rangefull"},{"name":"rangefull"}],"output":{"name":"bool"}}],[11,"clone","","",32,{"inputs":[{"name":"rangefull"}],"output":{"name":"rangefull"}}],[11,"fmt","","",32,{"inputs":[{"name":"rangefull"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",33,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"ne","","",33,{"inputs":[{"name":"range"},{"name":"range"}],"output":{"name":"bool"}}],[11,"clone","","",33,{"inputs":[{"name":"range"}],"output":{"name":"range"}}],[11,"fmt","","",33,{"inputs":[{"name":"range"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",34,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"ne","","",34,{"inputs":[{"name":"rangefrom"},{"name":"rangefrom"}],"output":{"name":"bool"}}],[11,"clone","","",34,{"inputs":[{"name":"rangefrom"}],"output":{"name":"rangefrom"}}],[11,"fmt","","",34,{"inputs":[{"name":"rangefrom"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",35,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"rangeto"},{"name":"rangeto"}],"output":{"name":"bool"}}],[11,"clone","","",35,{"inputs":[{"name":"rangeto"}],"output":{"name":"rangeto"}}],[11,"fmt","","",35,{"inputs":[{"name":"rangeto"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cmp","",36,{"inputs":[{"name":"ordering"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"ne","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"clone","","",36,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"reverse","","Reverse the `Ordering`.",36,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"cmp","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",36,{"inputs":[{"name":"ordering"},{"name":"ordering"}],"output":{"name":"option"}}],[11,"fmt","libc","",37,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",37,{"inputs":[{"name":"any"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is","","Returns true if the boxed type is the same as `T`",37,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn't.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"is","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"any"}],"output":{"name":"bool"}}],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",37,{"inputs":[{"name":"any"}],"output":{"name":"option"}}],[11,"hash","core::any","",38,null],[11,"fmt","","",38,{"inputs":[{"name":"typeid"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",38,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"ne","","",38,{"inputs":[{"name":"typeid"},{"name":"typeid"}],"output":{"name":"bool"}}],[11,"clone","","",38,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",38,{"inputs":[{"name":"typeid"}],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",39,{"inputs":[{"name":"atomicbool"}],"output":{"name":"atomicbool"}}],[11,"default","","",40,{"inputs":[{"name":"atomicisize"}],"output":{"name":"atomicisize"}}],[11,"default","","",41,{"inputs":[{"name":"atomicusize"}],"output":{"name":"atomicusize"}}],[11,"default","","",42,{"inputs":[{"name":"atomicptr"}],"output":{"name":"atomicptr"}}],[11,"clone","","",43,{"inputs":[{"name":"ordering"}],"output":{"name":"ordering"}}],[11,"new","","Creates a new `AtomicBool`.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",39,{"inputs":[{"name":"atomicbool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"store","","Stores a value into the bool.",39,null],[11,"swap","","Stores a value into the bool, returning the old value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_and","","Logical \"and\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_nand","","Logical \"nand\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_or","","Logical \"or\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"fetch_xor","","Logical \"xor\" with a boolean value.",39,{"inputs":[{"name":"atomicbool"},{"name":"bool"},{"name":"ordering"}],"output":{"name":"bool"}}],[11,"new","","Creates a new `AtomicIsize`.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the isize.",40,{"inputs":[{"name":"atomicisize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"store","","Stores a value into the isize.",40,null],[11,"swap","","Stores a value into the isize, returning the old value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"compare_and_swap","","Stores a value into the `isize` if the current value is the same as the `current` value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_add","","Add an isize to the current value, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_sub","","Subtract an isize from the current value, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_and","","Bitwise and with the current isize, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_or","","Bitwise or with the current isize, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"fetch_xor","","Bitwise xor with the current isize, returning the previous value.",40,{"inputs":[{"name":"atomicisize"},{"name":"isize"},{"name":"ordering"}],"output":{"name":"isize"}}],[11,"new","","Creates a new `AtomicUsize`.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the usize.",41,{"inputs":[{"name":"atomicusize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"store","","Stores a value into the usize.",41,null],[11,"swap","","Stores a value into the usize, returning the old value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"compare_and_swap","","Stores a value into the `usize` if the current value is the same as the `current` value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_add","","Add to the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_sub","","Subtract from the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_and","","Bitwise and with the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_or","","Bitwise or with the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"fetch_xor","","Bitwise xor with the current usize, returning the previous value.",41,{"inputs":[{"name":"atomicusize"},{"name":"usize"},{"name":"ordering"}],"output":{"name":"usize"}}],[11,"new","","Creates a new `AtomicPtr`.",42,null],[11,"load","","Loads a value from the pointer.",42,null],[11,"store","","Stores a value into the pointer.",42,null],[11,"swap","","Stores a value into the pointer, returning the old value.",42,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",42,null],[11,"fmt","","",41,{"inputs":[{"name":"atomicusize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",40,{"inputs":[{"name":"atomicisize"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",39,{"inputs":[{"name":"atomicbool"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",42,{"inputs":[{"name":"atomicptr"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","core::cell","Creates a new `Cell` containing the given value.",44,{"inputs":[{"name":"cell"},{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",44,{"inputs":[{"name":"cell"}],"output":{"name":"t"}}],[11,"set","","Sets the contained value.",44,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",44,{"inputs":[{"name":"cell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",44,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"default","","",44,{"inputs":[{"name":"cell"}],"output":{"name":"cell"}}],[11,"eq","","",44,{"inputs":[{"name":"cell"},{"name":"cell"}],"output":{"name":"bool"}}],[11,"fmt","","",45,{"inputs":[{"name":"borrowstate"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",45,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"ne","","",45,{"inputs":[{"name":"borrowstate"},{"name":"borrowstate"}],"output":{"name":"bool"}}],[11,"clone","","",45,{"inputs":[{"name":"borrowstate"}],"output":{"name":"borrowstate"}}],[11,"new","","Creates a new `RefCell` containing `value`.",46,{"inputs":[{"name":"refcell"},{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"t"}}],[11,"borrow_state","","Query the current state of this `RefCell`",46,{"inputs":[{"name":"refcell"}],"output":{"name":"borrowstate"}}],[11,"borrow","","Immutably borrows the wrapped value.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"ref"}}],[11,"borrow_mut","","Mutably borrows the wrapped value.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"refmut"}}],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",46,{"inputs":[{"name":"refcell"}],"output":{"name":"unsafecell"}}],[11,"clone","","",46,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"default","","",46,{"inputs":[{"name":"refcell"}],"output":{"name":"refcell"}}],[11,"eq","","",46,{"inputs":[{"name":"refcell"},{"name":"refcell"}],"output":{"name":"bool"}}],[11,"drop","","",47,null],[11,"clone","","",47,{"inputs":[{"name":"borrowref"}],"output":{"name":"borrowref"}}],[11,"deref","","",48,{"inputs":[{"name":"ref"}],"output":{"name":"t"}}],[11,"clone","","Copies a `Ref`.",48,{"inputs":[{"name":"ref"},{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",48,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for a optional component of the borrowed data, e.g. an\nenum variant.",48,{"inputs":[{"name":"ref"},{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",49,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for a optional component of the borrowed data, e.g.\nan enum variant.",49,{"inputs":[{"name":"refmut"},{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"drop","","",50,null],[11,"deref","","",49,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"deref_mut","","",49,{"inputs":[{"name":"refmut"}],"output":{"name":"t"}}],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",51,{"inputs":[{"name":"unsafecell"},{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",51,{"inputs":[{"name":"unsafecell"}],"output":{"name":"t"}}],[11,"get","","Gets a mutable pointer to the wrapped value.",51,null],[11,"clone","core::char","",52,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"escapeunicode"}}],[11,"clone","","",53,{"inputs":[{"name":"escapeunicodestate"}],"output":{"name":"escapeunicodestate"}}],[11,"next","","",52,{"inputs":[{"name":"escapeunicode"}],"output":{"name":"option"}}],[11,"clone","","",54,{"inputs":[{"name":"escapedefault"}],"output":{"name":"escapedefault"}}],[11,"clone","","",55,{"inputs":[{"name":"escapedefaultstate"}],"output":{"name":"escapedefaultstate"}}],[11,"next","","",54,{"inputs":[{"name":"escapedefault"}],"output":{"name":"option"}}],[11,"clone","core::iter","",56,{"inputs":[{"name":"rev"}],"output":{"name":"rev"}}],[11,"next","","",56,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"size_hint","","",56,null],[11,"next_back","","",56,{"inputs":[{"name":"rev"}],"output":{"name":"option"}}],[11,"clone","","",57,{"inputs":[{"name":"cloned"}],"output":{"name":"cloned"}}],[11,"next","","",57,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"size_hint","","",57,null],[11,"next_back","","",57,{"inputs":[{"name":"cloned"}],"output":{"name":"option"}}],[11,"clone","","",58,{"inputs":[{"name":"cycle"}],"output":{"name":"cycle"}}],[11,"next","","",58,{"inputs":[{"name":"cycle"}],"output":{"name":"option"}}],[11,"size_hint","","",58,null],[11,"clone","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"chain"}}],[11,"clone","","",60,{"inputs":[{"name":"chainstate"}],"output":{"name":"chainstate"}}],[11,"next","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"count","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"usize"}}],[11,"nth","","",59,{"inputs":[{"name":"chain"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"size_hint","","",59,null],[11,"next_back","","",59,{"inputs":[{"name":"chain"}],"output":{"name":"option"}}],[11,"clone","","",61,{"inputs":[{"name":"zip"}],"output":{"name":"zip"}}],[11,"next","","",61,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"size_hint","","",61,null],[11,"next_back","","",61,{"inputs":[{"name":"zip"}],"output":{"name":"option"}}],[11,"clone","","",62,{"inputs":[{"name":"map"}],"output":{"name":"map"}}],[11,"next","","",62,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"size_hint","","",62,null],[11,"next_back","","",62,{"inputs":[{"name":"map"}],"output":{"name":"option"}}],[11,"clone","","",63,{"inputs":[{"name":"filter"}],"output":{"name":"filter"}}],[11,"next","","",63,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"size_hint","","",63,null],[11,"next_back","","",63,{"inputs":[{"name":"filter"}],"output":{"name":"option"}}],[11,"clone","","",64,{"inputs":[{"name":"filtermap"}],"output":{"name":"filtermap"}}],[11,"next","","",64,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"size_hint","","",64,null],[11,"next_back","","",64,{"inputs":[{"name":"filtermap"}],"output":{"name":"option"}}],[11,"clone","","",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"enumerate"}}],[11,"next","","# Overflow Behavior",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"size_hint","","",65,null],[11,"nth","","",65,{"inputs":[{"name":"enumerate"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"usize"}}],[11,"next_back","","",65,{"inputs":[{"name":"enumerate"}],"output":{"name":"option"}}],[11,"clone","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"peekable"}}],[11,"next","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"count","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"usize"}}],[11,"nth","","",66,{"inputs":[{"name":"peekable"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",66,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"size_hint","","",66,null],[11,"peek","","Returns a reference to the next element of the iterator with out\nadvancing it, or None if the iterator is exhausted.",66,{"inputs":[{"name":"peekable"}],"output":{"name":"option"}}],[11,"is_empty","","Checks whether peekable iterator is empty or not.",66,{"inputs":[{"name":"peekable"}],"output":{"name":"bool"}}],[11,"clone","","",67,{"inputs":[{"name":"skipwhile"}],"output":{"name":"skipwhile"}}],[11,"next","","",67,{"inputs":[{"name":"skipwhile"}],"output":{"name":"option"}}],[11,"size_hint","","",67,null],[11,"clone","","",68,{"inputs":[{"name":"takewhile"}],"output":{"name":"takewhile"}}],[11,"next","","",68,{"inputs":[{"name":"takewhile"}],"output":{"name":"option"}}],[11,"size_hint","","",68,null],[11,"clone","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"skip"}}],[11,"next","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"nth","","",69,{"inputs":[{"name":"skip"},{"name":"usize"}],"output":{"name":"option"}}],[11,"count","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"usize"}}],[11,"last","","",69,{"inputs":[{"name":"skip"}],"output":{"name":"option"}}],[11,"size_hint","","",69,null],[11,"clone","","",70,{"inputs":[{"name":"take"}],"output":{"name":"take"}}],[11,"next","","",70,{"inputs":[{"name":"take"}],"output":{"name":"option"}}],[11,"nth","","",70,{"inputs":[{"name":"take"},{"name":"usize"}],"output":{"name":"option"}}],[11,"size_hint","","",70,null],[11,"clone","","",71,{"inputs":[{"name":"scan"}],"output":{"name":"scan"}}],[11,"next","","",71,{"inputs":[{"name":"scan"}],"output":{"name":"option"}}],[11,"size_hint","","",71,null],[11,"clone","","",72,{"inputs":[{"name":"flatmap"}],"output":{"name":"flatmap"}}],[11,"next","","",72,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"size_hint","","",72,null],[11,"next_back","","",72,{"inputs":[{"name":"flatmap"}],"output":{"name":"option"}}],[11,"clone","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"fuse"}}],[11,"next","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"nth","","",73,{"inputs":[{"name":"fuse"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"count","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"usize"}}],[11,"size_hint","","",73,null],[11,"next_back","","",73,{"inputs":[{"name":"fuse"}],"output":{"name":"option"}}],[11,"clone","","",74,{"inputs":[{"name":"inspect"}],"output":{"name":"inspect"}}],[11,"next","","",74,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"size_hint","","",74,null],[11,"next_back","","",74,{"inputs":[{"name":"inspect"}],"output":{"name":"option"}}],[11,"clone","","",75,{"inputs":[{"name":"stepby"}],"output":{"name":"stepby"}}],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",34,{"inputs":[{"name":"rangefrom"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",33,{"inputs":[{"name":"range"},{"name":"a"}],"output":{"name":"stepby"}}],[11,"next","core::iter","",75,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"clone","","",76,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"rangeinclusive"}}],[11,"next","","",76,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"size_hint","","",76,null],[11,"next_back","","",76,{"inputs":[{"name":"rangeinclusive"}],"output":{"name":"option"}}],[11,"next","","",75,{"inputs":[{"name":"stepby"}],"output":{"name":"option"}}],[11,"size_hint","","",75,null],[11,"next","core::ops","",33,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"size_hint","","",33,null],[11,"next_back","","",33,{"inputs":[{"name":"range"}],"output":{"name":"option"}}],[11,"next","","",34,{"inputs":[{"name":"rangefrom"}],"output":{"name":"option"}}],[11,"clone","core::iter","",77,{"inputs":[{"name":"repeat"}],"output":{"name":"repeat"}}],[11,"next","","",77,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"size_hint","","",77,null],[11,"next_back","","",77,{"inputs":[{"name":"repeat"}],"output":{"name":"option"}}],[11,"next","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"size_hint","","",78,null],[11,"next_back","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"option"}}],[11,"len","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"usize"}}],[11,"clone","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"default","","",78,{"inputs":[{"name":"empty"}],"output":{"name":"empty"}}],[11,"clone","","",79,{"inputs":[{"name":"once"}],"output":{"name":"once"}}],[11,"next","","",79,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"size_hint","","",79,null],[11,"next_back","","",79,{"inputs":[{"name":"once"}],"output":{"name":"option"}}],[11,"len","","",79,{"inputs":[{"name":"once"}],"output":{"name":"usize"}}],[11,"hash","core::option","",10,null],[11,"fmt","","",10,{"inputs":[{"name":"option"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"option"}}],[11,"lt","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"le","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"gt","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ge","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"eq","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"ne","","",10,{"inputs":[{"name":"option"},{"name":"option"}],"output":{"name":"bool"}}],[11,"clone","","",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"default","","",10,{"inputs":[{"name":"option"}],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",10,{"inputs":[{"name":"option"}],"output":{"name":"intoiter"}}],[11,"clone","","",80,{"inputs":[{"name":"item"}],"output":{"name":"item"}}],[11,"next","","",80,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"size_hint","","",80,null],[11,"next_back","","",80,{"inputs":[{"name":"item"}],"output":{"name":"option"}}],[11,"next","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",81,null],[11,"next_back","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",81,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",82,null],[11,"next_back","","",82,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"intoiter"}}],[11,"next","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",83,null],[11,"next_back","","",83,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",10,{"inputs":[{"name":"option"},{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",84,{"inputs":[{"name":"slice"}],"output":{"name":"slice"}}],[11,"clone","","",85,{"inputs":[{"name":"traitobject"}],"output":{"name":"traitobject"}}],[11,"hash","core::result","",86,null],[11,"fmt","","",86,{"inputs":[{"name":"result"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"cmp","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"ordering"}}],[11,"partial_cmp","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"option"}}],[11,"lt","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"le","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"gt","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ge","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"eq","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"ne","","",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"bool"}}],[11,"clone","","",86,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"is_ok","","Returns true if the result is `Ok`",86,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"is_err","","Returns true if the result is `Err`",86,{"inputs":[{"name":"result"}],"output":{"name":"bool"}}],[11,"ok","","Converts from `Result<T, E>` to `Option<T>`",86,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"err","","Converts from `Result<T, E>` to `Option<E>`",86,{"inputs":[{"name":"result"}],"output":{"name":"option"}}],[11,"as_ref","","Converts from `Result<T, E>` to `Result<&T, &E>`",86,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_mut","","Converts from `Result<T, E>` to `Result<&mut T, &mut E>`",86,{"inputs":[{"name":"result"}],"output":{"name":"result"}}],[11,"as_slice","","Converts from `Result<T, E>` to `&[T]` (without copying)",86,null],[11,"as_mut_slice","","Converts from `Result<T, E>` to `&mut [T]` (without copying)",86,null],[11,"map","","Maps a `Result<T, E>` to `Result<U, E>` by applying a function to an\ncontained `Ok` value, leaving an `Err` value untouched.",86,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"map_err","","Maps a `Result<T, E>` to `Result<T, F>` by applying a function to an\ncontained `Err` value, leaving an `Ok` value untouched.",86,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"iter","","Returns an iterator over the possibly contained value.",86,{"inputs":[{"name":"result"}],"output":{"name":"iter"}}],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",86,{"inputs":[{"name":"result"}],"output":{"name":"itermut"}}],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"result"}}],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"result"}],"output":{"name":"result"}}],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",86,{"inputs":[{"name":"result"},{"name":"o"}],"output":{"name":"result"}}],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",86,{"inputs":[{"name":"result"},{"name":"t"}],"output":{"name":"t"}}],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",86,{"inputs":[{"name":"result"},{"name":"f"}],"output":{"name":"t"}}],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",86,{"inputs":[{"name":"result"}],"output":{"name":"t"}}],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",86,{"inputs":[{"name":"result"},{"name":"str"}],"output":{"name":"t"}}],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",86,{"inputs":[{"name":"result"}],"output":{"name":"e"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",86,{"inputs":[{"name":"result"}],"output":{"name":"intoiter"}}],[11,"next","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",87,null],[11,"next_back","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",87,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"next","","",88,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",88,null],[11,"next_back","","",88,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next","","",89,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"size_hint","","",89,null],[11,"next_back","","",89,{"inputs":[{"name":"intoiter"}],"output":{"name":"option"}}],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",86,{"inputs":[{"name":"result"},{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::simd","",90,{"inputs":[{"name":"i8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",90,{"inputs":[{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"fmt","","",91,{"inputs":[{"name":"i16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",91,{"inputs":[{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"fmt","","",92,{"inputs":[{"name":"i32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",92,{"inputs":[{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"fmt","","",93,{"inputs":[{"name":"i64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",93,{"inputs":[{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"fmt","","",94,{"inputs":[{"name":"u8x16"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",94,{"inputs":[{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"fmt","","",95,{"inputs":[{"name":"u16x8"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",95,{"inputs":[{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"fmt","","",96,{"inputs":[{"name":"u32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",96,{"inputs":[{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"fmt","","",97,{"inputs":[{"name":"u64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",97,{"inputs":[{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"fmt","","",98,{"inputs":[{"name":"f32x4"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",98,{"inputs":[{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"fmt","","",99,{"inputs":[{"name":"f64x2"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",99,{"inputs":[{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"add","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"add","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"add","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"add","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"add","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"add","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"add","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"add","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"add","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"add","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"sub","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"sub","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"sub","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"sub","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"sub","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"sub","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"sub","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"sub","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"sub","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"sub","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"mul","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"mul","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"mul","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"mul","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"mul","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"mul","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"mul","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"mul","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"mul","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"mul","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"div","","",98,{"inputs":[{"name":"f32x4"},{"name":"f32x4"}],"output":{"name":"f32x4"}}],[11,"div","","",99,{"inputs":[{"name":"f64x2"},{"name":"f64x2"}],"output":{"name":"f64x2"}}],[11,"shl","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shl","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shl","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shl","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shl","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shl","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shl","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shl","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"shr","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"shr","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"shr","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"shr","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"shr","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"shr","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"shr","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"shr","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitand","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitand","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitand","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitand","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitand","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitand","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitand","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitand","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitor","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitor","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitor","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitor","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitor","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitor","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitor","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitor","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"bitxor","","",94,{"inputs":[{"name":"u8x16"},{"name":"u8x16"}],"output":{"name":"u8x16"}}],[11,"bitxor","","",95,{"inputs":[{"name":"u16x8"},{"name":"u16x8"}],"output":{"name":"u16x8"}}],[11,"bitxor","","",96,{"inputs":[{"name":"u32x4"},{"name":"u32x4"}],"output":{"name":"u32x4"}}],[11,"bitxor","","",97,{"inputs":[{"name":"u64x2"},{"name":"u64x2"}],"output":{"name":"u64x2"}}],[11,"bitxor","","",90,{"inputs":[{"name":"i8x16"},{"name":"i8x16"}],"output":{"name":"i8x16"}}],[11,"bitxor","","",91,{"inputs":[{"name":"i16x8"},{"name":"i16x8"}],"output":{"name":"i16x8"}}],[11,"bitxor","","",92,{"inputs":[{"name":"i32x4"},{"name":"i32x4"}],"output":{"name":"i32x4"}}],[11,"bitxor","","",93,{"inputs":[{"name":"i64x2"},{"name":"i64x2"}],"output":{"name":"i64x2"}}],[11,"as_slice","core::slice","View the underlying data as a subslice of the original data.",100,null],[11,"next","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"size_hint","","",100,null],[11,"count","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"usize"}}],[11,"nth","","",100,{"inputs":[{"name":"iter"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"next_back","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[11,"clone","","",100,{"inputs":[{"name":"iter"}],"output":{"name":"iter"}}],[11,"into_slice","","View the underlying data as a subslice of the original data.",101,null],[11,"next","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"size_hint","","",101,null],[11,"count","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"usize"}}],[11,"nth","","",101,{"inputs":[{"name":"itermut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"next_back","","",101,{"inputs":[{"name":"itermut"}],"output":{"name":"option"}}],[11,"clone","","",102,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",102,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"size_hint","","",102,null],[11,"next_back","","",102,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",102,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"finish","","",103,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",103,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"size_hint","","",103,null],[11,"next_back","","",103,{"inputs":[{"name":"splitmut"}],"output":{"name":"option"}}],[11,"next","","",104,{"inputs":[{"name":"genericsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",104,null],[11,"next","","",105,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"size_hint","","",105,null],[11,"next","","",106,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"size_hint","","",106,null],[11,"next","","",107,{"inputs":[{"name":"splitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",107,null],[11,"next","","",108,{"inputs":[{"name":"rsplitnmut"}],"output":{"name":"option"}}],[11,"size_hint","","",108,null],[11,"clone","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"windows"}}],[11,"next","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"size_hint","","",109,null],[11,"count","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"usize"}}],[11,"nth","","",109,{"inputs":[{"name":"windows"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"next_back","","",109,{"inputs":[{"name":"windows"}],"output":{"name":"option"}}],[11,"clone","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"chunks"}}],[11,"next","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"size_hint","","",110,null],[11,"count","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"usize"}}],[11,"nth","","",110,{"inputs":[{"name":"chunks"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next_back","","",110,{"inputs":[{"name":"chunks"}],"output":{"name":"option"}}],[11,"next","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"size_hint","","",111,null],[11,"count","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"usize"}}],[11,"nth","","",111,{"inputs":[{"name":"chunksmut"},{"name":"usize"}],"output":{"name":"option"}}],[11,"last","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"next_back","","",111,{"inputs":[{"name":"chunksmut"}],"output":{"name":"option"}}],[11,"fmt","core::str::pattern","",112,{"inputs":[{"name":"searchstep"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"eq","","",112,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"ne","","",112,{"inputs":[{"name":"searchstep"},{"name":"searchstep"}],"output":{"name":"bool"}}],[11,"clone","","",112,{"inputs":[{"name":"searchstep"}],"output":{"name":"searchstep"}}],[11,"clone","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"chareqsearcher"}}],[11,"into_searcher","","",114,{"inputs":[{"name":"chareqpattern"},{"name":"str"}],"output":{"name":"chareqsearcher"}}],[11,"haystack","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"str"}}],[11,"next","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"next_back","","",113,{"inputs":[{"name":"chareqsearcher"}],"output":{"name":"searchstep"}}],[11,"clone","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"charsearcher"}}],[11,"haystack","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"str"}}],[11,"next","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",115,{"inputs":[{"name":"charsearcher"}],"output":{"name":"option"}}],[11,"clone","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"charslicesearcher"}}],[11,"haystack","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"str"}}],[11,"next","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",116,{"inputs":[{"name":"charslicesearcher"}],"output":{"name":"option"}}],[11,"clone","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"charpredicatesearcher"}}],[11,"haystack","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"str"}}],[11,"next","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_back","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"next_reject_back","","",117,{"inputs":[{"name":"charpredicatesearcher"}],"output":{"name":"option"}}],[11,"fmt","","",118,{"inputs":[{"name":"strsearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"strsearcher"}}],[11,"fmt","","",119,{"inputs":[{"name":"strsearcherimpl"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",119,{"inputs":[{"name":"strsearcherimpl"}],"output":{"name":"strsearcherimpl"}}],[11,"fmt","","",120,{"inputs":[{"name":"emptyneedle"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",120,{"inputs":[{"name":"emptyneedle"}],"output":{"name":"emptyneedle"}}],[11,"haystack","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"str"}}],[11,"next","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"next_back","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"searchstep"}}],[11,"next_match_back","","",118,{"inputs":[{"name":"strsearcher"}],"output":{"name":"option"}}],[11,"fmt","","",121,{"inputs":[{"name":"twowaysearcher"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",121,{"inputs":[{"name":"twowaysearcher"}],"output":{"name":"twowaysearcher"}}],[11,"use_early_reject","","",122,{"inputs":[{"name":"matchonly"}],"output":{"name":"bool"}}],[11,"rejecting","","",122,null],[11,"matching","","",122,null],[11,"use_early_reject","","",123,{"inputs":[{"name":"rejectandmatch"}],"output":{"name":"bool"}}],[11,"rejecting","","",123,null],[11,"matching","","",123,null],[11,"eq","core::str","",124,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"ne","","",124,{"inputs":[{"name":"parseboolerror"},{"name":"parseboolerror"}],"output":{"name":"bool"}}],[11,"clone","","",124,{"inputs":[{"name":"parseboolerror"}],"output":{"name":"parseboolerror"}}],[11,"fmt","","",124,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",124,{"inputs":[{"name":"parseboolerror"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",125,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",125,{"inputs":[{"name":"utf8error"}],"output":{"name":"utf8error"}}],[11,"eq","","",125,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"ne","","",125,{"inputs":[{"name":"utf8error"},{"name":"utf8error"}],"output":{"name":"bool"}}],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",125,{"inputs":[{"name":"utf8error"}],"output":{"name":"usize"}}],[11,"fmt","","",125,{"inputs":[{"name":"utf8error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"chars"}}],[11,"next","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"size_hint","","",126,null],[11,"next_back","","",126,{"inputs":[{"name":"chars"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",126,{"inputs":[{"name":"chars"}],"output":{"name":"str"}}],[11,"clone","","",127,{"inputs":[{"name":"charindices"}],"output":{"name":"charindices"}}],[11,"next","","",127,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"size_hint","","",127,null],[11,"next_back","","",127,{"inputs":[{"name":"charindices"}],"output":{"name":"option"}}],[11,"as_str","","View the underlying data as a subslice of the original data.",127,{"inputs":[{"name":"charindices"}],"output":{"name":"str"}}],[11,"clone","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"bytes"}}],[11,"next","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"size_hint","","",128,null],[11,"count","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"last","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"nth","","",128,{"inputs":[{"name":"bytes"},{"name":"usize"}],"output":{"name":"option"}}],[11,"next_back","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"option"}}],[11,"len","","",128,{"inputs":[{"name":"bytes"}],"output":{"name":"usize"}}],[11,"clone","","",129,{"inputs":[{"name":"splitinternal"}],"output":{"name":"splitinternal"}}],[11,"next","","",130,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"clone","","",130,{"inputs":[{"name":"split"}],"output":{"name":"split"}}],[11,"next","","",131,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"clone","","",131,{"inputs":[{"name":"rsplit"}],"output":{"name":"rsplit"}}],[11,"next_back","","",130,{"inputs":[{"name":"split"}],"output":{"name":"option"}}],[11,"next_back","","",131,{"inputs":[{"name":"rsplit"}],"output":{"name":"option"}}],[11,"next","","",132,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"clone","","",132,{"inputs":[{"name":"splitterminator"}],"output":{"name":"splitterminator"}}],[11,"next","","",133,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",133,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"rsplitterminator"}}],[11,"next_back","","",132,{"inputs":[{"name":"splitterminator"}],"output":{"name":"option"}}],[11,"next_back","","",133,{"inputs":[{"name":"rsplitterminator"}],"output":{"name":"option"}}],[11,"clone","","",134,{"inputs":[{"name":"splitninternal"}],"output":{"name":"splitninternal"}}],[11,"next","","",135,{"inputs":[{"name":"splitn"}],"output":{"name":"option"}}],[11,"clone","","",135,{"inputs":[{"name":"splitn"}],"output":{"name":"splitn"}}],[11,"next","","",136,{"inputs":[{"name":"rsplitn"}],"output":{"name":"option"}}],[11,"clone","","",136,{"inputs":[{"name":"rsplitn"}],"output":{"name":"rsplitn"}}],[11,"clone","","",137,{"inputs":[{"name":"matchindicesinternal"}],"output":{"name":"matchindicesinternal"}}],[11,"next","","",138,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"clone","","",138,{"inputs":[{"name":"matchindices"}],"output":{"name":"matchindices"}}],[11,"next","","",139,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",139,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"rmatchindices"}}],[11,"next_back","","",138,{"inputs":[{"name":"matchindices"}],"output":{"name":"option"}}],[11,"next_back","","",139,{"inputs":[{"name":"rmatchindices"}],"output":{"name":"option"}}],[11,"clone","","",140,{"inputs":[{"name":"matchesinternal"}],"output":{"name":"matchesinternal"}}],[11,"next","","",141,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"clone","","",141,{"inputs":[{"name":"matches"}],"output":{"name":"matches"}}],[11,"next","","",142,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",142,{"inputs":[{"name":"rmatches"}],"output":{"name":"rmatches"}}],[11,"next_back","","",141,{"inputs":[{"name":"matches"}],"output":{"name":"option"}}],[11,"next_back","","",142,{"inputs":[{"name":"rmatches"}],"output":{"name":"option"}}],[11,"clone","","",143,{"inputs":[{"name":"lines"}],"output":{"name":"lines"}}],[11,"next","","",143,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"size_hint","","",143,null],[11,"next_back","","",143,{"inputs":[{"name":"lines"}],"output":{"name":"option"}}],[11,"clone","","",144,{"inputs":[{"name":"linesany"}],"output":{"name":"linesany"}}],[11,"clone","","",145,{"inputs":[{"name":"linesanymap"}],"output":{"name":"linesanymap"}}],[11,"call","","",145,null],[11,"call_mut","","",145,null],[11,"call_once","","",145,null],[11,"next","","",144,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"size_hint","","",144,null],[11,"next_back","","",144,{"inputs":[{"name":"linesany"}],"output":{"name":"option"}}],[11,"clone","","",146,{"inputs":[{"name":"charrange"}],"output":{"name":"charrange"}}],[11,"new","core::hash::sip","Creates a new `SipHasher` with the two initial keys set to 0.",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",147,{"inputs":[{"name":"siphasher"},{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",147,null],[11,"finish","","",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"u64"}}],[11,"clone","","",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"default","","",147,{"inputs":[{"name":"siphasher"}],"output":{"name":"siphasher"}}],[11,"eq","core::fmt::num","",148,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"ne","","",148,{"inputs":[{"name":"binary"},{"name":"binary"}],"output":{"name":"bool"}}],[11,"clone","","",148,{"inputs":[{"name":"binary"}],"output":{"name":"binary"}}],[11,"eq","","",149,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"ne","","",149,{"inputs":[{"name":"octal"},{"name":"octal"}],"output":{"name":"bool"}}],[11,"clone","","",149,{"inputs":[{"name":"octal"}],"output":{"name":"octal"}}],[11,"eq","","",150,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"ne","","",150,{"inputs":[{"name":"decimal"},{"name":"decimal"}],"output":{"name":"bool"}}],[11,"clone","","",150,{"inputs":[{"name":"decimal"}],"output":{"name":"decimal"}}],[11,"eq","","",151,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"ne","","",151,{"inputs":[{"name":"lowerhex"},{"name":"lowerhex"}],"output":{"name":"bool"}}],[11,"clone","","",151,{"inputs":[{"name":"lowerhex"}],"output":{"name":"lowerhex"}}],[11,"eq","","",152,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"ne","","",152,{"inputs":[{"name":"upperhex"},{"name":"upperhex"}],"output":{"name":"bool"}}],[11,"clone","","",152,{"inputs":[{"name":"upperhex"}],"output":{"name":"upperhex"}}],[11,"eq","","",153,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"ne","","",153,{"inputs":[{"name":"radix"},{"name":"radix"}],"output":{"name":"bool"}}],[11,"clone","","",153,{"inputs":[{"name":"radix"}],"output":{"name":"radix"}}],[11,"clone","","",154,{"inputs":[{"name":"radixfmt"}],"output":{"name":"radixfmt"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",154,{"inputs":[{"name":"radixfmt"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"write_str","core::fmt::builders","",155,{"inputs":[{"name":"padadapter"},{"name":"str"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated struct output.",156,{"inputs":[{"name":"debugstruct"},{"name":"str"},{"name":"debug"}],"output":{"name":"debugstruct"}}],[11,"finish","","Finishes output and returns any error encountered.",156,{"inputs":[{"name":"debugstruct"}],"output":{"name":"result"}}],[11,"field","","Adds a new field to the generated tuple struct output.",157,{"inputs":[{"name":"debugtuple"},{"name":"debug"}],"output":{"name":"debugtuple"}}],[11,"finish","","Finishes output and returns any error encountered.",157,{"inputs":[{"name":"debugtuple"}],"output":{"name":"result"}}],[11,"formatter","","Returns the wrapped `Formatter`.",157,{"inputs":[{"name":"debugtuple"}],"output":{"name":"formatter"}}],[11,"finish","","",158,null],[11,"entry","","Adds a new entry to the set output.",159,{"inputs":[{"name":"debugset"},{"name":"debug"}],"output":{"name":"debugset"}}],[11,"entries","","Adds the contents of an iterator of entries to the set output.",159,{"inputs":[{"name":"debugset"},{"name":"i"}],"output":{"name":"debugset"}}],[11,"finish","","Finishes output and returns any error encountered.",159,{"inputs":[{"name":"debugset"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the list output.",160,{"inputs":[{"name":"debuglist"},{"name":"debug"}],"output":{"name":"debuglist"}}],[11,"entries","","Adds the contents of an iterator of entries to the list output.",160,{"inputs":[{"name":"debuglist"},{"name":"i"}],"output":{"name":"debuglist"}}],[11,"finish","","Finishes output and returns any error encountered.",160,{"inputs":[{"name":"debuglist"}],"output":{"name":"result"}}],[11,"entry","","Adds a new entry to the map output.",161,{"inputs":[{"name":"debugmap"},{"name":"debug"},{"name":"debug"}],"output":{"name":"debugmap"}}],[11,"entries","","Adds the contents of an iterator of entries to the map output.",161,{"inputs":[{"name":"debugmap"},{"name":"i"}],"output":{"name":"debugmap"}}],[11,"finish","","Finishes output and returns any error encountered.",161,{"inputs":[{"name":"debugmap"}],"output":{"name":"result"}}],[11,"clone","core::fmt::rt::v1","",162,{"inputs":[{"name":"argument"}],"output":{"name":"argument"}}],[11,"clone","","",163,{"inputs":[{"name":"formatspec"}],"output":{"name":"formatspec"}}],[11,"eq","","",164,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"ne","","",164,{"inputs":[{"name":"alignment"},{"name":"alignment"}],"output":{"name":"bool"}}],[11,"clone","","",164,{"inputs":[{"name":"alignment"}],"output":{"name":"alignment"}}],[11,"clone","","",165,{"inputs":[{"name":"count"}],"output":{"name":"count"}}],[11,"clone","","",166,{"inputs":[{"name":"position"}],"output":{"name":"position"}}],[11,"fmt","core::fmt","",167,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",167,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"clone","","",168,{"inputs":[{"name":"argumentv1"}],"output":{"name":"argumentv1"}}],[11,"clone","","",169,{"inputs":[{"name":"flagv1"}],"output":{"name":"flagv1"}}],[11,"clone","","",170,{"inputs":[{"name":"arguments"}],"output":{"name":"arguments"}}],[11,"fmt","","",170,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",170,{"inputs":[{"name":"arguments"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",171,{"inputs":[{"name":"formatter"},{"name":"bool"},{"name":"str"},{"name":"str"}],"output":{"name":"result"}}],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_fmt","","Writes some formatted information into this instance",171,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"flags","","Flags for formatting (packed version of rt::Flag)",171,{"inputs":[{"name":"formatter"}],"output":{"name":"u32"}}],[11,"fill","","Character used as 'fill' whenever there is alignment",171,{"inputs":[{"name":"formatter"}],"output":{"name":"char"}}],[11,"align","","Flag indicating what form of alignment was requested",171,{"inputs":[{"name":"formatter"}],"output":{"name":"alignment"}}],[11,"width","","Optionally specified integer width that the output should be",171,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"precision","","Optionally specified precision for numeric types",171,{"inputs":[{"name":"formatter"}],"output":{"name":"option"}}],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugstruct"}}],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"debugtuple"}}],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",171,{"inputs":[{"name":"formatter"}],"output":{"name":"debuglist"}}],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",171,{"inputs":[{"name":"formatter"}],"output":{"name":"debugset"}}],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",171,{"inputs":[{"name":"formatter"}],"output":{"name":"debugmap"}}],[11,"write_str","","",171,{"inputs":[{"name":"formatter"},{"name":"str"}],"output":{"name":"result"}}],[11,"write_char","","",171,{"inputs":[{"name":"formatter"},{"name":"char"}],"output":{"name":"result"}}],[11,"write_fmt","","",171,{"inputs":[{"name":"formatter"},{"name":"arguments"}],"output":{"name":"result"}}],[11,"fmt","","",167,{"inputs":[{"name":"error"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::marker","",31,{"inputs":[{"name":"phantomdata"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","core::cell","",44,{"inputs":[{"name":"cell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",46,{"inputs":[{"name":"refcell"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",48,{"inputs":[{"name":"ref"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",49,{"inputs":[{"name":"refmut"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",172,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",172,null],[11,"clone","libc","",0,{"inputs":[{"name":"utimbuf"}],"output":{"name":"utimbuf"}}],[11,"clone","","",1,{"inputs":[{"name":"timeval"}],"output":{"name":"timeval"}}],[11,"clone","","",2,{"inputs":[{"name":"timespec"}],"output":{"name":"timespec"}}],[11,"clone","","",3,{"inputs":[{"name":"rlimit"}],"output":{"name":"rlimit"}}],[11,"clone","","",4,{"inputs":[{"name":"rusage"}],"output":{"name":"rusage"}}],[11,"clone","","",5,{"inputs":[{"name":"in_addr"}],"output":{"name":"in_addr"}}],[11,"clone","","",6,{"inputs":[{"name":"in6_addr"}],"output":{"name":"in6_addr"}}],[11,"clone","","",7,{"inputs":[{"name":"ip_mreq"}],"output":{"name":"ip_mreq"}}],[11,"clone","","",8,{"inputs":[{"name":"ipv6_mreq"}],"output":{"name":"ipv6_mreq"}}],[11,"clone","","",9,{"inputs":[{"name":"dl_info"}],"output":{"name":"dl_info"}}],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[17,"WNOHANG","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"Dl_info"],[4,"Option"],[3,"Wrapping"],[3,"Big32x40"],[3,"Big8x3"],[3,"Decoded"],[4,"FullDecoded"],[3,"Fp"],[4,"Part"],[3,"Formatted"],[4,"Sign"],[3,"Unpacked"],[4,"Sign"],[3,"Decimal"],[4,"ParseResult"],[3,"ParseFloatError"],[4,"FloatErrorKind"],[4,"FpCategory"],[3,"ParseIntError"],[4,"IntErrorKind"],[3,"NonZero"],[3,"Unique"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"AtomicPtr"],[4,"Ordering"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"BorrowRef"],[3,"Ref"],[3,"RefMut"],[3,"BorrowRefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[4,"EscapeUnicodeState"],[3,"EscapeDefault"],[4,"EscapeDefaultState"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[4,"ChainState"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"StepBy"],[3,"RangeInclusive"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Item"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"i8x16"],[3,"i16x8"],[3,"i32x4"],[3,"i64x2"],[3,"u8x16"],[3,"u16x8"],[3,"u32x4"],[3,"u64x2"],[3,"f32x4"],[3,"f64x2"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"GenericSplitN"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharEqSearcher"],[3,"CharEqPattern"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"StrSearcherImpl"],[3,"EmptyNeedle"],[3,"TwoWaySearcher"],[4,"MatchOnly"],[4,"RejectAndMatch"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"SplitInternal"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitNInternal"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndicesInternal"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"MatchesInternal"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"LinesAnyMap"],[3,"CharRange"],[3,"SipHasher"],[3,"Binary"],[3,"Octal"],[3,"Decimal"],[3,"LowerHex"],[3,"UpperHex"],[3,"Radix"],[3,"RadixFmt"],[3,"PadAdapter"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugInner"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Argument"],[3,"FormatSpec"],[4,"Alignment"],[4,"Count"],[4,"Position"],[3,"Error"],[3,"ArgumentV1"],[4,"FlagV1"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"]]};
searchIndex['advapi32'] = {"items":[],"paths":[]};
searchIndex['winapi'] = {"items":[],"paths":[]};
searchIndex['bitflags'] = {"items":[[0,"","bitflags","A typesafe bitmask flag generator.",null,null],[14,"bitflags!","","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[]};
initSearch(searchIndex);
